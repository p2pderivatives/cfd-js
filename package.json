{
  "name": "cfd-js",
  "version": "0.3.2",
  "domain": "p2pderivatives",
  "repository": {
    "type": "git",
    "url": "https://github.com/p2pderivatives/cfd-js.git"
  },
  "description": "Crypto Finance Development Kit for JavaScript.",
  "author": "Crypto Garage",
  "engines": {
    "node": ">=10.0.0"
  },
  "binary": {
    "napi_versions": [
      3
    ]
  },
  "homepage": "https://github.com/p2pderivatives/cfd-js",
  "bugs": {
    "url": "https://github.com/p2pderivatives/cfd-js/issues"
  },
  "memo": {
    "abi_url": "https://github.com/lgeiger/node-abi/blob/master/index.js#L51",
    "node_version": "-t 9.11.2 -t 11.15.0 -t 13.14.0",
    "electron_version": "-t 2.0.0 -t 3.0.0 -t 4.0.4 -t 5.0.0"
  },
  "license": "MIT",
  "main": "index.js",
  "types": "index.d.ts",
  "gypfile": false,
  "scripts": {
    "install": "prebuild-install --runtime napi --verbose || run-s install_cmake",
    "install_cmake": "run-s download_object cmake_install_configure cmake_compile",
    "prebuild_all_local": "run-s cmake_clean_all download_object prebuild_napi",
    "old_prebuild_all_local": "run-s cmake_clean_all download_object prebuild_all",
    "prebuild_all": "run-s prebuild_nodejs prebuild_electron",
    "prebuild_nodejs": "prebuild --backend cmake-js -t 15.1.0 -t 14.3.0 -t 12.16.3 -t 10.20.1 -r node --verbose --include-regex \".*(node|a|so|dll|dylib)$\" --  -O build --CDENABLE_SHARED=off --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDENABLE_TESTS=off --CDENABLE_JS_WRAPPER=off --CDTARGET_RPATH=\"@executable_path;/usr/local/lib;/usr/local/lib64;\\$\\$ORIGIN/node_modules/cfd-js/build/Release;\\$ORIGIN/node_modules/cfd-js/build/Release;\\$ORIGIN/../node_modules/cfd-js/build/Release;\\$ORIGIN/../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../../../../node_modules/cfd-js/build/Release;\\$ORIGIN/build/Release;\\$ORIGIN/wrap_js/dl_lib/lib\" -C",
    "prebuild_electron": "prebuild --backend cmake-js -t 12.0.0-beta.1 -t 11.0.0-beta.11 -t 10.0.0-beta.1 -t 9.0.0 -t 8.0.0 -t 7.0.0 -r electron --verbose --include-regex \".*(node|a|so|dll|dylib)$\" --  -O build --CDENABLE_SHARED=off --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDENABLE_TESTS=off --CDENABLE_JS_WRAPPER=off --CDTARGET_RPATH=\"@executable_path;/usr/local/lib;/usr/local/lib64;\\$\\$ORIGIN/node_modules/cfd-js/build/Release;\\$ORIGIN/node_modules/cfd-js/build/Release;\\$ORIGIN/../node_modules/cfd-js/build/Release;\\$ORIGIN/../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../../../../node_modules/cfd-js/build/Release;\\$ORIGIN/build/Release;\\$ORIGIN/wrap_js/dl_lib/lib\" -C",
    "prebuild_napi": "prebuild --backend cmake-js -r napi --verbose --include-regex \".*(node|a|so|dll|dylib)$\" --  -O build --CDENABLE_SHARED=off --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDENABLE_TESTS=off --CDENABLE_JS_WRAPPER=off --CDTARGET_RPATH=\"@executable_path;/usr/local/lib;/usr/local/lib64;\\$\\$ORIGIN/node_modules/cfd-js/build/Release;\\$ORIGIN/node_modules/cfd-js/build/Release;\\$ORIGIN/../node_modules/cfd-js/build/Release;\\$ORIGIN/../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../../../../node_modules/cfd-js/build/Release;\\$ORIGIN/build/Release;\\$ORIGIN/wrap_js/dl_lib/lib\" -C",
    "prebuild_upload_all": "prebuild --upload-all",
    "check_version": "node ./tools/checker.js version",
    "download_object": "node ./pkg_getter.js",
    "deploy_object": "node ./pkg_getter.js deployment",
    "cmake_compile": "cmake-js compile -O build",
    "cmake_install_configure": "cmake-js configure -O build --CDENABLE_SHARED=off --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDENABLE_TESTS=off --CDENABLE_JS_WRAPPER=off --CDTARGET_RPATH=\"@executable_path;/usr/local/lib;/usr/local/lib64;\\$\\$ORIGIN/node_modules/cfd-js/build/Release;\\$ORIGIN/node_modules/cfd-js/build/Release;\\$ORIGIN/../node_modules/cfd-js/build/Release;\\$ORIGIN/../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../../../node_modules/cfd-js/build/Release;\\$ORIGIN/../../../../../../node_modules/cfd-js/build/Release;\\$ORIGIN/build/Release;\\$ORIGIN/wrap_js/dl_lib/lib\" -C",
    "cmake_release_parallel": "run-s cmake_clean cmake_install_configure cmake_build_parallel",
    "example": "node wrap_js/example.js example",
    "elements_example": "node wrap_js/example.js elements_example",
    "testing_example": "node wrap_js/example.js testing_example",
    "util_example": "node wrap_js/cfdjs_util_example.js",
    "ts_example": "ts-node wrap_js/ts_example.ts",
    "test": "jest --no-cache",
    "test_watch": "jest --no-cache --watch",
    "test_quiet": "jest --no-cache --silent",
    "test_logging": "jest --no-cache --silent=false --verbose false",
    "bitcoin_test": "jest -c ./integration_jest.config.js --no-cache",
    "elements_test": "jest -c ./integration_elements_jest.config.js --no-cache",
    "format": "run-p format_cpp_all format_js_all",
    "format_cpp_all": "run-s code_format lint_check",
    "format_js_all": "run-s js_format eslint_check",
    "format_all": "run-p code_format js_format",
    "code_format": "clang-format -i --style=file src/*.cpp src/*.h include/cfdjs/*.h addon/*.cpp",
    "js_format": "eslint --ext .js,.ts *.ts index.js cfdjs_util.js tools/ wrap_js/ --fix",
    "cmake_all": "run-s cmake_configure cmake_build_parallel",
    "cmake_configure": "run-script-os",
    "cmake_configure:win32": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off",
    "cmake_configure:linux": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDTARGET_RPATH=./build/Release -g",
    "cmake_configure:darwin": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDTARGET_RPATH=\"@executable_path;./build/Release\" -C",
    "cmake_quiet": "run-s cmake_quiet_configure cmake_quiet_build",
    "cmake_quiet_configure": "run-script-os",
    "cmake_quiet_configure:win32": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off -i",
    "cmake_quiet_configure:linux": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDTARGET_RPATH=./build/Release -g -i",
    "cmake_quiet_configure:darwin": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDTARGET_RPATH=\"@executable_path;./build/Release\" -C -i",
    "cmake_elem_off": "run-s cmake_elem_off_configure cmake_build",
    "cmake_elem_off_configure": "run-script-os",
    "cmake_elem_off_configure:win32": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDENABLE_ELEMENTS=off",
    "cmake_elem_off_configure:linux": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDENABLE_ELEMENTS=off --CDTARGET_RPATH=./build/Release -g",
    "cmake_elem_off_configure:darwin": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDENABLE_ELEMENTS=off --CDTARGET_RPATH=\"@executable_path;./build/Release\" -C",
    "cmake_log_all": "run-s cmake_log_configure cmake_build",
    "cmake_log_configure": "run-script-os",
    "cmake_log_configure:win32": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDCFDCORE_DEBUG=on",
    "cmake_log_configure:linux": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDTARGET_RPATH=./build/Release --CDCFDCORE_DEBUG=on -g",
    "cmake_log_configure:darwin": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDTARGET_RPATH=\"@executable_path;./build/Release\" --CDCFDCORE_DEBUG=on -C",
    "cmake_con_all": "run-s cmake_con_configure cmake_build",
    "cmake_con_configure": "run-script-os",
    "cmake_con_configure:win32": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDCFDCORE_DEBUG=on --CDCFDCORE_LOG_CONSOLE=on",
    "cmake_con_configure:linux": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDTARGET_RPATH=./build/Release --CDCFDCORE_DEBUG=on --CDCFDCORE_LOG_CONSOLE=on -g",
    "cmake_con_configure:darwin": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDTARGET_RPATH=\"@executable_path;./build/Release\" --CDCFDCORE_DEBUG=on --CDCFDCORE_LOG_CONSOLE=on -C",
    "cmake_debug_all": "run-s cmake_debug_configure cmake_debug_build",
    "cmake_debug_configure": "run-script-os",
    "cmake_debug_configure:win32": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off -D",
    "cmake_debug_configure:linux": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDTARGET_RPATH=./build/Debug -g -D",
    "cmake_debug_configure:darwin": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDTARGET_RPATH=\"@executable_path;./build/Debug\" -C -D",
    "cmake_gcov_all": "run-s cmake_gcov_configure cmake_debug_build",
    "cmake_gcov_configure": "run-script-os",
    "cmake_gcov_configure:win32": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDENABLE_COVERAGE=on -D",
    "cmake_gcov_configure:linux": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDENABLE_COVERAGE=on --CDTARGET_RPATH=./build/Debug -g -D",
    "cmake_gcov_configure:darwin": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDENABLE_COVERAGE=on --CDTARGET_RPATH=\"@executable_path;./build/Debug\" -C -D",
    "cmake_clang": "run-s cmake_clang_configure cmake_build",
    "cmake_clang_configure": "run-script-os",
    "cmake_clang_configure:win32": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off -C",
    "cmake_clang_configure:linux": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDTARGET_RPATH=./build/Release -C",
    "cmake_clang_configure:darwin": "cmake-js configure -O build --CDENABLE_SHARED=on --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDTARGET_RPATH=\"@executable_path;./build/Release\" -C",
    "cmake_static": "run-s cmake_static_configure cmake_build",
    "cmake_static_configure": "run-script-os",
    "cmake_static_configure:win32": "cmake-js configure -O build --CDENABLE_SHARED=off --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off",
    "cmake_static_configure:linux": "cmake-js configure -O build --CDENABLE_SHARED=off --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDTARGET_RPATH=./build/Release -g",
    "cmake_static_configure:darwin": "cmake-js configure -O build --CDENABLE_SHARED=off --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDTARGET_RPATH=\"@executable_path;./build/Release\" -C",
    "cmake_static_debug": "run-s cmake_static_debug_configure cmake_debug_build",
    "cmake_static_debug_configure": "run-script-os",
    "cmake_static_debug_configure:win32": "cmake-js configure -O build --CDENABLE_SHARED=off --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDCFDCORE_DEBUG=on -D",
    "cmake_static_debug_configure:linux": "cmake-js configure -O build --CDENABLE_SHARED=off --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDCFDCORE_DEBUG=on --CDTARGET_RPATH=./build/Release -g -D",
    "cmake_static_debug_configure:darwin": "cmake-js configure -O build --CDENABLE_SHARED=off --CDENABLE_CAPI=off --CDENABLE_JSONAPI=off --CDCFDCORE_DEBUG=on --CDTARGET_RPATH=\"@executable_path;./build/Release\" -C -D",
    "emcmake": "run-s cmake_clean emcmake_configure cmake_build_parallel",
    "emcmake_configure": "run-script-os",
    "emcmake_configure:win32": "emcmake cmake -S . -B build -G \"MinGW Makefiles\" -DENABLE_EMSCRIPTEN=on -DENABLE_SHARED=off -DENABLE_CAPI=off -DENABLE_JSONAPI=off -DENABLE_TESTS=off -DENABLE_ELEMENTS=on -DGENERATE_WALLY=on -DENABLE_JS_WRAPPER=off -DTARGET_RPATH=./wallycore -DCMAKE_BUILD_TYPE=Release",
    "emcmake_configure:linux": "emcmake cmake -S . -B build -G \"Unix Makefiles\" -DENABLE_EMSCRIPTEN=on -DENABLE_SHARED=off -DENABLE_CAPI=off -DENABLE_JSONAPI=off -DENABLE_TESTS=off -DENABLE_ELEMENTS=on -DGENERATE_WALLY=on -DENABLE_JS_WRAPPER=off -DTARGET_RPATH=./wallycore -DCMAKE_BUILD_TYPE=Release",
    "emcmake_configure:darwin": "emcmake cmake -S . -B build -G \"Unix Makefiles\" -DENABLE_EMSCRIPTEN=on -DENABLE_SHARED=off -DENABLE_CAPI=off -DENABLE_JSONAPI=off -DENABLE_TESTS=off -DENABLE_ELEMENTS=on -DGENERATE_WALLY=on -DENABLE_JS_WRAPPER=off -DTARGET_RPATH=./wallycore -DCMAKE_BUILD_TYPE=Release",
    "cmake_build": "cmake-js build -O build",
    "cmake_debug_build": "cmake-js build -O build -D",
    "cmake_quiet_build": "cmake-js build -O build -i",
    "cmake_build_parallel": "cmake --build build --parallel 2 --config Release",
    "cmake_build_parallel_quick": "cmake --build build --parallel --config Release",
    "cmake_clean_all": "run-s cmake_clean cmake_clean_dl",
    "cmake_clean_dl": "rimraf wrap_js/dl_lib",
    "cmake_clean": "run-s cmake_clean_build cmake_clean_wally_file",
    "cmake_clean_build": "cmake-js clean -O build",
    "cmake_clean_wally_file": "del wally.js",
    "cmake_install_pkg": "run-script-os",
    "cmake_install_pkg:win32": "cmake --install build",
    "cmake_install_pkg:linux": "sudo cmake --install build",
    "cmake_install_pkg:darwin": "sudo cmake --install build",
    "test_all": "run-s ctest test",
    "ctest": "cd build && ctest -C Release",
    "ctest_debug": "cd build && ctest -C Debug",
    "ctest_quiet": "cd build && ctest --quiet -C Release",
    "test_cfdcore": "run-script-os",
    "test_cfdcore:win32": "cd build/Release && cfdcore_test.exe",
    "test_cfdcore:linux": "cd build/Release && ./cfdcore_test",
    "test_cfdcore:darwin": "cd build/Release && ./cfdcore_test",
    "test_cfd": "run-script-os",
    "test_cfd:win32": "cd build/Release && cfd_test.exe",
    "test_cfd:linux": "cd build/Release && ./cfd_test",
    "test_cfd:darwin": "cd build/Release && ./cfd_test",
    "lcov_output": "cd build && make lcov_cfdcore lcov_cfd",
    "coverage": "run-s ctest_debug lcov_output",
    "coverage_all": "run-s cmake_clean cmake_gcov_configure cmake_debug_build ctest_debug lcov_output",
    "doxygen_check": "run-script-os",
    "doxygen_check:win32": "cd doc && doxygen Doxyfile_quiet_all && rmdir /S /Q html_all_quiet",
    "doxygen_check:linux": "cd doc && doxygen Doxyfile_quiet_all && rm -rf html_all_quiet",
    "doxygen_check:darwin": "cd doc && doxygen Doxyfile_quiet_all && rm -rf html_all_quiet",
    "doxygen_dev": "cd doc && doxygen Doxyfile_quiet_all",
    "lint_all": "run-s lint_check eslint_check",
    "lint_check": "run-script-os",
    "lint_check:win32": "cd tools && lint_all_quiet.bat",
    "lint_check:linux": "cd tools && ./lint_quiet.sh",
    "lint_check:darwin": "cd tools && ./lint_quiet.sh",
    "eslint_check": "eslint --ext .js,.ts *.ts *.js wrap_js/",
    "git_subm_update": "git submodule -q foreach git fetch -q && git submodule -q update -i",
    "test_example": "run-s test_quiet example elements_example ts_example util_example",
    "check_local": "run-p doxygen_dev format_cpp_all format_js_all",
    "check": "run-s doxygen_check lint_all ctest_quiet test_quiet example elements_example ts_example util_example",
    "check_all": "run-s cmake_clean git_subm_update cmake_quiet doxygen_check ctest_quiet test_quiet example elements_example ts_example util_example lint_all",
    "convert_json": "ts-node ./tools/generate_json_map_class.ts",
    "convert_json_debug": "ts-node ./tools/generate_json_map_class.ts mode=debug"
  },
  "dependencies": {
    "@types/node": "^16.9.2",
    "bindings": "^1.5.0",
    "cmake-js": "^6.2.1",
    "del-cli": "^4.0.1",
    "got": "^12.5.3",
    "node-addon-api": "^4.1.0",
    "npm-run-all": "^4.1.5",
    "prebuild-install": "^7.0.1",
    "run-script-os": "^1.1.6",
    "unzipper": "^0.10.11"
  },
  "devDependencies": {
    "@types/jest": "^27.0.1",
    "@typescript-eslint/eslint-plugin": "^4.31.0",
    "@typescript-eslint/parser": "^4.31.0",
    "eslint": "^7.32.0",
    "eslint-config-google": "^0.14.0",
    "jest": "^27.1.1",
    "prebuild": "^11.0.3",
    "ts-jest": "^27.0.5",
    "ts-morph": "^12.0.0",
    "ts-node": "^10.2.1",
    "typescript": "^4.4.3",
    "wallet-for-testing-js": "github:cryptogarageinc/wallet-for-testing-js#semver:^0.1.11"
  }
}

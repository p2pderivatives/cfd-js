{
  "namespace": ["cfd","js","api","json"],
  "functionName": "GetSighash",
  "comment": "Get signature hash.",
  "request": {
    ":class": "GetSighashRequest",
    ":class:comment": "Request for get signature hash.",
    "tx": "",
    "tx:require": "require",
    "tx:comment": "transaction hex",
    "isElements": false,
    "isElements:require": "optional",
    "isElements:comment": "elements transaction flag.",
    "txin:require": "require",
    "txin:comment": "txin data",
    "txin": {
      ":class": "GetSighashTxIn",
      ":class:comment": "txin data",
      "txid": "",
      "txid:require": "require",
      "txid:comment": "utxo txid",
      "vout": 0,
      "vout:type": "uint32_t",
      "vout:require": "require",
      "vout:comment": "utxo vout",
      "keyData:require": "require",
      "keyData:comment": "key data",
      "keyData": {
        ":class": "HashKeyData",
        ":class:comment": "Hash data based key",
        "hex": "",
        "hex:require": "require",
        "hex:comment": "hex bytes",
        "type": "pubkey",
        "type:require": "require",
        "type:comment": "parameter type. redeem_script is containd witness script & tapscript.",
        "type:hint": "pubkey, redeem_script"
      },
      "hashType": "taproot",
      "hashType:require": "require",
      "hashType:comment": "hash type",
      "hashType:hint": "taproot, p2wpkh, p2wsh, p2pkh, p2sh, p2sh-p2wpkh, p2sh-p2wsh",
      "sighashType": "all",
      "sighashType:require": "optional",
      "sighashType:comment": "signature hash type.",
      "sighashType:hint": "default(for taproot), all, none, single",
      "sighashAnyoneCanPay": false,
      "sighashAnyoneCanPay:require": "optional",
      "sighashAnyoneCanPay:comment": "sighashType anyone can pay flag.",
      "annex": "",
      "annex:require": "optional",
      "annex:comment": "taproot annex bytes.",
      "codeSeparatorPosition": -1,
      "codeSeparatorPosition:require": "optional",
      "codeSeparatorPosition:comment": "(for tapscript) OP_CODESEPARATOR position."
    },
    "utxos:require": "require",
    "utxos:comment": "utxo list.",
    "utxos": [{
      ":class": "UtxoObject",
      ":class:comment": "UTXO data.",
      "txid": "",
      "txid:require": "require",
      "txid:comment": "utxo txid",
      "vout": 0,
      "vout:type": "uint32_t",
      "vout:require": "require",
      "vout:comment": "utxo vout",
      "address": "",
      "address:require": "optional",
      "address:comment": "txout address. Set either the address or the locking script or the descriptor.",
      "lockingScript": "",
      "lockingScript:require": "optional",
      "lockingScript:comment": "txout locking script. Set either the address or the locking script or the descriptor.",
      "descriptor": "",
      "descriptor:require": "optional",
      "descriptor:hint": "output descriptor. Set either the address or the locking script or the descriptor.",
      "amount": 0,
      "amount:type": "int64_t",
      "amount:require": "optional",
      "amount:comment": "satoshi amount",
      "amount:hint": "need either amount or confidentialValueCommitment",
      "confidentialValueCommitment": "",
      "confidentialValueCommitment:require": "optional",
      "confidentialValueCommitment:comment": "value commitment",
      "confidentialValueCommitment:hint": "need either amount or confidentialValueCommitment",
      "asset": "",
      "asset:require": "optional",
      "asset:comment": "asset hex.",
      "confidentialAssetCommitment": "",
      "confidentialAssetCommitment:require": "optional",
      "confidentialAssetCommitment:comment": "asset commitment",
      "blindFactor": "",
      "blindFactor:require": "optional",
      "blindFactor:comment": "amount blinder.",
      "assetBlindFactor": "",
      "assetBlindFactor:require": "optional",
      "assetBlindFactor:comment": "asset blinder.",
      "scriptSigTemplate": "",
      "scriptSigTemplate:require": "optional",
      "scriptSigTemplate:comment": "ScriptSig template is for scriptHash calculation fee."
    }]
  },
  "response": {
    ":class": "CreateSignatureHashResponse",
    ":class:comment": "Response of create signature hash.",
    "sighash": "",
    "sighash:require": "require",
    "sighash:comment": "sighash"
  }
}
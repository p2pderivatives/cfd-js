// Copyright 2020 CryptoGarage
/**
 * @file cfd_js_api_json_autogen.h
 *
 * @brief JSON mapping file. (auto generate)
 */
#ifndef CFD_JS_SRC_AUTOGEN_CFD_JS_API_JSON_AUTOGEN_H_
#define CFD_JS_SRC_AUTOGEN_CFD_JS_API_JSON_AUTOGEN_H_

#include <set>
#include <string>
#include <vector>

#include "cfdcore/cfdcore_json_mapping_base.h"

#include "cfdjs/cfdjs_struct.h"

namespace cfd {
namespace js {
namespace api {
namespace json {

using cfd::core::JsonClassBase;
using cfd::core::JsonObjectVector;
using cfd::core::JsonValueVector;
using cfd::core::JsonVector;
// clang-format off
// @formatter:off

// ------------------------------------------------------------------------
// DecodeLockingScript
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodeLockingScript) class
 */
class DecodeLockingScript
  : public cfd::core::JsonClassBase<DecodeLockingScript> {
 public:
  DecodeLockingScript() {
    CollectFieldName();
  }
  virtual ~DecodeLockingScript() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of asm
   * @return asm
   */
  std::string GetAsm() const {
    return asm__;
  }
  /**
   * @brief Set to asm
   * @param[in] asm_    setting value.
   */
  void SetAsm(  // line separate
    const std::string& asm_) {  // NOLINT
    this->asm__ = asm_;
  }
  /**
   * @brief Get data type of asm
   * @return Data type of asm
   */
  static std::string GetAsmFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asm field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAsmString(  // line separate
      const DecodeLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asm__);
  }
  /**
   * @brief Set json object to asm field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAsmString(  // line separate
      DecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asm__, json_value);
  }

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const DecodeLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      DecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of reqSigs
   * @return reqSigs
   */
  int GetReqSigs() const {
    return req_sigs_;
  }
  /**
   * @brief Set to reqSigs
   * @param[in] req_sigs    setting value.
   */
  void SetReqSigs(  // line separate
    const int& req_sigs) {  // NOLINT
    this->req_sigs_ = req_sigs;
  }
  /**
   * @brief Get data type of reqSigs
   * @return Data type of reqSigs
   */
  static std::string GetReqSigsFieldType() {
    return "int";
  }
  /**
   * @brief Get json string of reqSigs field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetReqSigsString(  // line separate
      const DecodeLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.req_sigs_);
  }
  /**
   * @brief Set json object to reqSigs field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetReqSigsString(  // line separate
      DecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.req_sigs_, json_value);
  }

  /**
   * @brief Get of type
   * @return type
   */
  std::string GetType() const {
    return type_;
  }
  /**
   * @brief Set to type
   * @param[in] type    setting value.
   */
  void SetType(  // line separate
    const std::string& type) {  // NOLINT
    this->type_ = type;
  }
  /**
   * @brief Get data type of type
   * @return Data type of type
   */
  static std::string GetTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of type field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTypeString(  // line separate
      const DecodeLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.type_);
  }
  /**
   * @brief Set json object to type field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTypeString(  // line separate
      DecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.type_, json_value);
  }

  /**
   * @brief Get of addresses.
   * @return addresses
   */
  JsonValueVector<std::string>& GetAddresses() {  // NOLINT
    return addresses_;
  }
  /**
   * @brief Set to addresses.
   * @param[in] addresses    setting value.
   */
  void SetAddresses(  // line separate
      const JsonValueVector<std::string>& addresses) {  // NOLINT
    this->addresses_ = addresses;
  }
  /**
   * @brief Get data type of addresses.
   * @return Data type of addresses.
   */
  static std::string GetAddressesFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of addresses field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetAddressesString(  // line separate
      const DecodeLockingScript& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.addresses_.Serialize();
  }
  /**
   * @brief Set json object to addresses field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetAddressesString(  // line separate
      DecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    obj.addresses_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodeLockingScriptStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodeLockingScriptStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodeLockingScriptMapTable =
    cfd::core::JsonTableMap<DecodeLockingScript>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodeLockingScriptMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodeLockingScriptMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(asm) value
   */
  std::string asm__ = "";
  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(reqSigs) value
   */
  int req_sigs_ = 0;
  /**
   * @brief JsonAPI(type) value
   */
  std::string type_ = "";
  /**
   * @brief JsonAPI(addresses) value
   */
  JsonValueVector<std::string> addresses_;  // NOLINT
};

// ------------------------------------------------------------------------
// DecodeUnlockingScript
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodeUnlockingScript) class
 */
class DecodeUnlockingScript
  : public cfd::core::JsonClassBase<DecodeUnlockingScript> {
 public:
  DecodeUnlockingScript() {
    CollectFieldName();
  }
  virtual ~DecodeUnlockingScript() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of asm
   * @return asm
   */
  std::string GetAsm() const {
    return asm__;
  }
  /**
   * @brief Set to asm
   * @param[in] asm_    setting value.
   */
  void SetAsm(  // line separate
    const std::string& asm_) {  // NOLINT
    this->asm__ = asm_;
  }
  /**
   * @brief Get data type of asm
   * @return Data type of asm
   */
  static std::string GetAsmFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asm field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAsmString(  // line separate
      const DecodeUnlockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asm__);
  }
  /**
   * @brief Set json object to asm field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAsmString(  // line separate
      DecodeUnlockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asm__, json_value);
  }

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const DecodeUnlockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      DecodeUnlockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodeUnlockingScriptStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodeUnlockingScriptStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodeUnlockingScriptMapTable =
    cfd::core::JsonTableMap<DecodeUnlockingScript>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodeUnlockingScriptMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodeUnlockingScriptMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(asm) value
   */
  std::string asm__ = "";
  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
};

// ------------------------------------------------------------------------
// DecodePsbtLockingScript
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodePsbtLockingScript) class
 */
class DecodePsbtLockingScript
  : public cfd::core::JsonClassBase<DecodePsbtLockingScript> {
 public:
  DecodePsbtLockingScript() {
    CollectFieldName();
  }
  virtual ~DecodePsbtLockingScript() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of asm
   * @return asm
   */
  std::string GetAsm() const {
    return asm__;
  }
  /**
   * @brief Set to asm
   * @param[in] asm_    setting value.
   */
  void SetAsm(  // line separate
    const std::string& asm_) {  // NOLINT
    this->asm__ = asm_;
  }
  /**
   * @brief Get data type of asm
   * @return Data type of asm
   */
  static std::string GetAsmFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asm field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAsmString(  // line separate
      const DecodePsbtLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asm__);
  }
  /**
   * @brief Set json object to asm field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAsmString(  // line separate
      DecodePsbtLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asm__, json_value);
  }

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const DecodePsbtLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      DecodePsbtLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of type
   * @return type
   */
  std::string GetType() const {
    return type_;
  }
  /**
   * @brief Set to type
   * @param[in] type    setting value.
   */
  void SetType(  // line separate
    const std::string& type) {  // NOLINT
    this->type_ = type;
  }
  /**
   * @brief Get data type of type
   * @return Data type of type
   */
  static std::string GetTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of type field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTypeString(  // line separate
      const DecodePsbtLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.type_);
  }
  /**
   * @brief Set json object to type field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTypeString(  // line separate
      DecodePsbtLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.type_, json_value);
  }

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const DecodePsbtLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      DecodePsbtLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodePsbtLockingScriptStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodePsbtLockingScriptStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodePsbtLockingScriptMapTable =
    cfd::core::JsonTableMap<DecodePsbtLockingScript>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodePsbtLockingScriptMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodePsbtLockingScriptMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(asm) value
   */
  std::string asm__ = "";
  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(type) value
   */
  std::string type_ = "";
  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
};

// ------------------------------------------------------------------------
// DecodeRawTransactionTxIn
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodeRawTransactionTxIn) class
 */
class DecodeRawTransactionTxIn
  : public cfd::core::JsonClassBase<DecodeRawTransactionTxIn> {
 public:
  DecodeRawTransactionTxIn() {
    CollectFieldName();
  }
  virtual ~DecodeRawTransactionTxIn() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of coinbase
   * @return coinbase
   */
  std::string GetCoinbase() const {
    return coinbase_;
  }
  /**
   * @brief Set to coinbase
   * @param[in] coinbase    setting value.
   */
  void SetCoinbase(  // line separate
    const std::string& coinbase) {  // NOLINT
    this->coinbase_ = coinbase;
  }
  /**
   * @brief Get data type of coinbase
   * @return Data type of coinbase
   */
  static std::string GetCoinbaseFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of coinbase field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetCoinbaseString(  // line separate
      const DecodeRawTransactionTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.coinbase_);
  }
  /**
   * @brief Set json object to coinbase field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetCoinbaseString(  // line separate
      DecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.coinbase_, json_value);
  }

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const DecodeRawTransactionTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      DecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const DecodeRawTransactionTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      DecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of scriptSig.
   * @return scriptSig
   */
  DecodeUnlockingScript& GetScriptSig() {  // NOLINT
    return script_sig_;
  }
  /**
   * @brief Set to scriptSig.
   * @param[in] script_sig    setting value.
   */
  void SetScriptSig(  // line separate
      const DecodeUnlockingScript& script_sig) {  // NOLINT
    this->script_sig_ = script_sig;
  }
  /**
   * @brief Get data type of scriptSig.
   * @return Data type of scriptSig.
   */
  static std::string GetScriptSigFieldType() {
    return "DecodeUnlockingScript";  // NOLINT
  }
  /**
   * @brief Get json string of scriptSig field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetScriptSigString(  // line separate
      const DecodeRawTransactionTxIn& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.script_sig_.Serialize();
  }
  /**
   * @brief Set json object to scriptSig field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetScriptSigString(  // line separate
      DecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    obj.script_sig_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of txinwitness.
   * @return txinwitness
   */
  JsonValueVector<std::string>& GetTxinwitness() {  // NOLINT
    return txinwitness_;
  }
  /**
   * @brief Set to txinwitness.
   * @param[in] txinwitness    setting value.
   */
  void SetTxinwitness(  // line separate
      const JsonValueVector<std::string>& txinwitness) {  // NOLINT
    this->txinwitness_ = txinwitness;
  }
  /**
   * @brief Get data type of txinwitness.
   * @return Data type of txinwitness.
   */
  static std::string GetTxinwitnessFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of txinwitness field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinwitnessString(  // line separate
      const DecodeRawTransactionTxIn& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txinwitness_.Serialize();
  }
  /**
   * @brief Set json object to txinwitness field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinwitnessString(  // line separate
      DecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txinwitness_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of sequence
   * @return sequence
   */
  uint32_t GetSequence() const {
    return sequence_;
  }
  /**
   * @brief Set to sequence
   * @param[in] sequence    setting value.
   */
  void SetSequence(  // line separate
    const uint32_t& sequence) {  // NOLINT
    this->sequence_ = sequence;
  }
  /**
   * @brief Get data type of sequence
   * @return Data type of sequence
   */
  static std::string GetSequenceFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of sequence field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSequenceString(  // line separate
      const DecodeRawTransactionTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sequence_);
  }
  /**
   * @brief Set json object to sequence field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSequenceString(  // line separate
      DecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sequence_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodeRawTransactionTxInStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodeRawTransactionTxInStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodeRawTransactionTxInMapTable =
    cfd::core::JsonTableMap<DecodeRawTransactionTxIn>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodeRawTransactionTxInMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodeRawTransactionTxInMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(coinbase) value
   */
  std::string coinbase_ = "";
  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(scriptSig) value
   */
  DecodeUnlockingScript script_sig_;  // NOLINT
  /**
   * @brief JsonAPI(txinwitness) value
   */
  JsonValueVector<std::string> txinwitness_;  // NOLINT
  /**
   * @brief JsonAPI(sequence) value
   */
  uint32_t sequence_ = 0;
};

// ------------------------------------------------------------------------
// DecodeRawTransactionTxOut
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodeRawTransactionTxOut) class
 */
class DecodeRawTransactionTxOut
  : public cfd::core::JsonClassBase<DecodeRawTransactionTxOut> {
 public:
  DecodeRawTransactionTxOut() {
    CollectFieldName();
  }
  virtual ~DecodeRawTransactionTxOut() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of value
   * @return value
   */
  int64_t GetValue() const {
    return value_;
  }
  /**
   * @brief Set to value
   * @param[in] value    setting value.
   */
  void SetValue(  // line separate
    const int64_t& value) {  // NOLINT
    this->value_ = value;
  }
  /**
   * @brief Get data type of value
   * @return Data type of value
   */
  static std::string GetValueFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of value field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetValueString(  // line separate
      const DecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.value_);
  }
  /**
   * @brief Set json object to value field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetValueString(  // line separate
      DecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.value_, json_value);
  }

  /**
   * @brief Get of n
   * @return n
   */
  uint32_t GetN() const {
    return n_;
  }
  /**
   * @brief Set to n
   * @param[in] n    setting value.
   */
  void SetN(  // line separate
    const uint32_t& n) {  // NOLINT
    this->n_ = n;
  }
  /**
   * @brief Get data type of n
   * @return Data type of n
   */
  static std::string GetNFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of n field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNString(  // line separate
      const DecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.n_);
  }
  /**
   * @brief Set json object to n field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNString(  // line separate
      DecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.n_, json_value);
  }

  /**
   * @brief Get of scriptPubKey.
   * @return scriptPubKey
   */
  DecodeLockingScript& GetScriptPubKey() {  // NOLINT
    return script_pub_key_;
  }
  /**
   * @brief Set to scriptPubKey.
   * @param[in] script_pub_key    setting value.
   */
  void SetScriptPubKey(  // line separate
      const DecodeLockingScript& script_pub_key) {  // NOLINT
    this->script_pub_key_ = script_pub_key;
  }
  /**
   * @brief Get data type of scriptPubKey.
   * @return Data type of scriptPubKey.
   */
  static std::string GetScriptPubKeyFieldType() {
    return "DecodeLockingScript";  // NOLINT
  }
  /**
   * @brief Get json string of scriptPubKey field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetScriptPubKeyString(  // line separate
      const DecodeRawTransactionTxOut& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.script_pub_key_.Serialize();
  }
  /**
   * @brief Set json object to scriptPubKey field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetScriptPubKeyString(  // line separate
      DecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    obj.script_pub_key_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodeRawTransactionTxOutStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodeRawTransactionTxOutStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodeRawTransactionTxOutMapTable =
    cfd::core::JsonTableMap<DecodeRawTransactionTxOut>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodeRawTransactionTxOutMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodeRawTransactionTxOutMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(value) value
   */
  int64_t value_ = 0;
  /**
   * @brief JsonAPI(n) value
   */
  uint32_t n_ = 0;
  /**
   * @brief JsonAPI(scriptPubKey) value
   */
  DecodeLockingScript script_pub_key_;  // NOLINT
};

// ------------------------------------------------------------------------
// PsbtBip32PubkeyInput
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtBip32PubkeyInput) class
 */
class PsbtBip32PubkeyInput
  : public cfd::core::JsonClassBase<PsbtBip32PubkeyInput> {
 public:
  PsbtBip32PubkeyInput() {
    CollectFieldName();
  }
  virtual ~PsbtBip32PubkeyInput() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of descriptor
   * @return descriptor
   */
  std::string GetDescriptor() const {
    return descriptor_;
  }
  /**
   * @brief Set to descriptor
   * @param[in] descriptor    setting value.
   */
  void SetDescriptor(  // line separate
    const std::string& descriptor) {  // NOLINT
    this->descriptor_ = descriptor;
  }
  /**
   * @brief Get data type of descriptor
   * @return Data type of descriptor
   */
  static std::string GetDescriptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of descriptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDescriptorString(  // line separate
      const PsbtBip32PubkeyInput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.descriptor_);
  }
  /**
   * @brief Set json object to descriptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDescriptorString(  // line separate
      PsbtBip32PubkeyInput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.descriptor_, json_value);
  }

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const PsbtBip32PubkeyInput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      PsbtBip32PubkeyInput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Get of master_fingerprint
   * @return master_fingerprint
   */
  std::string GetMaster_fingerprint() const {
    return master_fingerprint_;
  }
  /**
   * @brief Set to master_fingerprint
   * @param[in] master_fingerprint    setting value.
   */
  void SetMaster_fingerprint(  // line separate
    const std::string& master_fingerprint) {  // NOLINT
    this->master_fingerprint_ = master_fingerprint;
  }
  /**
   * @brief Get data type of master_fingerprint
   * @return Data type of master_fingerprint
   */
  static std::string GetMaster_fingerprintFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of master_fingerprint field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMaster_fingerprintString(  // line separate
      const PsbtBip32PubkeyInput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.master_fingerprint_);
  }
  /**
   * @brief Set json object to master_fingerprint field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMaster_fingerprintString(  // line separate
      PsbtBip32PubkeyInput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.master_fingerprint_, json_value);
  }

  /**
   * @brief Get of path
   * @return path
   */
  std::string GetPath() const {
    return path_;
  }
  /**
   * @brief Set to path
   * @param[in] path    setting value.
   */
  void SetPath(  // line separate
    const std::string& path) {  // NOLINT
    this->path_ = path;
  }
  /**
   * @brief Get data type of path
   * @return Data type of path
   */
  static std::string GetPathFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of path field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPathString(  // line separate
      const PsbtBip32PubkeyInput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.path_);
  }
  /**
   * @brief Set json object to path field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPathString(  // line separate
      PsbtBip32PubkeyInput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.path_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtBip32PubkeyInputStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtBip32PubkeyInputStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtBip32PubkeyInputMapTable =
    cfd::core::JsonTableMap<PsbtBip32PubkeyInput>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtBip32PubkeyInputMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtBip32PubkeyInputMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(descriptor) value
   */
  std::string descriptor_ = "";
  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
  /**
   * @brief JsonAPI(master_fingerprint) value
   */
  std::string master_fingerprint_ = "";
  /**
   * @brief JsonAPI(path) value
   */
  std::string path_ = "";
};

// ------------------------------------------------------------------------
// PsbtMapData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtMapData) class
 */
class PsbtMapData
  : public cfd::core::JsonClassBase<PsbtMapData> {
 public:
  PsbtMapData() {
    CollectFieldName();
  }
  virtual ~PsbtMapData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of key
   * @return key
   */
  std::string GetKey() const {
    return key_;
  }
  /**
   * @brief Set to key
   * @param[in] key    setting value.
   */
  void SetKey(  // line separate
    const std::string& key) {  // NOLINT
    this->key_ = key;
  }
  /**
   * @brief Get data type of key
   * @return Data type of key
   */
  static std::string GetKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of key field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetKeyString(  // line separate
      const PsbtMapData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.key_);
  }
  /**
   * @brief Set json object to key field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetKeyString(  // line separate
      PsbtMapData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.key_, json_value);
  }

  /**
   * @brief Get of value
   * @return value
   */
  std::string GetValue() const {
    return value_;
  }
  /**
   * @brief Set to value
   * @param[in] value    setting value.
   */
  void SetValue(  // line separate
    const std::string& value) {  // NOLINT
    this->value_ = value;
  }
  /**
   * @brief Get data type of value
   * @return Data type of value
   */
  static std::string GetValueFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of value field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetValueString(  // line separate
      const PsbtMapData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.value_);
  }
  /**
   * @brief Set json object to value field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetValueString(  // line separate
      PsbtMapData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.value_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtMapDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtMapDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtMapDataMapTable =
    cfd::core::JsonTableMap<PsbtMapData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtMapDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtMapDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(key) value
   */
  std::string key_ = "";
  /**
   * @brief JsonAPI(value) value
   */
  std::string value_ = "";
};

// ------------------------------------------------------------------------
// PsbtSignatureData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtSignatureData) class
 */
class PsbtSignatureData
  : public cfd::core::JsonClassBase<PsbtSignatureData> {
 public:
  PsbtSignatureData() {
    CollectFieldName();
  }
  virtual ~PsbtSignatureData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const PsbtSignatureData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      PsbtSignatureData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Get of signature
   * @return signature
   */
  std::string GetSignature() const {
    return signature_;
  }
  /**
   * @brief Set to signature
   * @param[in] signature    setting value.
   */
  void SetSignature(  // line separate
    const std::string& signature) {  // NOLINT
    this->signature_ = signature;
  }
  /**
   * @brief Get data type of signature
   * @return Data type of signature
   */
  static std::string GetSignatureFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of signature field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSignatureString(  // line separate
      const PsbtSignatureData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.signature_);
  }
  /**
   * @brief Set json object to signature field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSignatureString(  // line separate
      PsbtSignatureData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.signature_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtSignatureDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtSignatureDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtSignatureDataMapTable =
    cfd::core::JsonTableMap<PsbtSignatureData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtSignatureDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtSignatureDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
  /**
   * @brief JsonAPI(signature) value
   */
  std::string signature_ = "";
};

// ------------------------------------------------------------------------
// TxOutRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (TxOutRequest) class
 */
class TxOutRequest
  : public cfd::core::JsonClassBase<TxOutRequest> {
 public:
  TxOutRequest() {
    CollectFieldName();
  }
  virtual ~TxOutRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const TxOutRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      TxOutRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const TxOutRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      TxOutRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of directLockingScript
   * @return directLockingScript
   */
  std::string GetDirectLockingScript() const {
    return direct_locking_script_;
  }
  /**
   * @brief Set to directLockingScript
   * @param[in] direct_locking_script    setting value.
   */
  void SetDirectLockingScript(  // line separate
    const std::string& direct_locking_script) {  // NOLINT
    this->direct_locking_script_ = direct_locking_script;
  }
  /**
   * @brief Get data type of directLockingScript
   * @return Data type of directLockingScript
   */
  static std::string GetDirectLockingScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of directLockingScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDirectLockingScriptString(  // line separate
      const TxOutRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.direct_locking_script_);
  }
  /**
   * @brief Set json object to directLockingScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDirectLockingScriptString(  // line separate
      TxOutRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.direct_locking_script_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const TxOutRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  TxOutRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using TxOutRequestMapTable =
    cfd::core::JsonTableMap<TxOutRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const TxOutRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static TxOutRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(directLockingScript) value
   */
  std::string direct_locking_script_ = "";
};

// ------------------------------------------------------------------------
// DecodePsbtUtxo
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodePsbtUtxo) class
 */
class DecodePsbtUtxo
  : public cfd::core::JsonClassBase<DecodePsbtUtxo> {
 public:
  DecodePsbtUtxo() {
    CollectFieldName();
  }
  virtual ~DecodePsbtUtxo() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const DecodePsbtUtxo& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      DecodePsbtUtxo& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of scriptPubKey.
   * @return scriptPubKey
   */
  DecodePsbtLockingScript& GetScriptPubKey() {  // NOLINT
    return script_pub_key_;
  }
  /**
   * @brief Set to scriptPubKey.
   * @param[in] script_pub_key    setting value.
   */
  void SetScriptPubKey(  // line separate
      const DecodePsbtLockingScript& script_pub_key) {  // NOLINT
    this->script_pub_key_ = script_pub_key;
  }
  /**
   * @brief Get data type of scriptPubKey.
   * @return Data type of scriptPubKey.
   */
  static std::string GetScriptPubKeyFieldType() {
    return "DecodePsbtLockingScript";  // NOLINT
  }
  /**
   * @brief Get json string of scriptPubKey field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetScriptPubKeyString(  // line separate
      const DecodePsbtUtxo& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.script_pub_key_.Serialize();
  }
  /**
   * @brief Set json object to scriptPubKey field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetScriptPubKeyString(  // line separate
      DecodePsbtUtxo& obj,  // NOLINT
      const UniValue& json_value) {
    obj.script_pub_key_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodePsbtUtxoStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodePsbtUtxoStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodePsbtUtxoMapTable =
    cfd::core::JsonTableMap<DecodePsbtUtxo>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodePsbtUtxoMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodePsbtUtxoMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(scriptPubKey) value
   */
  DecodePsbtLockingScript script_pub_key_;  // NOLINT
};

// ------------------------------------------------------------------------
// DecodeRawTransactionResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodeRawTransactionResponse) class
 */
class DecodeRawTransactionResponse
  : public cfd::core::JsonClassBase<DecodeRawTransactionResponse> {
 public:
  DecodeRawTransactionResponse() {
    CollectFieldName();
  }
  virtual ~DecodeRawTransactionResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const DecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      DecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of hash
   * @return hash
   */
  std::string GetHash() const {
    return hash_;
  }
  /**
   * @brief Set to hash
   * @param[in] hash    setting value.
   */
  void SetHash(  // line separate
    const std::string& hash) {  // NOLINT
    this->hash_ = hash;
  }
  /**
   * @brief Get data type of hash
   * @return Data type of hash
   */
  static std::string GetHashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashString(  // line separate
      const DecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_);
  }
  /**
   * @brief Set json object to hash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashString(  // line separate
      DecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_, json_value);
  }

  /**
   * @brief Get of version
   * @return version
   */
  uint32_t GetVersion() const {
    return version_;
  }
  /**
   * @brief Set to version
   * @param[in] version    setting value.
   */
  void SetVersion(  // line separate
    const uint32_t& version) {  // NOLINT
    this->version_ = version;
  }
  /**
   * @brief Get data type of version
   * @return Data type of version
   */
  static std::string GetVersionFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of version field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVersionString(  // line separate
      const DecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.version_);
  }
  /**
   * @brief Set json object to version field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVersionString(  // line separate
      DecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.version_, json_value);
  }

  /**
   * @brief Get of size
   * @return size
   */
  uint32_t GetSize() const {
    return size_;
  }
  /**
   * @brief Set to size
   * @param[in] size    setting value.
   */
  void SetSize(  // line separate
    const uint32_t& size) {  // NOLINT
    this->size_ = size;
  }
  /**
   * @brief Get data type of size
   * @return Data type of size
   */
  static std::string GetSizeFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of size field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSizeString(  // line separate
      const DecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.size_);
  }
  /**
   * @brief Set json object to size field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSizeString(  // line separate
      DecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.size_, json_value);
  }

  /**
   * @brief Get of vsize
   * @return vsize
   */
  uint32_t GetVsize() const {
    return vsize_;
  }
  /**
   * @brief Set to vsize
   * @param[in] vsize    setting value.
   */
  void SetVsize(  // line separate
    const uint32_t& vsize) {  // NOLINT
    this->vsize_ = vsize;
  }
  /**
   * @brief Get data type of vsize
   * @return Data type of vsize
   */
  static std::string GetVsizeFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vsize field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVsizeString(  // line separate
      const DecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vsize_);
  }
  /**
   * @brief Set json object to vsize field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVsizeString(  // line separate
      DecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vsize_, json_value);
  }

  /**
   * @brief Get of weight
   * @return weight
   */
  uint32_t GetWeight() const {
    return weight_;
  }
  /**
   * @brief Set to weight
   * @param[in] weight    setting value.
   */
  void SetWeight(  // line separate
    const uint32_t& weight) {  // NOLINT
    this->weight_ = weight;
  }
  /**
   * @brief Get data type of weight
   * @return Data type of weight
   */
  static std::string GetWeightFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of weight field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetWeightString(  // line separate
      const DecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.weight_);
  }
  /**
   * @brief Set json object to weight field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetWeightString(  // line separate
      DecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.weight_, json_value);
  }

  /**
   * @brief Get of locktime
   * @return locktime
   */
  uint32_t GetLocktime() const {
    return locktime_;
  }
  /**
   * @brief Set to locktime
   * @param[in] locktime    setting value.
   */
  void SetLocktime(  // line separate
    const uint32_t& locktime) {  // NOLINT
    this->locktime_ = locktime;
  }
  /**
   * @brief Get data type of locktime
   * @return Data type of locktime
   */
  static std::string GetLocktimeFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of locktime field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLocktimeString(  // line separate
      const DecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locktime_);
  }
  /**
   * @brief Set json object to locktime field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLocktimeString(  // line separate
      DecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locktime_, json_value);
  }

  /**
   * @brief Get of vin.
   * @return vin
   */
  JsonObjectVector<DecodeRawTransactionTxIn, DecodeRawTransactionTxInStruct>& GetVin() {  // NOLINT
    return vin_;
  }
  /**
   * @brief Set to vin.
   * @param[in] vin    setting value.
   */
  void SetVin(  // line separate
      const JsonObjectVector<DecodeRawTransactionTxIn, DecodeRawTransactionTxInStruct>& vin) {  // NOLINT
    this->vin_ = vin;
  }
  /**
   * @brief Get data type of vin.
   * @return Data type of vin.
   */
  static std::string GetVinFieldType() {
    return "JsonObjectVector<DecodeRawTransactionTxIn, DecodeRawTransactionTxInStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of vin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetVinString(  // line separate
      const DecodeRawTransactionResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.vin_.Serialize();
  }
  /**
   * @brief Set json object to vin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetVinString(  // line separate
      DecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.vin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of vout.
   * @return vout
   */
  JsonObjectVector<DecodeRawTransactionTxOut, DecodeRawTransactionTxOutStruct>& GetVout() {  // NOLINT
    return vout_;
  }
  /**
   * @brief Set to vout.
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
      const JsonObjectVector<DecodeRawTransactionTxOut, DecodeRawTransactionTxOutStruct>& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout.
   * @return Data type of vout.
   */
  static std::string GetVoutFieldType() {
    return "JsonObjectVector<DecodeRawTransactionTxOut, DecodeRawTransactionTxOutStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetVoutString(  // line separate
      const DecodeRawTransactionResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.vout_.Serialize();
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetVoutString(  // line separate
      DecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.vout_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodeRawTransactionResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodeRawTransactionResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodeRawTransactionResponseMapTable =
    cfd::core::JsonTableMap<DecodeRawTransactionResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodeRawTransactionResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodeRawTransactionResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(hash) value
   */
  std::string hash_ = "";
  /**
   * @brief JsonAPI(version) value
   */
  uint32_t version_ = 0;
  /**
   * @brief JsonAPI(size) value
   */
  uint32_t size_ = 0;
  /**
   * @brief JsonAPI(vsize) value
   */
  uint32_t vsize_ = 0;
  /**
   * @brief JsonAPI(weight) value
   */
  uint32_t weight_ = 0;
  /**
   * @brief JsonAPI(locktime) value
   */
  uint32_t locktime_ = 0;
  /**
   * @brief JsonAPI(vin) value
   */
  JsonObjectVector<DecodeRawTransactionTxIn, DecodeRawTransactionTxInStruct> vin_;  // NOLINT
  /**
   * @brief JsonAPI(vout) value
   */
  JsonObjectVector<DecodeRawTransactionTxOut, DecodeRawTransactionTxOutStruct> vout_;  // NOLINT
};

// ------------------------------------------------------------------------
// DescriptorKeyJson
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DescriptorKeyJson) class
 */
class DescriptorKeyJson
  : public cfd::core::JsonClassBase<DescriptorKeyJson> {
 public:
  DescriptorKeyJson() {
    CollectFieldName();
  }
  virtual ~DescriptorKeyJson() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of keyType
   * @return keyType
   */
  std::string GetKeyType() const {
    return key_type_;
  }
  /**
   * @brief Set to keyType
   * @param[in] key_type    setting value.
   */
  void SetKeyType(  // line separate
    const std::string& key_type) {  // NOLINT
    this->key_type_ = key_type;
  }
  /**
   * @brief Get data type of keyType
   * @return Data type of keyType
   */
  static std::string GetKeyTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of keyType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetKeyTypeString(  // line separate
      const DescriptorKeyJson& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.key_type_);
  }
  /**
   * @brief Set json object to keyType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetKeyTypeString(  // line separate
      DescriptorKeyJson& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.key_type_, json_value);
  }

  /**
   * @brief Get of key
   * @return key
   */
  std::string GetKey() const {
    return key_;
  }
  /**
   * @brief Set to key
   * @param[in] key    setting value.
   */
  void SetKey(  // line separate
    const std::string& key) {  // NOLINT
    this->key_ = key;
  }
  /**
   * @brief Get data type of key
   * @return Data type of key
   */
  static std::string GetKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of key field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetKeyString(  // line separate
      const DescriptorKeyJson& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.key_);
  }
  /**
   * @brief Set json object to key field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetKeyString(  // line separate
      DescriptorKeyJson& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.key_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DescriptorKeyJsonStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DescriptorKeyJsonStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DescriptorKeyJsonMapTable =
    cfd::core::JsonTableMap<DescriptorKeyJson>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DescriptorKeyJsonMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DescriptorKeyJsonMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(keyType) value
   */
  std::string key_type_ = "";
  /**
   * @brief JsonAPI(key) value
   */
  std::string key_ = "";
};

// ------------------------------------------------------------------------
// ElementsAddPeginWitness
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsAddPeginWitness) class
 */
class ElementsAddPeginWitness
  : public cfd::core::JsonClassBase<ElementsAddPeginWitness> {
 public:
  ElementsAddPeginWitness() {
    CollectFieldName();
  }
  virtual ~ElementsAddPeginWitness() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const ElementsAddPeginWitness& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      ElementsAddPeginWitness& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const ElementsAddPeginWitness& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      ElementsAddPeginWitness& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of mainchainGenesisBlockHash
   * @return mainchainGenesisBlockHash
   */
  std::string GetMainchainGenesisBlockHash() const {
    return mainchain_genesis_block_hash_;
  }
  /**
   * @brief Set to mainchainGenesisBlockHash
   * @param[in] mainchain_genesis_block_hash    setting value.
   */
  void SetMainchainGenesisBlockHash(  // line separate
    const std::string& mainchain_genesis_block_hash) {  // NOLINT
    this->mainchain_genesis_block_hash_ = mainchain_genesis_block_hash;
  }
  /**
   * @brief Get data type of mainchainGenesisBlockHash
   * @return Data type of mainchainGenesisBlockHash
   */
  static std::string GetMainchainGenesisBlockHashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of mainchainGenesisBlockHash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMainchainGenesisBlockHashString(  // line separate
      const ElementsAddPeginWitness& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.mainchain_genesis_block_hash_);
  }
  /**
   * @brief Set json object to mainchainGenesisBlockHash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMainchainGenesisBlockHashString(  // line separate
      ElementsAddPeginWitness& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.mainchain_genesis_block_hash_, json_value);
  }

  /**
   * @brief Get of claimScript
   * @return claimScript
   */
  std::string GetClaimScript() const {
    return claim_script_;
  }
  /**
   * @brief Set to claimScript
   * @param[in] claim_script    setting value.
   */
  void SetClaimScript(  // line separate
    const std::string& claim_script) {  // NOLINT
    this->claim_script_ = claim_script;
  }
  /**
   * @brief Get data type of claimScript
   * @return Data type of claimScript
   */
  static std::string GetClaimScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of claimScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetClaimScriptString(  // line separate
      const ElementsAddPeginWitness& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.claim_script_);
  }
  /**
   * @brief Set json object to claimScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetClaimScriptString(  // line separate
      ElementsAddPeginWitness& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.claim_script_, json_value);
  }

  /**
   * @brief Get of mainchainRawTransaction
   * @return mainchainRawTransaction
   */
  std::string GetMainchainRawTransaction() const {
    return mainchain_raw_transaction_;
  }
  /**
   * @brief Set to mainchainRawTransaction
   * @param[in] mainchain_raw_transaction    setting value.
   */
  void SetMainchainRawTransaction(  // line separate
    const std::string& mainchain_raw_transaction) {  // NOLINT
    this->mainchain_raw_transaction_ = mainchain_raw_transaction;
  }
  /**
   * @brief Get data type of mainchainRawTransaction
   * @return Data type of mainchainRawTransaction
   */
  static std::string GetMainchainRawTransactionFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of mainchainRawTransaction field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMainchainRawTransactionString(  // line separate
      const ElementsAddPeginWitness& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.mainchain_raw_transaction_);
  }
  /**
   * @brief Set json object to mainchainRawTransaction field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMainchainRawTransactionString(  // line separate
      ElementsAddPeginWitness& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.mainchain_raw_transaction_, json_value);
  }

  /**
   * @brief Get of mainchainTxoutproof
   * @return mainchainTxoutproof
   */
  std::string GetMainchainTxoutproof() const {
    return mainchain_txoutproof_;
  }
  /**
   * @brief Set to mainchainTxoutproof
   * @param[in] mainchain_txoutproof    setting value.
   */
  void SetMainchainTxoutproof(  // line separate
    const std::string& mainchain_txoutproof) {  // NOLINT
    this->mainchain_txoutproof_ = mainchain_txoutproof;
  }
  /**
   * @brief Get data type of mainchainTxoutproof
   * @return Data type of mainchainTxoutproof
   */
  static std::string GetMainchainTxoutproofFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of mainchainTxoutproof field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMainchainTxoutproofString(  // line separate
      const ElementsAddPeginWitness& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.mainchain_txoutproof_);
  }
  /**
   * @brief Set json object to mainchainTxoutproof field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMainchainTxoutproofString(  // line separate
      ElementsAddPeginWitness& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.mainchain_txoutproof_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsAddPeginWitnessStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsAddPeginWitnessStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsAddPeginWitnessMapTable =
    cfd::core::JsonTableMap<ElementsAddPeginWitness>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsAddPeginWitnessMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsAddPeginWitnessMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(mainchainGenesisBlockHash) value
   */
  std::string mainchain_genesis_block_hash_ = "";
  /**
   * @brief JsonAPI(claimScript) value
   */
  std::string claim_script_ = "";
  /**
   * @brief JsonAPI(mainchainRawTransaction) value
   */
  std::string mainchain_raw_transaction_ = "";
  /**
   * @brief JsonAPI(mainchainTxoutproof) value
   */
  std::string mainchain_txoutproof_ = "";
};

// ------------------------------------------------------------------------
// ElementsDecodeIssuance
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsDecodeIssuance) class
 */
class ElementsDecodeIssuance
  : public cfd::core::JsonClassBase<ElementsDecodeIssuance> {
 public:
  ElementsDecodeIssuance() {
    CollectFieldName();
  }
  virtual ~ElementsDecodeIssuance() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of assetBlindingNonce
   * @return assetBlindingNonce
   */
  std::string GetAssetBlindingNonce() const {
    return asset_blinding_nonce_;
  }
  /**
   * @brief Set to assetBlindingNonce
   * @param[in] asset_blinding_nonce    setting value.
   */
  void SetAssetBlindingNonce(  // line separate
    const std::string& asset_blinding_nonce) {  // NOLINT
    this->asset_blinding_nonce_ = asset_blinding_nonce;
  }
  /**
   * @brief Get data type of assetBlindingNonce
   * @return Data type of assetBlindingNonce
   */
  static std::string GetAssetBlindingNonceFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetBlindingNonce field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetBlindingNonceString(  // line separate
      const ElementsDecodeIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_blinding_nonce_);
  }
  /**
   * @brief Set json object to assetBlindingNonce field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetBlindingNonceString(  // line separate
      ElementsDecodeIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_blinding_nonce_, json_value);
  }

  /**
   * @brief Get of assetEntropy
   * @return assetEntropy
   */
  std::string GetAssetEntropy() const {
    return asset_entropy_;
  }
  /**
   * @brief Set to assetEntropy
   * @param[in] asset_entropy    setting value.
   */
  void SetAssetEntropy(  // line separate
    const std::string& asset_entropy) {  // NOLINT
    this->asset_entropy_ = asset_entropy;
  }
  /**
   * @brief Get data type of assetEntropy
   * @return Data type of assetEntropy
   */
  static std::string GetAssetEntropyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetEntropy field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetEntropyString(  // line separate
      const ElementsDecodeIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_entropy_);
  }
  /**
   * @brief Set json object to assetEntropy field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetEntropyString(  // line separate
      ElementsDecodeIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_entropy_, json_value);
  }

  /**
   * @brief Get of contractHash
   * @return contractHash
   */
  std::string GetContractHash() const {
    return contract_hash_;
  }
  /**
   * @brief Set to contractHash
   * @param[in] contract_hash    setting value.
   */
  void SetContractHash(  // line separate
    const std::string& contract_hash) {  // NOLINT
    this->contract_hash_ = contract_hash;
  }
  /**
   * @brief Get data type of contractHash
   * @return Data type of contractHash
   */
  static std::string GetContractHashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of contractHash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetContractHashString(  // line separate
      const ElementsDecodeIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.contract_hash_);
  }
  /**
   * @brief Set json object to contractHash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetContractHashString(  // line separate
      ElementsDecodeIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.contract_hash_, json_value);
  }

  /**
   * @brief Get of isreissuance
   * @return isreissuance
   */
  bool GetIsreissuance() const {
    return isreissuance_;
  }
  /**
   * @brief Set to isreissuance
   * @param[in] isreissuance    setting value.
   */
  void SetIsreissuance(  // line separate
    const bool& isreissuance) {  // NOLINT
    this->isreissuance_ = isreissuance;
  }
  /**
   * @brief Get data type of isreissuance
   * @return Data type of isreissuance
   */
  static std::string GetIsreissuanceFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isreissuance field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsreissuanceString(  // line separate
      const ElementsDecodeIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.isreissuance_);
  }
  /**
   * @brief Set json object to isreissuance field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsreissuanceString(  // line separate
      ElementsDecodeIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.isreissuance_, json_value);
  }

  /**
   * @brief Get of token
   * @return token
   */
  std::string GetToken() const {
    return token_;
  }
  /**
   * @brief Set to token
   * @param[in] token    setting value.
   */
  void SetToken(  // line separate
    const std::string& token) {  // NOLINT
    this->token_ = token;
  }
  /**
   * @brief Get data type of token
   * @return Data type of token
   */
  static std::string GetTokenFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of token field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTokenString(  // line separate
      const ElementsDecodeIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.token_);
  }
  /**
   * @brief Set json object to token field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTokenString(  // line separate
      ElementsDecodeIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.token_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const ElementsDecodeIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      ElementsDecodeIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of assetamount
   * @return assetamount
   */
  int64_t GetAssetamount() const {
    return assetamount_;
  }
  /**
   * @brief Set to assetamount
   * @param[in] assetamount    setting value.
   */
  void SetAssetamount(  // line separate
    const int64_t& assetamount) {  // NOLINT
    this->assetamount_ = assetamount;
  }
  /**
   * @brief Get data type of assetamount
   * @return Data type of assetamount
   */
  static std::string GetAssetamountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of assetamount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetamountString(  // line separate
      const ElementsDecodeIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.assetamount_);
  }
  /**
   * @brief Set json object to assetamount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetamountString(  // line separate
      ElementsDecodeIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.assetamount_, json_value);
  }

  /**
   * @brief Get of assetamountcommitment
   * @return assetamountcommitment
   */
  std::string GetAssetamountcommitment() const {
    return assetamountcommitment_;
  }
  /**
   * @brief Set to assetamountcommitment
   * @param[in] assetamountcommitment    setting value.
   */
  void SetAssetamountcommitment(  // line separate
    const std::string& assetamountcommitment) {  // NOLINT
    this->assetamountcommitment_ = assetamountcommitment;
  }
  /**
   * @brief Get data type of assetamountcommitment
   * @return Data type of assetamountcommitment
   */
  static std::string GetAssetamountcommitmentFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetamountcommitment field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetamountcommitmentString(  // line separate
      const ElementsDecodeIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.assetamountcommitment_);
  }
  /**
   * @brief Set json object to assetamountcommitment field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetamountcommitmentString(  // line separate
      ElementsDecodeIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.assetamountcommitment_, json_value);
  }

  /**
   * @brief Get of tokenamount
   * @return tokenamount
   */
  int64_t GetTokenamount() const {
    return tokenamount_;
  }
  /**
   * @brief Set to tokenamount
   * @param[in] tokenamount    setting value.
   */
  void SetTokenamount(  // line separate
    const int64_t& tokenamount) {  // NOLINT
    this->tokenamount_ = tokenamount;
  }
  /**
   * @brief Get data type of tokenamount
   * @return Data type of tokenamount
   */
  static std::string GetTokenamountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of tokenamount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTokenamountString(  // line separate
      const ElementsDecodeIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tokenamount_);
  }
  /**
   * @brief Set json object to tokenamount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTokenamountString(  // line separate
      ElementsDecodeIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tokenamount_, json_value);
  }

  /**
   * @brief Get of tokenamountcommitment
   * @return tokenamountcommitment
   */
  std::string GetTokenamountcommitment() const {
    return tokenamountcommitment_;
  }
  /**
   * @brief Set to tokenamountcommitment
   * @param[in] tokenamountcommitment    setting value.
   */
  void SetTokenamountcommitment(  // line separate
    const std::string& tokenamountcommitment) {  // NOLINT
    this->tokenamountcommitment_ = tokenamountcommitment;
  }
  /**
   * @brief Get data type of tokenamountcommitment
   * @return Data type of tokenamountcommitment
   */
  static std::string GetTokenamountcommitmentFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tokenamountcommitment field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTokenamountcommitmentString(  // line separate
      const ElementsDecodeIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tokenamountcommitment_);
  }
  /**
   * @brief Set json object to tokenamountcommitment field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTokenamountcommitmentString(  // line separate
      ElementsDecodeIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tokenamountcommitment_, json_value);
  }

  /**
   * @brief Get of assetRangeproof
   * @return assetRangeproof
   */
  std::string GetAssetRangeproof() const {
    return asset_rangeproof_;
  }
  /**
   * @brief Set to assetRangeproof
   * @param[in] asset_rangeproof    setting value.
   */
  void SetAssetRangeproof(  // line separate
    const std::string& asset_rangeproof) {  // NOLINT
    this->asset_rangeproof_ = asset_rangeproof;
  }
  /**
   * @brief Get data type of assetRangeproof
   * @return Data type of assetRangeproof
   */
  static std::string GetAssetRangeproofFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetRangeproof field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetRangeproofString(  // line separate
      const ElementsDecodeIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_rangeproof_);
  }
  /**
   * @brief Set json object to assetRangeproof field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetRangeproofString(  // line separate
      ElementsDecodeIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_rangeproof_, json_value);
  }

  /**
   * @brief Get of tokenRangeproof
   * @return tokenRangeproof
   */
  std::string GetTokenRangeproof() const {
    return token_rangeproof_;
  }
  /**
   * @brief Set to tokenRangeproof
   * @param[in] token_rangeproof    setting value.
   */
  void SetTokenRangeproof(  // line separate
    const std::string& token_rangeproof) {  // NOLINT
    this->token_rangeproof_ = token_rangeproof;
  }
  /**
   * @brief Get data type of tokenRangeproof
   * @return Data type of tokenRangeproof
   */
  static std::string GetTokenRangeproofFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tokenRangeproof field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTokenRangeproofString(  // line separate
      const ElementsDecodeIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.token_rangeproof_);
  }
  /**
   * @brief Set json object to tokenRangeproof field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTokenRangeproofString(  // line separate
      ElementsDecodeIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.token_rangeproof_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsDecodeIssuanceStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsDecodeIssuanceStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsDecodeIssuanceMapTable =
    cfd::core::JsonTableMap<ElementsDecodeIssuance>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsDecodeIssuanceMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsDecodeIssuanceMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(assetBlindingNonce) value
   */
  std::string asset_blinding_nonce_ = "";
  /**
   * @brief JsonAPI(assetEntropy) value
   */
  std::string asset_entropy_ = "";
  /**
   * @brief JsonAPI(contractHash) value
   */
  std::string contract_hash_ = "";
  /**
   * @brief JsonAPI(isreissuance) value
   */
  bool isreissuance_ = false;
  /**
   * @brief JsonAPI(token) value
   */
  std::string token_ = "";
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(assetamount) value
   */
  int64_t assetamount_ = 0;
  /**
   * @brief JsonAPI(assetamountcommitment) value
   */
  std::string assetamountcommitment_ = "";
  /**
   * @brief JsonAPI(tokenamount) value
   */
  int64_t tokenamount_ = 0;
  /**
   * @brief JsonAPI(tokenamountcommitment) value
   */
  std::string tokenamountcommitment_ = "";
  /**
   * @brief JsonAPI(assetRangeproof) value
   */
  std::string asset_rangeproof_ = "";
  /**
   * @brief JsonAPI(tokenRangeproof) value
   */
  std::string token_rangeproof_ = "";
};

// ------------------------------------------------------------------------
// ElementsDecodeLockingScript
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsDecodeLockingScript) class
 */
class ElementsDecodeLockingScript
  : public cfd::core::JsonClassBase<ElementsDecodeLockingScript> {
 public:
  ElementsDecodeLockingScript() {
    CollectFieldName();
  }
  virtual ~ElementsDecodeLockingScript() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of asm
   * @return asm
   */
  std::string GetAsm() const {
    return asm__;
  }
  /**
   * @brief Set to asm
   * @param[in] asm_    setting value.
   */
  void SetAsm(  // line separate
    const std::string& asm_) {  // NOLINT
    this->asm__ = asm_;
  }
  /**
   * @brief Get data type of asm
   * @return Data type of asm
   */
  static std::string GetAsmFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asm field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAsmString(  // line separate
      const ElementsDecodeLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asm__);
  }
  /**
   * @brief Set json object to asm field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAsmString(  // line separate
      ElementsDecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asm__, json_value);
  }

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const ElementsDecodeLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      ElementsDecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of reqSigs
   * @return reqSigs
   */
  int GetReqSigs() const {
    return req_sigs_;
  }
  /**
   * @brief Set to reqSigs
   * @param[in] req_sigs    setting value.
   */
  void SetReqSigs(  // line separate
    const int& req_sigs) {  // NOLINT
    this->req_sigs_ = req_sigs;
  }
  /**
   * @brief Get data type of reqSigs
   * @return Data type of reqSigs
   */
  static std::string GetReqSigsFieldType() {
    return "int";
  }
  /**
   * @brief Get json string of reqSigs field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetReqSigsString(  // line separate
      const ElementsDecodeLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.req_sigs_);
  }
  /**
   * @brief Set json object to reqSigs field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetReqSigsString(  // line separate
      ElementsDecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.req_sigs_, json_value);
  }

  /**
   * @brief Get of type
   * @return type
   */
  std::string GetType() const {
    return type_;
  }
  /**
   * @brief Set to type
   * @param[in] type    setting value.
   */
  void SetType(  // line separate
    const std::string& type) {  // NOLINT
    this->type_ = type;
  }
  /**
   * @brief Get data type of type
   * @return Data type of type
   */
  static std::string GetTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of type field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTypeString(  // line separate
      const ElementsDecodeLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.type_);
  }
  /**
   * @brief Set json object to type field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTypeString(  // line separate
      ElementsDecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.type_, json_value);
  }

  /**
   * @brief Get of addresses.
   * @return addresses
   */
  JsonValueVector<std::string>& GetAddresses() {  // NOLINT
    return addresses_;
  }
  /**
   * @brief Set to addresses.
   * @param[in] addresses    setting value.
   */
  void SetAddresses(  // line separate
      const JsonValueVector<std::string>& addresses) {  // NOLINT
    this->addresses_ = addresses;
  }
  /**
   * @brief Get data type of addresses.
   * @return Data type of addresses.
   */
  static std::string GetAddressesFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of addresses field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetAddressesString(  // line separate
      const ElementsDecodeLockingScript& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.addresses_.Serialize();
  }
  /**
   * @brief Set json object to addresses field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetAddressesString(  // line separate
      ElementsDecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    obj.addresses_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of pegout_chain
   * @return pegout_chain
   */
  std::string GetPegout_chain() const {
    return pegout_chain_;
  }
  /**
   * @brief Set to pegout_chain
   * @param[in] pegout_chain    setting value.
   */
  void SetPegout_chain(  // line separate
    const std::string& pegout_chain) {  // NOLINT
    this->pegout_chain_ = pegout_chain;
  }
  /**
   * @brief Get data type of pegout_chain
   * @return Data type of pegout_chain
   */
  static std::string GetPegout_chainFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pegout_chain field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPegout_chainString(  // line separate
      const ElementsDecodeLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pegout_chain_);
  }
  /**
   * @brief Set json object to pegout_chain field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPegout_chainString(  // line separate
      ElementsDecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pegout_chain_, json_value);
  }

  /**
   * @brief Get of pegout_asm
   * @return pegout_asm
   */
  std::string GetPegout_asm() const {
    return pegout_asm_;
  }
  /**
   * @brief Set to pegout_asm
   * @param[in] pegout_asm    setting value.
   */
  void SetPegout_asm(  // line separate
    const std::string& pegout_asm) {  // NOLINT
    this->pegout_asm_ = pegout_asm;
  }
  /**
   * @brief Get data type of pegout_asm
   * @return Data type of pegout_asm
   */
  static std::string GetPegout_asmFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pegout_asm field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPegout_asmString(  // line separate
      const ElementsDecodeLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pegout_asm_);
  }
  /**
   * @brief Set json object to pegout_asm field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPegout_asmString(  // line separate
      ElementsDecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pegout_asm_, json_value);
  }

  /**
   * @brief Get of pegout_hex
   * @return pegout_hex
   */
  std::string GetPegout_hex() const {
    return pegout_hex_;
  }
  /**
   * @brief Set to pegout_hex
   * @param[in] pegout_hex    setting value.
   */
  void SetPegout_hex(  // line separate
    const std::string& pegout_hex) {  // NOLINT
    this->pegout_hex_ = pegout_hex;
  }
  /**
   * @brief Get data type of pegout_hex
   * @return Data type of pegout_hex
   */
  static std::string GetPegout_hexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pegout_hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPegout_hexString(  // line separate
      const ElementsDecodeLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pegout_hex_);
  }
  /**
   * @brief Set json object to pegout_hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPegout_hexString(  // line separate
      ElementsDecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pegout_hex_, json_value);
  }

  /**
   * @brief Get of pegout_reqSigs
   * @return pegout_reqSigs
   */
  int GetPegout_reqSigs() const {
    return pegout_req_sigs_;
  }
  /**
   * @brief Set to pegout_reqSigs
   * @param[in] pegout_req_sigs    setting value.
   */
  void SetPegout_reqSigs(  // line separate
    const int& pegout_req_sigs) {  // NOLINT
    this->pegout_req_sigs_ = pegout_req_sigs;
  }
  /**
   * @brief Get data type of pegout_reqSigs
   * @return Data type of pegout_reqSigs
   */
  static std::string GetPegout_reqSigsFieldType() {
    return "int";
  }
  /**
   * @brief Get json string of pegout_reqSigs field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPegout_reqSigsString(  // line separate
      const ElementsDecodeLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pegout_req_sigs_);
  }
  /**
   * @brief Set json object to pegout_reqSigs field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPegout_reqSigsString(  // line separate
      ElementsDecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pegout_req_sigs_, json_value);
  }

  /**
   * @brief Get of pegout_type
   * @return pegout_type
   */
  std::string GetPegout_type() const {
    return pegout_type_;
  }
  /**
   * @brief Set to pegout_type
   * @param[in] pegout_type    setting value.
   */
  void SetPegout_type(  // line separate
    const std::string& pegout_type) {  // NOLINT
    this->pegout_type_ = pegout_type;
  }
  /**
   * @brief Get data type of pegout_type
   * @return Data type of pegout_type
   */
  static std::string GetPegout_typeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pegout_type field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPegout_typeString(  // line separate
      const ElementsDecodeLockingScript& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pegout_type_);
  }
  /**
   * @brief Set json object to pegout_type field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPegout_typeString(  // line separate
      ElementsDecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pegout_type_, json_value);
  }

  /**
   * @brief Get of pegout_addresses.
   * @return pegout_addresses
   */
  JsonValueVector<std::string>& GetPegout_addresses() {  // NOLINT
    return pegout_addresses_;
  }
  /**
   * @brief Set to pegout_addresses.
   * @param[in] pegout_addresses    setting value.
   */
  void SetPegout_addresses(  // line separate
      const JsonValueVector<std::string>& pegout_addresses) {  // NOLINT
    this->pegout_addresses_ = pegout_addresses;
  }
  /**
   * @brief Get data type of pegout_addresses.
   * @return Data type of pegout_addresses.
   */
  static std::string GetPegout_addressesFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of pegout_addresses field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetPegout_addressesString(  // line separate
      const ElementsDecodeLockingScript& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.pegout_addresses_.Serialize();
  }
  /**
   * @brief Set json object to pegout_addresses field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetPegout_addressesString(  // line separate
      ElementsDecodeLockingScript& obj,  // NOLINT
      const UniValue& json_value) {
    obj.pegout_addresses_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsDecodeLockingScriptStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsDecodeLockingScriptStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsDecodeLockingScriptMapTable =
    cfd::core::JsonTableMap<ElementsDecodeLockingScript>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsDecodeLockingScriptMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsDecodeLockingScriptMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(asm) value
   */
  std::string asm__ = "";
  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(reqSigs) value
   */
  int req_sigs_ = 0;
  /**
   * @brief JsonAPI(type) value
   */
  std::string type_ = "";
  /**
   * @brief JsonAPI(addresses) value
   */
  JsonValueVector<std::string> addresses_;  // NOLINT
  /**
   * @brief JsonAPI(pegout_chain) value
   */
  std::string pegout_chain_ = "";
  /**
   * @brief JsonAPI(pegout_asm) value
   */
  std::string pegout_asm_ = "";
  /**
   * @brief JsonAPI(pegout_hex) value
   */
  std::string pegout_hex_ = "";
  /**
   * @brief JsonAPI(pegout_reqSigs) value
   */
  int pegout_req_sigs_ = 0;
  /**
   * @brief JsonAPI(pegout_type) value
   */
  std::string pegout_type_ = "";
  /**
   * @brief JsonAPI(pegout_addresses) value
   */
  JsonValueVector<std::string> pegout_addresses_;  // NOLINT
};

// ------------------------------------------------------------------------
// HashKeyData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (HashKeyData) class
 */
class HashKeyData
  : public cfd::core::JsonClassBase<HashKeyData> {
 public:
  HashKeyData() {
    CollectFieldName();
  }
  virtual ~HashKeyData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const HashKeyData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      HashKeyData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of type
   * @return type
   */
  std::string GetType() const {
    return type_;
  }
  /**
   * @brief Set to type
   * @param[in] type    setting value.
   */
  void SetType(  // line separate
    const std::string& type) {  // NOLINT
    this->type_ = type;
  }
  /**
   * @brief Get data type of type
   * @return Data type of type
   */
  static std::string GetTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of type field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTypeString(  // line separate
      const HashKeyData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.type_);
  }
  /**
   * @brief Set json object to type field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTypeString(  // line separate
      HashKeyData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.type_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const HashKeyDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  HashKeyDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using HashKeyDataMapTable =
    cfd::core::JsonTableMap<HashKeyData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const HashKeyDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static HashKeyDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(type) value
   */
  std::string type_ = "pubkey";
};

// ------------------------------------------------------------------------
// OutPoint
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (OutPoint) class
 */
class OutPoint
  : public cfd::core::JsonClassBase<OutPoint> {
 public:
  OutPoint() {
    CollectFieldName();
  }
  virtual ~OutPoint() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const OutPoint& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      OutPoint& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const OutPoint& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      OutPoint& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const OutPointStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  OutPointStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using OutPointMapTable =
    cfd::core::JsonTableMap<OutPoint>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const OutPointMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static OutPointMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
};

// ------------------------------------------------------------------------
// PsbtBip32Data
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtBip32Data) class
 */
class PsbtBip32Data
  : public cfd::core::JsonClassBase<PsbtBip32Data> {
 public:
  PsbtBip32Data() {
    CollectFieldName();
  }
  virtual ~PsbtBip32Data() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const PsbtBip32Data& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      PsbtBip32Data& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Get of master_fingerprint
   * @return master_fingerprint
   */
  std::string GetMaster_fingerprint() const {
    return master_fingerprint_;
  }
  /**
   * @brief Set to master_fingerprint
   * @param[in] master_fingerprint    setting value.
   */
  void SetMaster_fingerprint(  // line separate
    const std::string& master_fingerprint) {  // NOLINT
    this->master_fingerprint_ = master_fingerprint;
  }
  /**
   * @brief Get data type of master_fingerprint
   * @return Data type of master_fingerprint
   */
  static std::string GetMaster_fingerprintFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of master_fingerprint field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMaster_fingerprintString(  // line separate
      const PsbtBip32Data& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.master_fingerprint_);
  }
  /**
   * @brief Set json object to master_fingerprint field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMaster_fingerprintString(  // line separate
      PsbtBip32Data& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.master_fingerprint_, json_value);
  }

  /**
   * @brief Get of path
   * @return path
   */
  std::string GetPath() const {
    return path_;
  }
  /**
   * @brief Set to path
   * @param[in] path    setting value.
   */
  void SetPath(  // line separate
    const std::string& path) {  // NOLINT
    this->path_ = path;
  }
  /**
   * @brief Get data type of path
   * @return Data type of path
   */
  static std::string GetPathFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of path field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPathString(  // line separate
      const PsbtBip32Data& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.path_);
  }
  /**
   * @brief Set json object to path field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPathString(  // line separate
      PsbtBip32Data& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.path_, json_value);
  }

  /**
   * @brief Get of descriptor
   * @return descriptor
   */
  std::string GetDescriptor() const {
    return descriptor_;
  }
  /**
   * @brief Set to descriptor
   * @param[in] descriptor    setting value.
   */
  void SetDescriptor(  // line separate
    const std::string& descriptor) {  // NOLINT
    this->descriptor_ = descriptor;
  }
  /**
   * @brief Get data type of descriptor
   * @return Data type of descriptor
   */
  static std::string GetDescriptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of descriptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDescriptorString(  // line separate
      const PsbtBip32Data& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.descriptor_);
  }
  /**
   * @brief Set json object to descriptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDescriptorString(  // line separate
      PsbtBip32Data& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.descriptor_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtBip32DataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtBip32DataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtBip32DataMapTable =
    cfd::core::JsonTableMap<PsbtBip32Data>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtBip32DataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtBip32DataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
  /**
   * @brief JsonAPI(master_fingerprint) value
   */
  std::string master_fingerprint_ = "";
  /**
   * @brief JsonAPI(path) value
   */
  std::string path_ = "";
  /**
   * @brief JsonAPI(descriptor) value
   */
  std::string descriptor_ = "";
};

// ------------------------------------------------------------------------
// PsbtGlobalXpubInput
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtGlobalXpubInput) class
 */
class PsbtGlobalXpubInput
  : public cfd::core::JsonClassBase<PsbtGlobalXpubInput> {
 public:
  PsbtGlobalXpubInput() {
    CollectFieldName();
  }
  virtual ~PsbtGlobalXpubInput() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of descriptorXpub
   * @return descriptorXpub
   */
  std::string GetDescriptorXpub() const {
    return descriptor_xpub_;
  }
  /**
   * @brief Set to descriptorXpub
   * @param[in] descriptor_xpub    setting value.
   */
  void SetDescriptorXpub(  // line separate
    const std::string& descriptor_xpub) {  // NOLINT
    this->descriptor_xpub_ = descriptor_xpub;
  }
  /**
   * @brief Get data type of descriptorXpub
   * @return Data type of descriptorXpub
   */
  static std::string GetDescriptorXpubFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of descriptorXpub field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDescriptorXpubString(  // line separate
      const PsbtGlobalXpubInput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.descriptor_xpub_);
  }
  /**
   * @brief Set json object to descriptorXpub field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDescriptorXpubString(  // line separate
      PsbtGlobalXpubInput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.descriptor_xpub_, json_value);
  }

  /**
   * @brief Get of xpub
   * @return xpub
   */
  std::string GetXpub() const {
    return xpub_;
  }
  /**
   * @brief Set to xpub
   * @param[in] xpub    setting value.
   */
  void SetXpub(  // line separate
    const std::string& xpub) {  // NOLINT
    this->xpub_ = xpub;
  }
  /**
   * @brief Get data type of xpub
   * @return Data type of xpub
   */
  static std::string GetXpubFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of xpub field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetXpubString(  // line separate
      const PsbtGlobalXpubInput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.xpub_);
  }
  /**
   * @brief Set json object to xpub field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetXpubString(  // line separate
      PsbtGlobalXpubInput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.xpub_, json_value);
  }

  /**
   * @brief Get of master_fingerprint
   * @return master_fingerprint
   */
  std::string GetMaster_fingerprint() const {
    return master_fingerprint_;
  }
  /**
   * @brief Set to master_fingerprint
   * @param[in] master_fingerprint    setting value.
   */
  void SetMaster_fingerprint(  // line separate
    const std::string& master_fingerprint) {  // NOLINT
    this->master_fingerprint_ = master_fingerprint;
  }
  /**
   * @brief Get data type of master_fingerprint
   * @return Data type of master_fingerprint
   */
  static std::string GetMaster_fingerprintFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of master_fingerprint field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMaster_fingerprintString(  // line separate
      const PsbtGlobalXpubInput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.master_fingerprint_);
  }
  /**
   * @brief Set json object to master_fingerprint field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMaster_fingerprintString(  // line separate
      PsbtGlobalXpubInput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.master_fingerprint_, json_value);
  }

  /**
   * @brief Get of path
   * @return path
   */
  std::string GetPath() const {
    return path_;
  }
  /**
   * @brief Set to path
   * @param[in] path    setting value.
   */
  void SetPath(  // line separate
    const std::string& path) {  // NOLINT
    this->path_ = path;
  }
  /**
   * @brief Get data type of path
   * @return Data type of path
   */
  static std::string GetPathFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of path field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPathString(  // line separate
      const PsbtGlobalXpubInput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.path_);
  }
  /**
   * @brief Set json object to path field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPathString(  // line separate
      PsbtGlobalXpubInput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.path_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtGlobalXpubInputStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtGlobalXpubInputStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtGlobalXpubInputMapTable =
    cfd::core::JsonTableMap<PsbtGlobalXpubInput>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtGlobalXpubInputMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtGlobalXpubInputMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(descriptorXpub) value
   */
  std::string descriptor_xpub_ = "";
  /**
   * @brief JsonAPI(xpub) value
   */
  std::string xpub_ = "";
  /**
   * @brief JsonAPI(master_fingerprint) value
   */
  std::string master_fingerprint_ = "";
  /**
   * @brief JsonAPI(path) value
   */
  std::string path_ = "";
};

// ------------------------------------------------------------------------
// PsbtInputRequestData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtInputRequestData) class
 */
class PsbtInputRequestData
  : public cfd::core::JsonClassBase<PsbtInputRequestData> {
 public:
  PsbtInputRequestData() {
    CollectFieldName();
  }
  virtual ~PsbtInputRequestData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of utxoFullTx
   * @return utxoFullTx
   */
  std::string GetUtxoFullTx() const {
    return utxo_full_tx_;
  }
  /**
   * @brief Set to utxoFullTx
   * @param[in] utxo_full_tx    setting value.
   */
  void SetUtxoFullTx(  // line separate
    const std::string& utxo_full_tx) {  // NOLINT
    this->utxo_full_tx_ = utxo_full_tx;
  }
  /**
   * @brief Get data type of utxoFullTx
   * @return Data type of utxoFullTx
   */
  static std::string GetUtxoFullTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of utxoFullTx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetUtxoFullTxString(  // line separate
      const PsbtInputRequestData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.utxo_full_tx_);
  }
  /**
   * @brief Set json object to utxoFullTx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetUtxoFullTxString(  // line separate
      PsbtInputRequestData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.utxo_full_tx_, json_value);
  }

  /**
   * @brief Get of witnessUtxo.
   * @return witnessUtxo
   */
  TxOutRequest& GetWitnessUtxo() {  // NOLINT
    return witness_utxo_;
  }
  /**
   * @brief Set to witnessUtxo.
   * @param[in] witness_utxo    setting value.
   */
  void SetWitnessUtxo(  // line separate
      const TxOutRequest& witness_utxo) {  // NOLINT
    this->witness_utxo_ = witness_utxo;
  }
  /**
   * @brief Get data type of witnessUtxo.
   * @return Data type of witnessUtxo.
   */
  static std::string GetWitnessUtxoFieldType() {
    return "TxOutRequest";  // NOLINT
  }
  /**
   * @brief Get json string of witnessUtxo field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetWitnessUtxoString(  // line separate
      const PsbtInputRequestData& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.witness_utxo_.Serialize();
  }
  /**
   * @brief Set json object to witnessUtxo field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetWitnessUtxoString(  // line separate
      PsbtInputRequestData& obj,  // NOLINT
      const UniValue& json_value) {
    obj.witness_utxo_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of redeemScript
   * @return redeemScript
   */
  std::string GetRedeemScript() const {
    return redeem_script_;
  }
  /**
   * @brief Set to redeemScript
   * @param[in] redeem_script    setting value.
   */
  void SetRedeemScript(  // line separate
    const std::string& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeemScript
   * @return Data type of redeemScript
   */
  static std::string GetRedeemScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of redeemScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRedeemScriptString(  // line separate
      const PsbtInputRequestData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.redeem_script_);
  }
  /**
   * @brief Set json object to redeemScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRedeemScriptString(  // line separate
      PsbtInputRequestData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.redeem_script_, json_value);
  }

  /**
   * @brief Get of bip32Derives.
   * @return bip32Derives
   */
  JsonObjectVector<PsbtBip32PubkeyInput, PsbtBip32PubkeyInputStruct>& GetBip32Derives() {  // NOLINT
    return bip32_derives_;
  }
  /**
   * @brief Set to bip32Derives.
   * @param[in] bip32_derives    setting value.
   */
  void SetBip32Derives(  // line separate
      const JsonObjectVector<PsbtBip32PubkeyInput, PsbtBip32PubkeyInputStruct>& bip32_derives) {  // NOLINT
    this->bip32_derives_ = bip32_derives;
  }
  /**
   * @brief Get data type of bip32Derives.
   * @return Data type of bip32Derives.
   */
  static std::string GetBip32DerivesFieldType() {
    return "JsonObjectVector<PsbtBip32PubkeyInput, PsbtBip32PubkeyInputStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of bip32Derives field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetBip32DerivesString(  // line separate
      const PsbtInputRequestData& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.bip32_derives_.Serialize();
  }
  /**
   * @brief Set json object to bip32Derives field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetBip32DerivesString(  // line separate
      PsbtInputRequestData& obj,  // NOLINT
      const UniValue& json_value) {
    obj.bip32_derives_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of sighash
   * @return sighash
   */
  std::string GetSighash() const {
    return sighash_;
  }
  /**
   * @brief Set to sighash
   * @param[in] sighash    setting value.
   */
  void SetSighash(  // line separate
    const std::string& sighash) {  // NOLINT
    this->sighash_ = sighash;
  }
  /**
   * @brief Get data type of sighash
   * @return Data type of sighash
   */
  static std::string GetSighashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashString(  // line separate
      const PsbtInputRequestData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_);
  }
  /**
   * @brief Set json object to sighash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashString(  // line separate
      PsbtInputRequestData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_, json_value);
  }

  /**
   * @brief Get of partialSignature.
   * @return partialSignature
   */
  JsonObjectVector<PsbtSignatureData, PsbtSignatureDataStruct>& GetPartialSignature() {  // NOLINT
    return partial_signature_;
  }
  /**
   * @brief Set to partialSignature.
   * @param[in] partial_signature    setting value.
   */
  void SetPartialSignature(  // line separate
      const JsonObjectVector<PsbtSignatureData, PsbtSignatureDataStruct>& partial_signature) {  // NOLINT
    this->partial_signature_ = partial_signature;
  }
  /**
   * @brief Get data type of partialSignature.
   * @return Data type of partialSignature.
   */
  static std::string GetPartialSignatureFieldType() {
    return "JsonObjectVector<PsbtSignatureData, PsbtSignatureDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of partialSignature field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetPartialSignatureString(  // line separate
      const PsbtInputRequestData& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.partial_signature_.Serialize();
  }
  /**
   * @brief Set json object to partialSignature field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetPartialSignatureString(  // line separate
      PsbtInputRequestData& obj,  // NOLINT
      const UniValue& json_value) {
    obj.partial_signature_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of unknown.
   * @return unknown
   */
  JsonObjectVector<PsbtMapData, PsbtMapDataStruct>& GetUnknown() {  // NOLINT
    return unknown_;
  }
  /**
   * @brief Set to unknown.
   * @param[in] unknown    setting value.
   */
  void SetUnknown(  // line separate
      const JsonObjectVector<PsbtMapData, PsbtMapDataStruct>& unknown) {  // NOLINT
    this->unknown_ = unknown;
  }
  /**
   * @brief Get data type of unknown.
   * @return Data type of unknown.
   */
  static std::string GetUnknownFieldType() {
    return "JsonObjectVector<PsbtMapData, PsbtMapDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of unknown field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUnknownString(  // line separate
      const PsbtInputRequestData& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.unknown_.Serialize();
  }
  /**
   * @brief Set json object to unknown field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUnknownString(  // line separate
      PsbtInputRequestData& obj,  // NOLINT
      const UniValue& json_value) {
    obj.unknown_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtInputRequestDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtInputRequestDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtInputRequestDataMapTable =
    cfd::core::JsonTableMap<PsbtInputRequestData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtInputRequestDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtInputRequestDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(utxoFullTx) value
   */
  std::string utxo_full_tx_ = "";
  /**
   * @brief JsonAPI(witnessUtxo) value
   */
  TxOutRequest witness_utxo_;  // NOLINT
  /**
   * @brief JsonAPI(redeemScript) value
   */
  std::string redeem_script_ = "";
  /**
   * @brief JsonAPI(bip32Derives) value
   */
  JsonObjectVector<PsbtBip32PubkeyInput, PsbtBip32PubkeyInputStruct> bip32_derives_;  // NOLINT
  /**
   * @brief JsonAPI(sighash) value
   */
  std::string sighash_ = "";
  /**
   * @brief JsonAPI(partialSignature) value
   */
  JsonObjectVector<PsbtSignatureData, PsbtSignatureDataStruct> partial_signature_;  // NOLINT
  /**
   * @brief JsonAPI(unknown) value
   */
  JsonObjectVector<PsbtMapData, PsbtMapDataStruct> unknown_;  // NOLINT
};

// ------------------------------------------------------------------------
// PsbtOutputRequestData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtOutputRequestData) class
 */
class PsbtOutputRequestData
  : public cfd::core::JsonClassBase<PsbtOutputRequestData> {
 public:
  PsbtOutputRequestData() {
    CollectFieldName();
  }
  virtual ~PsbtOutputRequestData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of redeemScript
   * @return redeemScript
   */
  std::string GetRedeemScript() const {
    return redeem_script_;
  }
  /**
   * @brief Set to redeemScript
   * @param[in] redeem_script    setting value.
   */
  void SetRedeemScript(  // line separate
    const std::string& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeemScript
   * @return Data type of redeemScript
   */
  static std::string GetRedeemScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of redeemScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRedeemScriptString(  // line separate
      const PsbtOutputRequestData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.redeem_script_);
  }
  /**
   * @brief Set json object to redeemScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRedeemScriptString(  // line separate
      PsbtOutputRequestData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.redeem_script_, json_value);
  }

  /**
   * @brief Get of bip32Derives.
   * @return bip32Derives
   */
  JsonObjectVector<PsbtBip32PubkeyInput, PsbtBip32PubkeyInputStruct>& GetBip32Derives() {  // NOLINT
    return bip32_derives_;
  }
  /**
   * @brief Set to bip32Derives.
   * @param[in] bip32_derives    setting value.
   */
  void SetBip32Derives(  // line separate
      const JsonObjectVector<PsbtBip32PubkeyInput, PsbtBip32PubkeyInputStruct>& bip32_derives) {  // NOLINT
    this->bip32_derives_ = bip32_derives;
  }
  /**
   * @brief Get data type of bip32Derives.
   * @return Data type of bip32Derives.
   */
  static std::string GetBip32DerivesFieldType() {
    return "JsonObjectVector<PsbtBip32PubkeyInput, PsbtBip32PubkeyInputStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of bip32Derives field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetBip32DerivesString(  // line separate
      const PsbtOutputRequestData& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.bip32_derives_.Serialize();
  }
  /**
   * @brief Set json object to bip32Derives field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetBip32DerivesString(  // line separate
      PsbtOutputRequestData& obj,  // NOLINT
      const UniValue& json_value) {
    obj.bip32_derives_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of unknown.
   * @return unknown
   */
  JsonObjectVector<PsbtMapData, PsbtMapDataStruct>& GetUnknown() {  // NOLINT
    return unknown_;
  }
  /**
   * @brief Set to unknown.
   * @param[in] unknown    setting value.
   */
  void SetUnknown(  // line separate
      const JsonObjectVector<PsbtMapData, PsbtMapDataStruct>& unknown) {  // NOLINT
    this->unknown_ = unknown;
  }
  /**
   * @brief Get data type of unknown.
   * @return Data type of unknown.
   */
  static std::string GetUnknownFieldType() {
    return "JsonObjectVector<PsbtMapData, PsbtMapDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of unknown field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUnknownString(  // line separate
      const PsbtOutputRequestData& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.unknown_.Serialize();
  }
  /**
   * @brief Set json object to unknown field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUnknownString(  // line separate
      PsbtOutputRequestData& obj,  // NOLINT
      const UniValue& json_value) {
    obj.unknown_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtOutputRequestDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtOutputRequestDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtOutputRequestDataMapTable =
    cfd::core::JsonTableMap<PsbtOutputRequestData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtOutputRequestDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtOutputRequestDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(redeemScript) value
   */
  std::string redeem_script_ = "";
  /**
   * @brief JsonAPI(bip32Derives) value
   */
  JsonObjectVector<PsbtBip32PubkeyInput, PsbtBip32PubkeyInputStruct> bip32_derives_;  // NOLINT
  /**
   * @brief JsonAPI(unknown) value
   */
  JsonObjectVector<PsbtMapData, PsbtMapDataStruct> unknown_;  // NOLINT
};

// ------------------------------------------------------------------------
// PsbtScriptData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtScriptData) class
 */
class PsbtScriptData
  : public cfd::core::JsonClassBase<PsbtScriptData> {
 public:
  PsbtScriptData() {
    CollectFieldName();
  }
  virtual ~PsbtScriptData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of asm
   * @return asm
   */
  std::string GetAsm() const {
    return asm__;
  }
  /**
   * @brief Set to asm
   * @param[in] asm_    setting value.
   */
  void SetAsm(  // line separate
    const std::string& asm_) {  // NOLINT
    this->asm__ = asm_;
  }
  /**
   * @brief Get data type of asm
   * @return Data type of asm
   */
  static std::string GetAsmFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asm field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAsmString(  // line separate
      const PsbtScriptData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asm__);
  }
  /**
   * @brief Set json object to asm field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAsmString(  // line separate
      PsbtScriptData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asm__, json_value);
  }

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const PsbtScriptData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      PsbtScriptData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of type
   * @return type
   */
  std::string GetType() const {
    return type_;
  }
  /**
   * @brief Set to type
   * @param[in] type    setting value.
   */
  void SetType(  // line separate
    const std::string& type) {  // NOLINT
    this->type_ = type;
  }
  /**
   * @brief Get data type of type
   * @return Data type of type
   */
  static std::string GetTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of type field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTypeString(  // line separate
      const PsbtScriptData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.type_);
  }
  /**
   * @brief Set json object to type field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTypeString(  // line separate
      PsbtScriptData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.type_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtScriptDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtScriptDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtScriptDataMapTable =
    cfd::core::JsonTableMap<PsbtScriptData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtScriptDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtScriptDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(asm) value
   */
  std::string asm__ = "";
  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(type) value
   */
  std::string type_ = "";
};

// ------------------------------------------------------------------------
// PubkeySignData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PubkeySignData) class
 */
class PubkeySignData
  : public cfd::core::JsonClassBase<PubkeySignData> {
 public:
  PubkeySignData() {
    CollectFieldName();
  }
  virtual ~PubkeySignData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const PubkeySignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      PubkeySignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of type
   * @return type
   */
  std::string GetType() const {
    return type_;
  }
  /**
   * @brief Set to type
   * @param[in] type    setting value.
   */
  void SetType(  // line separate
    const std::string& type) {  // NOLINT
    this->type_ = type;
  }
  /**
   * @brief Get data type of type
   * @return Data type of type
   */
  static std::string GetTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of type field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTypeString(  // line separate
      const PubkeySignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.type_);
  }
  /**
   * @brief Set json object to type field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTypeString(  // line separate
      PubkeySignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.type_, json_value);
  }

  /**
   * @brief Get of derEncode
   * @return derEncode
   */
  bool GetDerEncode() const {
    return der_encode_;
  }
  /**
   * @brief Set to derEncode
   * @param[in] der_encode    setting value.
   */
  void SetDerEncode(  // line separate
    const bool& der_encode) {  // NOLINT
    this->der_encode_ = der_encode;
  }
  /**
   * @brief Get data type of derEncode
   * @return Data type of derEncode
   */
  static std::string GetDerEncodeFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of derEncode field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDerEncodeString(  // line separate
      const PubkeySignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.der_encode_);
  }
  /**
   * @brief Set json object to derEncode field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDerEncodeString(  // line separate
      PubkeySignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.der_encode_, json_value);
  }

  /**
   * @brief Get of sighashType
   * @return sighashType
   */
  std::string GetSighashType() const {
    return sighash_type_;
  }
  /**
   * @brief Set to sighashType
   * @param[in] sighash_type    setting value.
   */
  void SetSighashType(  // line separate
    const std::string& sighash_type) {  // NOLINT
    this->sighash_type_ = sighash_type;
  }
  /**
   * @brief Get data type of sighashType
   * @return Data type of sighashType
   */
  static std::string GetSighashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashTypeString(  // line separate
      const PubkeySignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_type_);
  }
  /**
   * @brief Set json object to sighashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashTypeString(  // line separate
      PubkeySignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_type_, json_value);
  }

  /**
   * @brief Get of sighashAnyoneCanPay
   * @return sighashAnyoneCanPay
   */
  bool GetSighashAnyoneCanPay() const {
    return sighash_anyone_can_pay_;
  }
  /**
   * @brief Set to sighashAnyoneCanPay
   * @param[in] sighash_anyone_can_pay    setting value.
   */
  void SetSighashAnyoneCanPay(  // line separate
    const bool& sighash_anyone_can_pay) {  // NOLINT
    this->sighash_anyone_can_pay_ = sighash_anyone_can_pay;
  }
  /**
   * @brief Get data type of sighashAnyoneCanPay
   * @return Data type of sighashAnyoneCanPay
   */
  static std::string GetSighashAnyoneCanPayFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashAnyoneCanPayString(  // line separate
      const PubkeySignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_anyone_can_pay_);
  }
  /**
   * @brief Set json object to sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashAnyoneCanPayString(  // line separate
      PubkeySignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_anyone_can_pay_, json_value);
  }

  /**
   * @brief Get of relatedPubkey
   * @return relatedPubkey
   */
  std::string GetRelatedPubkey() const {
    return related_pubkey_;
  }
  /**
   * @brief Set to relatedPubkey
   * @param[in] related_pubkey    setting value.
   */
  void SetRelatedPubkey(  // line separate
    const std::string& related_pubkey) {  // NOLINT
    this->related_pubkey_ = related_pubkey;
  }
  /**
   * @brief Get data type of relatedPubkey
   * @return Data type of relatedPubkey
   */
  static std::string GetRelatedPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of relatedPubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRelatedPubkeyString(  // line separate
      const PubkeySignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.related_pubkey_);
  }
  /**
   * @brief Set json object to relatedPubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRelatedPubkeyString(  // line separate
      PubkeySignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.related_pubkey_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PubkeySignDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PubkeySignDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PubkeySignDataMapTable =
    cfd::core::JsonTableMap<PubkeySignData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PubkeySignDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PubkeySignDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(type) value
   */
  std::string type_ = "sign";
  /**
   * @brief JsonAPI(derEncode) value
   */
  bool der_encode_ = true;
  /**
   * @brief JsonAPI(sighashType) value
   */
  std::string sighash_type_ = "all";
  /**
   * @brief JsonAPI(sighashAnyoneCanPay) value
   */
  bool sighash_anyone_can_pay_ = false;
  /**
   * @brief JsonAPI(relatedPubkey) value
   */
  std::string related_pubkey_ = "";
};

// ------------------------------------------------------------------------
// SignData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SignData) class
 */
class SignData
  : public cfd::core::JsonClassBase<SignData> {
 public:
  SignData() {
    CollectFieldName();
  }
  virtual ~SignData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const SignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      SignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of type
   * @return type
   */
  std::string GetType() const {
    return type_;
  }
  /**
   * @brief Set to type
   * @param[in] type    setting value.
   */
  void SetType(  // line separate
    const std::string& type) {  // NOLINT
    this->type_ = type;
  }
  /**
   * @brief Get data type of type
   * @return Data type of type
   */
  static std::string GetTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of type field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTypeString(  // line separate
      const SignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.type_);
  }
  /**
   * @brief Set json object to type field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTypeString(  // line separate
      SignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.type_, json_value);
  }

  /**
   * @brief Get of derEncode
   * @return derEncode
   */
  bool GetDerEncode() const {
    return der_encode_;
  }
  /**
   * @brief Set to derEncode
   * @param[in] der_encode    setting value.
   */
  void SetDerEncode(  // line separate
    const bool& der_encode) {  // NOLINT
    this->der_encode_ = der_encode;
  }
  /**
   * @brief Get data type of derEncode
   * @return Data type of derEncode
   */
  static std::string GetDerEncodeFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of derEncode field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDerEncodeString(  // line separate
      const SignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.der_encode_);
  }
  /**
   * @brief Set json object to derEncode field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDerEncodeString(  // line separate
      SignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.der_encode_, json_value);
  }

  /**
   * @brief Get of sighashType
   * @return sighashType
   */
  std::string GetSighashType() const {
    return sighash_type_;
  }
  /**
   * @brief Set to sighashType
   * @param[in] sighash_type    setting value.
   */
  void SetSighashType(  // line separate
    const std::string& sighash_type) {  // NOLINT
    this->sighash_type_ = sighash_type;
  }
  /**
   * @brief Get data type of sighashType
   * @return Data type of sighashType
   */
  static std::string GetSighashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashTypeString(  // line separate
      const SignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_type_);
  }
  /**
   * @brief Set json object to sighashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashTypeString(  // line separate
      SignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_type_, json_value);
  }

  /**
   * @brief Get of sighashAnyoneCanPay
   * @return sighashAnyoneCanPay
   */
  bool GetSighashAnyoneCanPay() const {
    return sighash_anyone_can_pay_;
  }
  /**
   * @brief Set to sighashAnyoneCanPay
   * @param[in] sighash_anyone_can_pay    setting value.
   */
  void SetSighashAnyoneCanPay(  // line separate
    const bool& sighash_anyone_can_pay) {  // NOLINT
    this->sighash_anyone_can_pay_ = sighash_anyone_can_pay;
  }
  /**
   * @brief Get data type of sighashAnyoneCanPay
   * @return Data type of sighashAnyoneCanPay
   */
  static std::string GetSighashAnyoneCanPayFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashAnyoneCanPayString(  // line separate
      const SignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_anyone_can_pay_);
  }
  /**
   * @brief Set json object to sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashAnyoneCanPayString(  // line separate
      SignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_anyone_can_pay_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SignDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SignDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SignDataMapTable =
    cfd::core::JsonTableMap<SignData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SignDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SignDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(type) value
   */
  std::string type_ = "auto";
  /**
   * @brief JsonAPI(derEncode) value
   */
  bool der_encode_ = false;
  /**
   * @brief JsonAPI(sighashType) value
   */
  std::string sighash_type_ = "all";
  /**
   * @brief JsonAPI(sighashAnyoneCanPay) value
   */
  bool sighash_anyone_can_pay_ = false;
};

// ------------------------------------------------------------------------
// TapScriptSignData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (TapScriptSignData) class
 */
class TapScriptSignData
  : public cfd::core::JsonClassBase<TapScriptSignData> {
 public:
  TapScriptSignData() {
    CollectFieldName();
  }
  virtual ~TapScriptSignData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const TapScriptSignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      TapScriptSignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of type
   * @return type
   */
  std::string GetType() const {
    return type_;
  }
  /**
   * @brief Set to type
   * @param[in] type    setting value.
   */
  void SetType(  // line separate
    const std::string& type) {  // NOLINT
    this->type_ = type;
  }
  /**
   * @brief Get data type of type
   * @return Data type of type
   */
  static std::string GetTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of type field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTypeString(  // line separate
      const TapScriptSignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.type_);
  }
  /**
   * @brief Set json object to type field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTypeString(  // line separate
      TapScriptSignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.type_, json_value);
  }

  /**
   * @brief Get of sighashType
   * @return sighashType
   */
  std::string GetSighashType() const {
    return sighash_type_;
  }
  /**
   * @brief Set to sighashType
   * @param[in] sighash_type    setting value.
   */
  void SetSighashType(  // line separate
    const std::string& sighash_type) {  // NOLINT
    this->sighash_type_ = sighash_type;
  }
  /**
   * @brief Get data type of sighashType
   * @return Data type of sighashType
   */
  static std::string GetSighashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashTypeString(  // line separate
      const TapScriptSignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_type_);
  }
  /**
   * @brief Set json object to sighashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashTypeString(  // line separate
      TapScriptSignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_type_, json_value);
  }

  /**
   * @brief Get of sighashAnyoneCanPay
   * @return sighashAnyoneCanPay
   */
  bool GetSighashAnyoneCanPay() const {
    return sighash_anyone_can_pay_;
  }
  /**
   * @brief Set to sighashAnyoneCanPay
   * @param[in] sighash_anyone_can_pay    setting value.
   */
  void SetSighashAnyoneCanPay(  // line separate
    const bool& sighash_anyone_can_pay) {  // NOLINT
    this->sighash_anyone_can_pay_ = sighash_anyone_can_pay;
  }
  /**
   * @brief Get data type of sighashAnyoneCanPay
   * @return Data type of sighashAnyoneCanPay
   */
  static std::string GetSighashAnyoneCanPayFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashAnyoneCanPayString(  // line separate
      const TapScriptSignData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_anyone_can_pay_);
  }
  /**
   * @brief Set json object to sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashAnyoneCanPayString(  // line separate
      TapScriptSignData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_anyone_can_pay_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const TapScriptSignDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  TapScriptSignDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using TapScriptSignDataMapTable =
    cfd::core::JsonTableMap<TapScriptSignData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const TapScriptSignDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static TapScriptSignDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(type) value
   */
  std::string type_ = "binary";
  /**
   * @brief JsonAPI(sighashType) value
   */
  std::string sighash_type_ = "default";
  /**
   * @brief JsonAPI(sighashAnyoneCanPay) value
   */
  bool sighash_anyone_can_pay_ = false;
};

// ------------------------------------------------------------------------
// TxInRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (TxInRequest) class
 */
class TxInRequest
  : public cfd::core::JsonClassBase<TxInRequest> {
 public:
  TxInRequest() {
    CollectFieldName();
  }
  virtual ~TxInRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const TxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      TxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const TxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      TxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of sequence
   * @return sequence
   */
  uint32_t GetSequence() const {
    return sequence_;
  }
  /**
   * @brief Set to sequence
   * @param[in] sequence    setting value.
   */
  void SetSequence(  // line separate
    const uint32_t& sequence) {  // NOLINT
    this->sequence_ = sequence;
  }
  /**
   * @brief Get data type of sequence
   * @return Data type of sequence
   */
  static std::string GetSequenceFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of sequence field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSequenceString(  // line separate
      const TxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sequence_);
  }
  /**
   * @brief Set json object to sequence field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSequenceString(  // line separate
      TxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sequence_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const TxInRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  TxInRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using TxInRequestMapTable =
    cfd::core::JsonTableMap<TxInRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const TxInRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static TxInRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(sequence) value
   */
  uint32_t sequence_ = 4294967295;
};

// ------------------------------------------------------------------------
// WitnessStackData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (WitnessStackData) class
 */
class WitnessStackData
  : public cfd::core::JsonClassBase<WitnessStackData> {
 public:
  WitnessStackData() {
    CollectFieldName();
  }
  virtual ~WitnessStackData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of index
   * @return index
   */
  uint32_t GetIndex() const {
    return index_;
  }
  /**
   * @brief Set to index
   * @param[in] index    setting value.
   */
  void SetIndex(  // line separate
    const uint32_t& index) {  // NOLINT
    this->index_ = index;
  }
  /**
   * @brief Get data type of index
   * @return Data type of index
   */
  static std::string GetIndexFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of index field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIndexString(  // line separate
      const WitnessStackData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.index_);
  }
  /**
   * @brief Set json object to index field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIndexString(  // line separate
      WitnessStackData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.index_, json_value);
  }

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const WitnessStackData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      WitnessStackData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of type
   * @return type
   */
  std::string GetType() const {
    return type_;
  }
  /**
   * @brief Set to type
   * @param[in] type    setting value.
   */
  void SetType(  // line separate
    const std::string& type) {  // NOLINT
    this->type_ = type;
  }
  /**
   * @brief Get data type of type
   * @return Data type of type
   */
  static std::string GetTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of type field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTypeString(  // line separate
      const WitnessStackData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.type_);
  }
  /**
   * @brief Set json object to type field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTypeString(  // line separate
      WitnessStackData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.type_, json_value);
  }

  /**
   * @brief Get of derEncode
   * @return derEncode
   */
  bool GetDerEncode() const {
    return der_encode_;
  }
  /**
   * @brief Set to derEncode
   * @param[in] der_encode    setting value.
   */
  void SetDerEncode(  // line separate
    const bool& der_encode) {  // NOLINT
    this->der_encode_ = der_encode;
  }
  /**
   * @brief Get data type of derEncode
   * @return Data type of derEncode
   */
  static std::string GetDerEncodeFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of derEncode field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDerEncodeString(  // line separate
      const WitnessStackData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.der_encode_);
  }
  /**
   * @brief Set json object to derEncode field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDerEncodeString(  // line separate
      WitnessStackData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.der_encode_, json_value);
  }

  /**
   * @brief Get of sighashType
   * @return sighashType
   */
  std::string GetSighashType() const {
    return sighash_type_;
  }
  /**
   * @brief Set to sighashType
   * @param[in] sighash_type    setting value.
   */
  void SetSighashType(  // line separate
    const std::string& sighash_type) {  // NOLINT
    this->sighash_type_ = sighash_type;
  }
  /**
   * @brief Get data type of sighashType
   * @return Data type of sighashType
   */
  static std::string GetSighashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashTypeString(  // line separate
      const WitnessStackData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_type_);
  }
  /**
   * @brief Set json object to sighashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashTypeString(  // line separate
      WitnessStackData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_type_, json_value);
  }

  /**
   * @brief Get of sighashAnyoneCanPay
   * @return sighashAnyoneCanPay
   */
  bool GetSighashAnyoneCanPay() const {
    return sighash_anyone_can_pay_;
  }
  /**
   * @brief Set to sighashAnyoneCanPay
   * @param[in] sighash_anyone_can_pay    setting value.
   */
  void SetSighashAnyoneCanPay(  // line separate
    const bool& sighash_anyone_can_pay) {  // NOLINT
    this->sighash_anyone_can_pay_ = sighash_anyone_can_pay;
  }
  /**
   * @brief Get data type of sighashAnyoneCanPay
   * @return Data type of sighashAnyoneCanPay
   */
  static std::string GetSighashAnyoneCanPayFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashAnyoneCanPayString(  // line separate
      const WitnessStackData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_anyone_can_pay_);
  }
  /**
   * @brief Set json object to sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashAnyoneCanPayString(  // line separate
      WitnessStackData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_anyone_can_pay_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const WitnessStackDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  WitnessStackDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using WitnessStackDataMapTable =
    cfd::core::JsonTableMap<WitnessStackData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const WitnessStackDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static WitnessStackDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(index) value
   */
  uint32_t index_ = 0;
  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(type) value
   */
  std::string type_ = "binary";
  /**
   * @brief JsonAPI(derEncode) value
   */
  bool der_encode_ = false;
  /**
   * @brief JsonAPI(sighashType) value
   */
  std::string sighash_type_ = "all";
  /**
   * @brief JsonAPI(sighashAnyoneCanPay) value
   */
  bool sighash_anyone_can_pay_ = false;
};

// ------------------------------------------------------------------------
// XpubData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (XpubData) class
 */
class XpubData
  : public cfd::core::JsonClassBase<XpubData> {
 public:
  XpubData() {
    CollectFieldName();
  }
  virtual ~XpubData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of base58
   * @return base58
   */
  std::string GetBase58() const {
    return base58_;
  }
  /**
   * @brief Set to base58
   * @param[in] base58    setting value.
   */
  void SetBase58(  // line separate
    const std::string& base58) {  // NOLINT
    this->base58_ = base58;
  }
  /**
   * @brief Get data type of base58
   * @return Data type of base58
   */
  static std::string GetBase58FieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of base58 field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBase58String(  // line separate
      const XpubData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.base58_);
  }
  /**
   * @brief Set json object to base58 field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBase58String(  // line separate
      XpubData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.base58_, json_value);
  }

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const XpubData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      XpubData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const XpubDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  XpubDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using XpubDataMapTable =
    cfd::core::JsonTableMap<XpubData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const XpubDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static XpubDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(base58) value
   */
  std::string base58_ = "";
  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
};

// ------------------------------------------------------------------------
// AddMultisigSignTxInRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AddMultisigSignTxInRequest) class
 */
class AddMultisigSignTxInRequest
  : public cfd::core::JsonClassBase<AddMultisigSignTxInRequest> {
 public:
  AddMultisigSignTxInRequest() {
    CollectFieldName();
  }
  virtual ~AddMultisigSignTxInRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const AddMultisigSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      AddMultisigSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const AddMultisigSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      AddMultisigSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of signParams.
   * @return signParams
   */
  JsonObjectVector<PubkeySignData, PubkeySignDataStruct>& GetSignParams() {  // NOLINT
    return sign_params_;
  }
  /**
   * @brief Set to signParams.
   * @param[in] sign_params    setting value.
   */
  void SetSignParams(  // line separate
      const JsonObjectVector<PubkeySignData, PubkeySignDataStruct>& sign_params) {  // NOLINT
    this->sign_params_ = sign_params;
  }
  /**
   * @brief Get data type of signParams.
   * @return Data type of signParams.
   */
  static std::string GetSignParamsFieldType() {
    return "JsonObjectVector<PubkeySignData, PubkeySignDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of signParams field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetSignParamsString(  // line separate
      const AddMultisigSignTxInRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.sign_params_.Serialize();
  }
  /**
   * @brief Set json object to signParams field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetSignParamsString(  // line separate
      AddMultisigSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.sign_params_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of redeemScript
   * @return redeemScript
   */
  std::string GetRedeemScript() const {
    return redeem_script_;
  }
  /**
   * @brief Set to redeemScript
   * @param[in] redeem_script    setting value.
   */
  void SetRedeemScript(  // line separate
    const std::string& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeemScript
   * @return Data type of redeemScript
   */
  static std::string GetRedeemScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of redeemScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRedeemScriptString(  // line separate
      const AddMultisigSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.redeem_script_);
  }
  /**
   * @brief Set json object to redeemScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRedeemScriptString(  // line separate
      AddMultisigSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.redeem_script_, json_value);
  }

  /**
   * @brief Get of witnessScript
   * @return witnessScript
   */
  std::string GetWitnessScript() const {
    return witness_script_;
  }
  /**
   * @brief Set to witnessScript
   * @param[in] witness_script    setting value.
   */
  void SetWitnessScript(  // line separate
    const std::string& witness_script) {  // NOLINT
    this->witness_script_ = witness_script;
  }
  /**
   * @brief Get data type of witnessScript
   * @return Data type of witnessScript
   */
  static std::string GetWitnessScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of witnessScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetWitnessScriptString(  // line separate
      const AddMultisigSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.witness_script_);
  }
  /**
   * @brief Set json object to witnessScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetWitnessScriptString(  // line separate
      AddMultisigSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.witness_script_, json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const AddMultisigSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      AddMultisigSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Get of clearStack
   * @return clearStack
   */
  bool GetClearStack() const {
    return clear_stack_;
  }
  /**
   * @brief Set to clearStack
   * @param[in] clear_stack    setting value.
   */
  void SetClearStack(  // line separate
    const bool& clear_stack) {  // NOLINT
    this->clear_stack_ = clear_stack;
  }
  /**
   * @brief Get data type of clearStack
   * @return Data type of clearStack
   */
  static std::string GetClearStackFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of clearStack field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetClearStackString(  // line separate
      const AddMultisigSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.clear_stack_);
  }
  /**
   * @brief Set json object to clearStack field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetClearStackString(  // line separate
      AddMultisigSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.clear_stack_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AddMultisigSignTxInRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AddMultisigSignTxInRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AddMultisigSignTxInRequestMapTable =
    cfd::core::JsonTableMap<AddMultisigSignTxInRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AddMultisigSignTxInRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AddMultisigSignTxInRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(signParams) value
   */
  JsonObjectVector<PubkeySignData, PubkeySignDataStruct> sign_params_;  // NOLINT
  /**
   * @brief JsonAPI(redeemScript) value
   */
  std::string redeem_script_ = "";
  /**
   * @brief JsonAPI(witnessScript) value
   */
  std::string witness_script_ = "";
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "";
  /**
   * @brief JsonAPI(clearStack) value
   */
  bool clear_stack_ = true;
};

// ------------------------------------------------------------------------
// AddPubkeyHashSignTxInRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AddPubkeyHashSignTxInRequest) class
 */
class AddPubkeyHashSignTxInRequest
  : public cfd::core::JsonClassBase<AddPubkeyHashSignTxInRequest> {
 public:
  AddPubkeyHashSignTxInRequest() {
    CollectFieldName();
  }
  virtual ~AddPubkeyHashSignTxInRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const AddPubkeyHashSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      AddPubkeyHashSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const AddPubkeyHashSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      AddPubkeyHashSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of signParam.
   * @return signParam
   */
  PubkeySignData& GetSignParam() {  // NOLINT
    return sign_param_;
  }
  /**
   * @brief Set to signParam.
   * @param[in] sign_param    setting value.
   */
  void SetSignParam(  // line separate
      const PubkeySignData& sign_param) {  // NOLINT
    this->sign_param_ = sign_param;
  }
  /**
   * @brief Get data type of signParam.
   * @return Data type of signParam.
   */
  static std::string GetSignParamFieldType() {
    return "PubkeySignData";  // NOLINT
  }
  /**
   * @brief Get json string of signParam field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetSignParamString(  // line separate
      const AddPubkeyHashSignTxInRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.sign_param_.Serialize();
  }
  /**
   * @brief Set json object to signParam field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetSignParamString(  // line separate
      AddPubkeyHashSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.sign_param_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const AddPubkeyHashSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      AddPubkeyHashSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const AddPubkeyHashSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      AddPubkeyHashSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AddPubkeyHashSignTxInRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AddPubkeyHashSignTxInRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AddPubkeyHashSignTxInRequestMapTable =
    cfd::core::JsonTableMap<AddPubkeyHashSignTxInRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AddPubkeyHashSignTxInRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AddPubkeyHashSignTxInRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(signParam) value
   */
  PubkeySignData sign_param_;  // NOLINT
  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "";
};

// ------------------------------------------------------------------------
// AddScriptHashSignTxInRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AddScriptHashSignTxInRequest) class
 */
class AddScriptHashSignTxInRequest
  : public cfd::core::JsonClassBase<AddScriptHashSignTxInRequest> {
 public:
  AddScriptHashSignTxInRequest() {
    CollectFieldName();
  }
  virtual ~AddScriptHashSignTxInRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const AddScriptHashSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      AddScriptHashSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const AddScriptHashSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      AddScriptHashSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of signParams.
   * @return signParams
   */
  JsonObjectVector<SignData, SignDataStruct>& GetSignParams() {  // NOLINT
    return sign_params_;
  }
  /**
   * @brief Set to signParams.
   * @param[in] sign_params    setting value.
   */
  void SetSignParams(  // line separate
      const JsonObjectVector<SignData, SignDataStruct>& sign_params) {  // NOLINT
    this->sign_params_ = sign_params;
  }
  /**
   * @brief Get data type of signParams.
   * @return Data type of signParams.
   */
  static std::string GetSignParamsFieldType() {
    return "JsonObjectVector<SignData, SignDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of signParams field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetSignParamsString(  // line separate
      const AddScriptHashSignTxInRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.sign_params_.Serialize();
  }
  /**
   * @brief Set json object to signParams field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetSignParamsString(  // line separate
      AddScriptHashSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.sign_params_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of signParam.
   * @return signParam
   */
  JsonObjectVector<SignData, SignDataStruct>& GetSignParam() {  // NOLINT
    return sign_param_;
  }
  /**
   * @brief Set to signParam.
   * @param[in] sign_param    setting value.
   */
  void SetSignParam(  // line separate
      const JsonObjectVector<SignData, SignDataStruct>& sign_param) {  // NOLINT
    this->sign_param_ = sign_param;
  }
  /**
   * @brief Get data type of signParam.
   * @return Data type of signParam.
   */
  static std::string GetSignParamFieldType() {
    return "JsonObjectVector<SignData, SignDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of signParam field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetSignParamString(  // line separate
      const AddScriptHashSignTxInRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.sign_param_.Serialize();
  }
  /**
   * @brief Set json object to signParam field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetSignParamString(  // line separate
      AddScriptHashSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.sign_param_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of redeemScript
   * @return redeemScript
   */
  std::string GetRedeemScript() const {
    return redeem_script_;
  }
  /**
   * @brief Set to redeemScript
   * @param[in] redeem_script    setting value.
   */
  void SetRedeemScript(  // line separate
    const std::string& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeemScript
   * @return Data type of redeemScript
   */
  static std::string GetRedeemScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of redeemScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRedeemScriptString(  // line separate
      const AddScriptHashSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.redeem_script_);
  }
  /**
   * @brief Set json object to redeemScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRedeemScriptString(  // line separate
      AddScriptHashSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.redeem_script_, json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const AddScriptHashSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      AddScriptHashSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AddScriptHashSignTxInRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AddScriptHashSignTxInRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AddScriptHashSignTxInRequestMapTable =
    cfd::core::JsonTableMap<AddScriptHashSignTxInRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AddScriptHashSignTxInRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AddScriptHashSignTxInRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(signParams) value
   */
  JsonObjectVector<SignData, SignDataStruct> sign_params_;  // NOLINT
  /**
   * @brief JsonAPI(signParam) value
   */
  JsonObjectVector<SignData, SignDataStruct> sign_param_;  // NOLINT
  /**
   * @brief JsonAPI(redeemScript) value
   */
  std::string redeem_script_ = "";
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "";
};

// ------------------------------------------------------------------------
// AddSignTxInRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AddSignTxInRequest) class
 */
class AddSignTxInRequest
  : public cfd::core::JsonClassBase<AddSignTxInRequest> {
 public:
  AddSignTxInRequest() {
    CollectFieldName();
  }
  virtual ~AddSignTxInRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const AddSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      AddSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const AddSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      AddSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of isWitness
   * @return isWitness
   */
  bool GetIsWitness() const {
    return is_witness_;
  }
  /**
   * @brief Set to isWitness
   * @param[in] is_witness    setting value.
   */
  void SetIsWitness(  // line separate
    const bool& is_witness) {  // NOLINT
    this->is_witness_ = is_witness;
  }
  /**
   * @brief Get data type of isWitness
   * @return Data type of isWitness
   */
  static std::string GetIsWitnessFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isWitness field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsWitnessString(  // line separate
      const AddSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_witness_);
  }
  /**
   * @brief Set json object to isWitness field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsWitnessString(  // line separate
      AddSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_witness_, json_value);
  }

  /**
   * @brief Get of signParams.
   * @return signParams
   */
  JsonObjectVector<SignData, SignDataStruct>& GetSignParams() {  // NOLINT
    return sign_params_;
  }
  /**
   * @brief Set to signParams.
   * @param[in] sign_params    setting value.
   */
  void SetSignParams(  // line separate
      const JsonObjectVector<SignData, SignDataStruct>& sign_params) {  // NOLINT
    this->sign_params_ = sign_params;
  }
  /**
   * @brief Get data type of signParams.
   * @return Data type of signParams.
   */
  static std::string GetSignParamsFieldType() {
    return "JsonObjectVector<SignData, SignDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of signParams field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetSignParamsString(  // line separate
      const AddSignTxInRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.sign_params_.Serialize();
  }
  /**
   * @brief Set json object to signParams field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetSignParamsString(  // line separate
      AddSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.sign_params_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of signParam.
   * @return signParam
   */
  JsonObjectVector<SignData, SignDataStruct>& GetSignParam() {  // NOLINT
    return sign_param_;
  }
  /**
   * @brief Set to signParam.
   * @param[in] sign_param    setting value.
   */
  void SetSignParam(  // line separate
      const JsonObjectVector<SignData, SignDataStruct>& sign_param) {  // NOLINT
    this->sign_param_ = sign_param;
  }
  /**
   * @brief Get data type of signParam.
   * @return Data type of signParam.
   */
  static std::string GetSignParamFieldType() {
    return "JsonObjectVector<SignData, SignDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of signParam field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetSignParamString(  // line separate
      const AddSignTxInRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.sign_param_.Serialize();
  }
  /**
   * @brief Set json object to signParam field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetSignParamString(  // line separate
      AddSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.sign_param_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of clearStack
   * @return clearStack
   */
  bool GetClearStack() const {
    return clear_stack_;
  }
  /**
   * @brief Set to clearStack
   * @param[in] clear_stack    setting value.
   */
  void SetClearStack(  // line separate
    const bool& clear_stack) {  // NOLINT
    this->clear_stack_ = clear_stack;
  }
  /**
   * @brief Get data type of clearStack
   * @return Data type of clearStack
   */
  static std::string GetClearStackFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of clearStack field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetClearStackString(  // line separate
      const AddSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.clear_stack_);
  }
  /**
   * @brief Set json object to clearStack field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetClearStackString(  // line separate
      AddSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.clear_stack_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AddSignTxInRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AddSignTxInRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AddSignTxInRequestMapTable =
    cfd::core::JsonTableMap<AddSignTxInRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AddSignTxInRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AddSignTxInRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(isWitness) value
   */
  bool is_witness_ = true;
  /**
   * @brief JsonAPI(signParams) value
   */
  JsonObjectVector<SignData, SignDataStruct> sign_params_;  // NOLINT
  /**
   * @brief JsonAPI(signParam) value
   */
  JsonObjectVector<SignData, SignDataStruct> sign_param_;  // NOLINT
  /**
   * @brief JsonAPI(clearStack) value
   */
  bool clear_stack_ = true;
};

// ------------------------------------------------------------------------
// AddTaprootSchnorrSignTxInRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AddTaprootSchnorrSignTxInRequest) class
 */
class AddTaprootSchnorrSignTxInRequest
  : public cfd::core::JsonClassBase<AddTaprootSchnorrSignTxInRequest> {
 public:
  AddTaprootSchnorrSignTxInRequest() {
    CollectFieldName();
  }
  virtual ~AddTaprootSchnorrSignTxInRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const AddTaprootSchnorrSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      AddTaprootSchnorrSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const AddTaprootSchnorrSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      AddTaprootSchnorrSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of signature
   * @return signature
   */
  std::string GetSignature() const {
    return signature_;
  }
  /**
   * @brief Set to signature
   * @param[in] signature    setting value.
   */
  void SetSignature(  // line separate
    const std::string& signature) {  // NOLINT
    this->signature_ = signature;
  }
  /**
   * @brief Get data type of signature
   * @return Data type of signature
   */
  static std::string GetSignatureFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of signature field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSignatureString(  // line separate
      const AddTaprootSchnorrSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.signature_);
  }
  /**
   * @brief Set json object to signature field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSignatureString(  // line separate
      AddTaprootSchnorrSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.signature_, json_value);
  }

  /**
   * @brief Get of sighashType
   * @return sighashType
   */
  std::string GetSighashType() const {
    return sighash_type_;
  }
  /**
   * @brief Set to sighashType
   * @param[in] sighash_type    setting value.
   */
  void SetSighashType(  // line separate
    const std::string& sighash_type) {  // NOLINT
    this->sighash_type_ = sighash_type;
  }
  /**
   * @brief Get data type of sighashType
   * @return Data type of sighashType
   */
  static std::string GetSighashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashTypeString(  // line separate
      const AddTaprootSchnorrSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_type_);
  }
  /**
   * @brief Set json object to sighashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashTypeString(  // line separate
      AddTaprootSchnorrSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_type_, json_value);
  }

  /**
   * @brief Get of sighashAnyoneCanPay
   * @return sighashAnyoneCanPay
   */
  bool GetSighashAnyoneCanPay() const {
    return sighash_anyone_can_pay_;
  }
  /**
   * @brief Set to sighashAnyoneCanPay
   * @param[in] sighash_anyone_can_pay    setting value.
   */
  void SetSighashAnyoneCanPay(  // line separate
    const bool& sighash_anyone_can_pay) {  // NOLINT
    this->sighash_anyone_can_pay_ = sighash_anyone_can_pay;
  }
  /**
   * @brief Get data type of sighashAnyoneCanPay
   * @return Data type of sighashAnyoneCanPay
   */
  static std::string GetSighashAnyoneCanPayFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashAnyoneCanPayString(  // line separate
      const AddTaprootSchnorrSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_anyone_can_pay_);
  }
  /**
   * @brief Set json object to sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashAnyoneCanPayString(  // line separate
      AddTaprootSchnorrSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_anyone_can_pay_, json_value);
  }

  /**
   * @brief Get of annex
   * @return annex
   */
  std::string GetAnnex() const {
    return annex_;
  }
  /**
   * @brief Set to annex
   * @param[in] annex    setting value.
   */
  void SetAnnex(  // line separate
    const std::string& annex) {  // NOLINT
    this->annex_ = annex;
  }
  /**
   * @brief Get data type of annex
   * @return Data type of annex
   */
  static std::string GetAnnexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of annex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAnnexString(  // line separate
      const AddTaprootSchnorrSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.annex_);
  }
  /**
   * @brief Set json object to annex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAnnexString(  // line separate
      AddTaprootSchnorrSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.annex_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AddTaprootSchnorrSignTxInRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AddTaprootSchnorrSignTxInRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AddTaprootSchnorrSignTxInRequestMapTable =
    cfd::core::JsonTableMap<AddTaprootSchnorrSignTxInRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AddTaprootSchnorrSignTxInRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AddTaprootSchnorrSignTxInRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(signature) value
   */
  std::string signature_ = "";
  /**
   * @brief JsonAPI(sighashType) value
   */
  std::string sighash_type_ = "default";
  /**
   * @brief JsonAPI(sighashAnyoneCanPay) value
   */
  bool sighash_anyone_can_pay_ = false;
  /**
   * @brief JsonAPI(annex) value
   */
  std::string annex_ = "";
};

// ------------------------------------------------------------------------
// AddTapscriptSignTxInRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AddTapscriptSignTxInRequest) class
 */
class AddTapscriptSignTxInRequest
  : public cfd::core::JsonClassBase<AddTapscriptSignTxInRequest> {
 public:
  AddTapscriptSignTxInRequest() {
    CollectFieldName();
  }
  virtual ~AddTapscriptSignTxInRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const AddTapscriptSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      AddTapscriptSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const AddTapscriptSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      AddTapscriptSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of signParams.
   * @return signParams
   */
  JsonObjectVector<TapScriptSignData, TapScriptSignDataStruct>& GetSignParams() {  // NOLINT
    return sign_params_;
  }
  /**
   * @brief Set to signParams.
   * @param[in] sign_params    setting value.
   */
  void SetSignParams(  // line separate
      const JsonObjectVector<TapScriptSignData, TapScriptSignDataStruct>& sign_params) {  // NOLINT
    this->sign_params_ = sign_params;
  }
  /**
   * @brief Get data type of signParams.
   * @return Data type of signParams.
   */
  static std::string GetSignParamsFieldType() {
    return "JsonObjectVector<TapScriptSignData, TapScriptSignDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of signParams field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetSignParamsString(  // line separate
      const AddTapscriptSignTxInRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.sign_params_.Serialize();
  }
  /**
   * @brief Set json object to signParams field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetSignParamsString(  // line separate
      AddTapscriptSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.sign_params_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of tapscript
   * @return tapscript
   */
  std::string GetTapscript() const {
    return tapscript_;
  }
  /**
   * @brief Set to tapscript
   * @param[in] tapscript    setting value.
   */
  void SetTapscript(  // line separate
    const std::string& tapscript) {  // NOLINT
    this->tapscript_ = tapscript;
  }
  /**
   * @brief Get data type of tapscript
   * @return Data type of tapscript
   */
  static std::string GetTapscriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tapscript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTapscriptString(  // line separate
      const AddTapscriptSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tapscript_);
  }
  /**
   * @brief Set json object to tapscript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTapscriptString(  // line separate
      AddTapscriptSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tapscript_, json_value);
  }

  /**
   * @brief Get of controlBlock
   * @return controlBlock
   */
  std::string GetControlBlock() const {
    return control_block_;
  }
  /**
   * @brief Set to controlBlock
   * @param[in] control_block    setting value.
   */
  void SetControlBlock(  // line separate
    const std::string& control_block) {  // NOLINT
    this->control_block_ = control_block;
  }
  /**
   * @brief Get data type of controlBlock
   * @return Data type of controlBlock
   */
  static std::string GetControlBlockFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of controlBlock field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetControlBlockString(  // line separate
      const AddTapscriptSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.control_block_);
  }
  /**
   * @brief Set json object to controlBlock field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetControlBlockString(  // line separate
      AddTapscriptSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.control_block_, json_value);
  }

  /**
   * @brief Get of annex
   * @return annex
   */
  std::string GetAnnex() const {
    return annex_;
  }
  /**
   * @brief Set to annex
   * @param[in] annex    setting value.
   */
  void SetAnnex(  // line separate
    const std::string& annex) {  // NOLINT
    this->annex_ = annex;
  }
  /**
   * @brief Get data type of annex
   * @return Data type of annex
   */
  static std::string GetAnnexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of annex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAnnexString(  // line separate
      const AddTapscriptSignTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.annex_);
  }
  /**
   * @brief Set json object to annex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAnnexString(  // line separate
      AddTapscriptSignTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.annex_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AddTapscriptSignTxInRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AddTapscriptSignTxInRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AddTapscriptSignTxInRequestMapTable =
    cfd::core::JsonTableMap<AddTapscriptSignTxInRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AddTapscriptSignTxInRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AddTapscriptSignTxInRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(signParams) value
   */
  JsonObjectVector<TapScriptSignData, TapScriptSignDataStruct> sign_params_;  // NOLINT
  /**
   * @brief JsonAPI(tapscript) value
   */
  std::string tapscript_ = "";
  /**
   * @brief JsonAPI(controlBlock) value
   */
  std::string control_block_ = "";
  /**
   * @brief JsonAPI(annex) value
   */
  std::string annex_ = "";
};

// ------------------------------------------------------------------------
// BlindIssuanceRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (BlindIssuanceRequest) class
 */
class BlindIssuanceRequest
  : public cfd::core::JsonClassBase<BlindIssuanceRequest> {
 public:
  BlindIssuanceRequest() {
    CollectFieldName();
  }
  virtual ~BlindIssuanceRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const BlindIssuanceRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      BlindIssuanceRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const BlindIssuanceRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      BlindIssuanceRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of assetBlindingKey
   * @return assetBlindingKey
   */
  std::string GetAssetBlindingKey() const {
    return asset_blinding_key_;
  }
  /**
   * @brief Set to assetBlindingKey
   * @param[in] asset_blinding_key    setting value.
   */
  void SetAssetBlindingKey(  // line separate
    const std::string& asset_blinding_key) {  // NOLINT
    this->asset_blinding_key_ = asset_blinding_key;
  }
  /**
   * @brief Get data type of assetBlindingKey
   * @return Data type of assetBlindingKey
   */
  static std::string GetAssetBlindingKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetBlindingKey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetBlindingKeyString(  // line separate
      const BlindIssuanceRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_blinding_key_);
  }
  /**
   * @brief Set json object to assetBlindingKey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetBlindingKeyString(  // line separate
      BlindIssuanceRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_blinding_key_, json_value);
  }

  /**
   * @brief Get of tokenBlindingKey
   * @return tokenBlindingKey
   */
  std::string GetTokenBlindingKey() const {
    return token_blinding_key_;
  }
  /**
   * @brief Set to tokenBlindingKey
   * @param[in] token_blinding_key    setting value.
   */
  void SetTokenBlindingKey(  // line separate
    const std::string& token_blinding_key) {  // NOLINT
    this->token_blinding_key_ = token_blinding_key;
  }
  /**
   * @brief Get data type of tokenBlindingKey
   * @return Data type of tokenBlindingKey
   */
  static std::string GetTokenBlindingKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tokenBlindingKey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTokenBlindingKeyString(  // line separate
      const BlindIssuanceRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.token_blinding_key_);
  }
  /**
   * @brief Set json object to tokenBlindingKey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTokenBlindingKeyString(  // line separate
      BlindIssuanceRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.token_blinding_key_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const BlindIssuanceRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  BlindIssuanceRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using BlindIssuanceRequestMapTable =
    cfd::core::JsonTableMap<BlindIssuanceRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const BlindIssuanceRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static BlindIssuanceRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(assetBlindingKey) value
   */
  std::string asset_blinding_key_ = "";
  /**
   * @brief JsonAPI(tokenBlindingKey) value
   */
  std::string token_blinding_key_ = "";
};

// ------------------------------------------------------------------------
// BlindTxInRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (BlindTxInRequest) class
 */
class BlindTxInRequest
  : public cfd::core::JsonClassBase<BlindTxInRequest> {
 public:
  BlindTxInRequest() {
    CollectFieldName();
  }
  virtual ~BlindTxInRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const BlindTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      BlindTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const BlindTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      BlindTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const BlindTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      BlindTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of blindFactor
   * @return blindFactor
   */
  std::string GetBlindFactor() const {
    return blind_factor_;
  }
  /**
   * @brief Set to blindFactor
   * @param[in] blind_factor    setting value.
   */
  void SetBlindFactor(  // line separate
    const std::string& blind_factor) {  // NOLINT
    this->blind_factor_ = blind_factor;
  }
  /**
   * @brief Get data type of blindFactor
   * @return Data type of blindFactor
   */
  static std::string GetBlindFactorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of blindFactor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBlindFactorString(  // line separate
      const BlindTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.blind_factor_);
  }
  /**
   * @brief Set json object to blindFactor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBlindFactorString(  // line separate
      BlindTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.blind_factor_, json_value);
  }

  /**
   * @brief Get of assetBlindFactor
   * @return assetBlindFactor
   */
  std::string GetAssetBlindFactor() const {
    return asset_blind_factor_;
  }
  /**
   * @brief Set to assetBlindFactor
   * @param[in] asset_blind_factor    setting value.
   */
  void SetAssetBlindFactor(  // line separate
    const std::string& asset_blind_factor) {  // NOLINT
    this->asset_blind_factor_ = asset_blind_factor;
  }
  /**
   * @brief Get data type of assetBlindFactor
   * @return Data type of assetBlindFactor
   */
  static std::string GetAssetBlindFactorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetBlindFactor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetBlindFactorString(  // line separate
      const BlindTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_blind_factor_);
  }
  /**
   * @brief Set json object to assetBlindFactor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetBlindFactorString(  // line separate
      BlindTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_blind_factor_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const BlindTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      BlindTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const BlindTxInRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  BlindTxInRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using BlindTxInRequestMapTable =
    cfd::core::JsonTableMap<BlindTxInRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const BlindTxInRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static BlindTxInRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(blindFactor) value
   */
  std::string blind_factor_ = "";
  /**
   * @brief JsonAPI(assetBlindFactor) value
   */
  std::string asset_blind_factor_ = "";
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
};

// ------------------------------------------------------------------------
// BlindTxOutRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (BlindTxOutRequest) class
 */
class BlindTxOutRequest
  : public cfd::core::JsonClassBase<BlindTxOutRequest> {
 public:
  BlindTxOutRequest() {
    CollectFieldName();
  }
  virtual ~BlindTxOutRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of index
   * @return index
   */
  uint32_t GetIndex() const {
    return index_;
  }
  /**
   * @brief Set to index
   * @param[in] index    setting value.
   */
  void SetIndex(  // line separate
    const uint32_t& index) {  // NOLINT
    this->index_ = index;
  }
  /**
   * @brief Get data type of index
   * @return Data type of index
   */
  static std::string GetIndexFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of index field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIndexString(  // line separate
      const BlindTxOutRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.index_);
  }
  /**
   * @brief Set json object to index field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIndexString(  // line separate
      BlindTxOutRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.index_, json_value);
  }

  /**
   * @brief Get of confidentialKey
   * @return confidentialKey
   */
  std::string GetConfidentialKey() const {
    return confidential_key_;
  }
  /**
   * @brief Set to confidentialKey
   * @param[in] confidential_key    setting value.
   */
  void SetConfidentialKey(  // line separate
    const std::string& confidential_key) {  // NOLINT
    this->confidential_key_ = confidential_key;
  }
  /**
   * @brief Get data type of confidentialKey
   * @return Data type of confidentialKey
   */
  static std::string GetConfidentialKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of confidentialKey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetConfidentialKeyString(  // line separate
      const BlindTxOutRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.confidential_key_);
  }
  /**
   * @brief Set json object to confidentialKey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetConfidentialKeyString(  // line separate
      BlindTxOutRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.confidential_key_, json_value);
  }

  /**
   * @brief Get of blindPubkey
   * @return blindPubkey
   */
  std::string GetBlindPubkey() const {
    return blind_pubkey_;
  }
  /**
   * @brief Set to blindPubkey
   * @param[in] blind_pubkey    setting value.
   */
  void SetBlindPubkey(  // line separate
    const std::string& blind_pubkey) {  // NOLINT
    this->blind_pubkey_ = blind_pubkey;
  }
  /**
   * @brief Get data type of blindPubkey
   * @return Data type of blindPubkey
   */
  static std::string GetBlindPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of blindPubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBlindPubkeyString(  // line separate
      const BlindTxOutRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.blind_pubkey_);
  }
  /**
   * @brief Set json object to blindPubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBlindPubkeyString(  // line separate
      BlindTxOutRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.blind_pubkey_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const BlindTxOutRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  BlindTxOutRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using BlindTxOutRequestMapTable =
    cfd::core::JsonTableMap<BlindTxOutRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const BlindTxOutRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static BlindTxOutRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(index) value
   */
  uint32_t index_ = 0;
  /**
   * @brief JsonAPI(confidentialKey) value
   */
  std::string confidential_key_ = "";
  /**
   * @brief JsonAPI(blindPubkey) value
   */
  std::string blind_pubkey_ = "";
};

// ------------------------------------------------------------------------
// CoinSelectionFeeInformationField
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CoinSelectionFeeInformationField) class
 */
class CoinSelectionFeeInformationField
  : public cfd::core::JsonClassBase<CoinSelectionFeeInformationField> {
 public:
  CoinSelectionFeeInformationField() {
    CollectFieldName();
  }
  virtual ~CoinSelectionFeeInformationField() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txFeeAmount
   * @return txFeeAmount
   */
  int64_t GetTxFeeAmount() const {
    return tx_fee_amount_;
  }
  /**
   * @brief Set to txFeeAmount
   * @param[in] tx_fee_amount    setting value.
   */
  void SetTxFeeAmount(  // line separate
    const int64_t& tx_fee_amount) {  // NOLINT
    this->tx_fee_amount_ = tx_fee_amount;
  }
  /**
   * @brief Get data type of txFeeAmount
   * @return Data type of txFeeAmount
   */
  static std::string GetTxFeeAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of txFeeAmount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxFeeAmountString(  // line separate
      const CoinSelectionFeeInformationField& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_fee_amount_);
  }
  /**
   * @brief Set json object to txFeeAmount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxFeeAmountString(  // line separate
      CoinSelectionFeeInformationField& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_fee_amount_, json_value);
  }

  /**
   * @brief Get of feeRate
   * @return feeRate
   */
  double GetFeeRate() const {
    return fee_rate_;
  }
  /**
   * @brief Set to feeRate
   * @param[in] fee_rate    setting value.
   */
  void SetFeeRate(  // line separate
    const double& fee_rate) {  // NOLINT
    this->fee_rate_ = fee_rate;
  }
  /**
   * @brief Get data type of feeRate
   * @return Data type of feeRate
   */
  static std::string GetFeeRateFieldType() {
    return "double";
  }
  /**
   * @brief Get json string of feeRate field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFeeRateString(  // line separate
      const CoinSelectionFeeInformationField& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fee_rate_);
  }
  /**
   * @brief Set json object to feeRate field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFeeRateString(  // line separate
      CoinSelectionFeeInformationField& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fee_rate_, json_value);
  }

  /**
   * @brief Get of longTermFeeRate
   * @return longTermFeeRate
   */
  double GetLongTermFeeRate() const {
    return long_term_fee_rate_;
  }
  /**
   * @brief Set to longTermFeeRate
   * @param[in] long_term_fee_rate    setting value.
   */
  void SetLongTermFeeRate(  // line separate
    const double& long_term_fee_rate) {  // NOLINT
    this->long_term_fee_rate_ = long_term_fee_rate;
  }
  /**
   * @brief Get data type of longTermFeeRate
   * @return Data type of longTermFeeRate
   */
  static std::string GetLongTermFeeRateFieldType() {
    return "double";
  }
  /**
   * @brief Get json string of longTermFeeRate field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLongTermFeeRateString(  // line separate
      const CoinSelectionFeeInformationField& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.long_term_fee_rate_);
  }
  /**
   * @brief Set json object to longTermFeeRate field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLongTermFeeRateString(  // line separate
      CoinSelectionFeeInformationField& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.long_term_fee_rate_, json_value);
  }

  /**
   * @brief Get of knapsackMinChange
   * @return knapsackMinChange
   */
  int32_t GetKnapsackMinChange() const {
    return knapsack_min_change_;
  }
  /**
   * @brief Set to knapsackMinChange
   * @param[in] knapsack_min_change    setting value.
   */
  void SetKnapsackMinChange(  // line separate
    const int32_t& knapsack_min_change) {  // NOLINT
    this->knapsack_min_change_ = knapsack_min_change;
  }
  /**
   * @brief Get data type of knapsackMinChange
   * @return Data type of knapsackMinChange
   */
  static std::string GetKnapsackMinChangeFieldType() {
    return "int32_t";
  }
  /**
   * @brief Get json string of knapsackMinChange field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetKnapsackMinChangeString(  // line separate
      const CoinSelectionFeeInformationField& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.knapsack_min_change_);
  }
  /**
   * @brief Set json object to knapsackMinChange field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetKnapsackMinChangeString(  // line separate
      CoinSelectionFeeInformationField& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.knapsack_min_change_, json_value);
  }

  /**
   * @brief Get of feeAsset
   * @return feeAsset
   */
  std::string GetFeeAsset() const {
    return fee_asset_;
  }
  /**
   * @brief Set to feeAsset
   * @param[in] fee_asset    setting value.
   */
  void SetFeeAsset(  // line separate
    const std::string& fee_asset) {  // NOLINT
    this->fee_asset_ = fee_asset;
  }
  /**
   * @brief Get data type of feeAsset
   * @return Data type of feeAsset
   */
  static std::string GetFeeAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of feeAsset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFeeAssetString(  // line separate
      const CoinSelectionFeeInformationField& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fee_asset_);
  }
  /**
   * @brief Set json object to feeAsset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFeeAssetString(  // line separate
      CoinSelectionFeeInformationField& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fee_asset_, json_value);
  }

  /**
   * @brief Get of exponent
   * @return exponent
   */
  int GetExponent() const {
    return exponent_;
  }
  /**
   * @brief Set to exponent
   * @param[in] exponent    setting value.
   */
  void SetExponent(  // line separate
    const int& exponent) {  // NOLINT
    this->exponent_ = exponent;
  }
  /**
   * @brief Get data type of exponent
   * @return Data type of exponent
   */
  static std::string GetExponentFieldType() {
    return "int";
  }
  /**
   * @brief Get json string of exponent field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExponentString(  // line separate
      const CoinSelectionFeeInformationField& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.exponent_);
  }
  /**
   * @brief Set json object to exponent field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExponentString(  // line separate
      CoinSelectionFeeInformationField& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.exponent_, json_value);
  }

  /**
   * @brief Get of minimumBits
   * @return minimumBits
   */
  int GetMinimumBits() const {
    return minimum_bits_;
  }
  /**
   * @brief Set to minimumBits
   * @param[in] minimum_bits    setting value.
   */
  void SetMinimumBits(  // line separate
    const int& minimum_bits) {  // NOLINT
    this->minimum_bits_ = minimum_bits;
  }
  /**
   * @brief Get data type of minimumBits
   * @return Data type of minimumBits
   */
  static std::string GetMinimumBitsFieldType() {
    return "int";
  }
  /**
   * @brief Get json string of minimumBits field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMinimumBitsString(  // line separate
      const CoinSelectionFeeInformationField& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.minimum_bits_);
  }
  /**
   * @brief Set json object to minimumBits field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMinimumBitsString(  // line separate
      CoinSelectionFeeInformationField& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.minimum_bits_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CoinSelectionFeeInformationFieldStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CoinSelectionFeeInformationFieldStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CoinSelectionFeeInformationFieldMapTable =
    cfd::core::JsonTableMap<CoinSelectionFeeInformationField>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CoinSelectionFeeInformationFieldMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CoinSelectionFeeInformationFieldMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txFeeAmount) value
   */
  int64_t tx_fee_amount_ = 0;
  /**
   * @brief JsonAPI(feeRate) value
   */
  double fee_rate_ = 20;
  /**
   * @brief JsonAPI(longTermFeeRate) value
   */
  double long_term_fee_rate_ = 20;
  /**
   * @brief JsonAPI(knapsackMinChange) value
   */
  int32_t knapsack_min_change_ = -1;
  /**
   * @brief JsonAPI(feeAsset) value
   */
  std::string fee_asset_ = "";
  /**
   * @brief JsonAPI(exponent) value
   */
  int exponent_ = 0;
  /**
   * @brief JsonAPI(minimumBits) value
   */
  int minimum_bits_ = 52;
};

// ------------------------------------------------------------------------
// CreateDescriptorKeyRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateDescriptorKeyRequest) class
 */
class CreateDescriptorKeyRequest
  : public cfd::core::JsonClassBase<CreateDescriptorKeyRequest> {
 public:
  CreateDescriptorKeyRequest() {
    CollectFieldName();
  }
  virtual ~CreateDescriptorKeyRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of key
   * @return key
   */
  std::string GetKey() const {
    return key_;
  }
  /**
   * @brief Set to key
   * @param[in] key    setting value.
   */
  void SetKey(  // line separate
    const std::string& key) {  // NOLINT
    this->key_ = key;
  }
  /**
   * @brief Get data type of key
   * @return Data type of key
   */
  static std::string GetKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of key field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetKeyString(  // line separate
      const CreateDescriptorKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.key_);
  }
  /**
   * @brief Set json object to key field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetKeyString(  // line separate
      CreateDescriptorKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.key_, json_value);
  }

  /**
   * @brief Get of parentExtkey
   * @return parentExtkey
   */
  std::string GetParentExtkey() const {
    return parent_extkey_;
  }
  /**
   * @brief Set to parentExtkey
   * @param[in] parent_extkey    setting value.
   */
  void SetParentExtkey(  // line separate
    const std::string& parent_extkey) {  // NOLINT
    this->parent_extkey_ = parent_extkey;
  }
  /**
   * @brief Get data type of parentExtkey
   * @return Data type of parentExtkey
   */
  static std::string GetParentExtkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of parentExtkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetParentExtkeyString(  // line separate
      const CreateDescriptorKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.parent_extkey_);
  }
  /**
   * @brief Set json object to parentExtkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetParentExtkeyString(  // line separate
      CreateDescriptorKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.parent_extkey_, json_value);
  }

  /**
   * @brief Get of keyPathFromParent
   * @return keyPathFromParent
   */
  std::string GetKeyPathFromParent() const {
    return key_path_from_parent_;
  }
  /**
   * @brief Set to keyPathFromParent
   * @param[in] key_path_from_parent    setting value.
   */
  void SetKeyPathFromParent(  // line separate
    const std::string& key_path_from_parent) {  // NOLINT
    this->key_path_from_parent_ = key_path_from_parent;
  }
  /**
   * @brief Get data type of keyPathFromParent
   * @return Data type of keyPathFromParent
   */
  static std::string GetKeyPathFromParentFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of keyPathFromParent field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetKeyPathFromParentString(  // line separate
      const CreateDescriptorKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.key_path_from_parent_);
  }
  /**
   * @brief Set json object to keyPathFromParent field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetKeyPathFromParentString(  // line separate
      CreateDescriptorKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.key_path_from_parent_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateDescriptorKeyRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateDescriptorKeyRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateDescriptorKeyRequestMapTable =
    cfd::core::JsonTableMap<CreateDescriptorKeyRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateDescriptorKeyRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateDescriptorKeyRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(key) value
   */
  std::string key_ = "";
  /**
   * @brief JsonAPI(parentExtkey) value
   */
  std::string parent_extkey_ = "";
  /**
   * @brief JsonAPI(keyPathFromParent) value
   */
  std::string key_path_from_parent_ = "";
};

// ------------------------------------------------------------------------
// CreateElementsSignatureHashTxIn
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateElementsSignatureHashTxIn) class
 */
class CreateElementsSignatureHashTxIn
  : public cfd::core::JsonClassBase<CreateElementsSignatureHashTxIn> {
 public:
  CreateElementsSignatureHashTxIn() {
    CollectFieldName();
  }
  virtual ~CreateElementsSignatureHashTxIn() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const CreateElementsSignatureHashTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      CreateElementsSignatureHashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const CreateElementsSignatureHashTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      CreateElementsSignatureHashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of keyData.
   * @return keyData
   */
  HashKeyData& GetKeyData() {  // NOLINT
    return key_data_;
  }
  /**
   * @brief Set to keyData.
   * @param[in] key_data    setting value.
   */
  void SetKeyData(  // line separate
      const HashKeyData& key_data) {  // NOLINT
    this->key_data_ = key_data;
  }
  /**
   * @brief Get data type of keyData.
   * @return Data type of keyData.
   */
  static std::string GetKeyDataFieldType() {
    return "HashKeyData";  // NOLINT
  }
  /**
   * @brief Get json string of keyData field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetKeyDataString(  // line separate
      const CreateElementsSignatureHashTxIn& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.key_data_.Serialize();
  }
  /**
   * @brief Set json object to keyData field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetKeyDataString(  // line separate
      CreateElementsSignatureHashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    obj.key_data_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const CreateElementsSignatureHashTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      CreateElementsSignatureHashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of confidentialValueCommitment
   * @return confidentialValueCommitment
   */
  std::string GetConfidentialValueCommitment() const {
    return confidential_value_commitment_;
  }
  /**
   * @brief Set to confidentialValueCommitment
   * @param[in] confidential_value_commitment    setting value.
   */
  void SetConfidentialValueCommitment(  // line separate
    const std::string& confidential_value_commitment) {  // NOLINT
    this->confidential_value_commitment_ = confidential_value_commitment;
  }
  /**
   * @brief Get data type of confidentialValueCommitment
   * @return Data type of confidentialValueCommitment
   */
  static std::string GetConfidentialValueCommitmentFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of confidentialValueCommitment field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetConfidentialValueCommitmentString(  // line separate
      const CreateElementsSignatureHashTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.confidential_value_commitment_);
  }
  /**
   * @brief Set json object to confidentialValueCommitment field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetConfidentialValueCommitmentString(  // line separate
      CreateElementsSignatureHashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.confidential_value_commitment_, json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const CreateElementsSignatureHashTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      CreateElementsSignatureHashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Get of sighashType
   * @return sighashType
   */
  std::string GetSighashType() const {
    return sighash_type_;
  }
  /**
   * @brief Set to sighashType
   * @param[in] sighash_type    setting value.
   */
  void SetSighashType(  // line separate
    const std::string& sighash_type) {  // NOLINT
    this->sighash_type_ = sighash_type;
  }
  /**
   * @brief Get data type of sighashType
   * @return Data type of sighashType
   */
  static std::string GetSighashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashTypeString(  // line separate
      const CreateElementsSignatureHashTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_type_);
  }
  /**
   * @brief Set json object to sighashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashTypeString(  // line separate
      CreateElementsSignatureHashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_type_, json_value);
  }

  /**
   * @brief Get of sighashAnyoneCanPay
   * @return sighashAnyoneCanPay
   */
  bool GetSighashAnyoneCanPay() const {
    return sighash_anyone_can_pay_;
  }
  /**
   * @brief Set to sighashAnyoneCanPay
   * @param[in] sighash_anyone_can_pay    setting value.
   */
  void SetSighashAnyoneCanPay(  // line separate
    const bool& sighash_anyone_can_pay) {  // NOLINT
    this->sighash_anyone_can_pay_ = sighash_anyone_can_pay;
  }
  /**
   * @brief Get data type of sighashAnyoneCanPay
   * @return Data type of sighashAnyoneCanPay
   */
  static std::string GetSighashAnyoneCanPayFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashAnyoneCanPayString(  // line separate
      const CreateElementsSignatureHashTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_anyone_can_pay_);
  }
  /**
   * @brief Set json object to sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashAnyoneCanPayString(  // line separate
      CreateElementsSignatureHashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_anyone_can_pay_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateElementsSignatureHashTxInStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateElementsSignatureHashTxInStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateElementsSignatureHashTxInMapTable =
    cfd::core::JsonTableMap<CreateElementsSignatureHashTxIn>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateElementsSignatureHashTxInMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateElementsSignatureHashTxInMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(keyData) value
   */
  HashKeyData key_data_;  // NOLINT
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(confidentialValueCommitment) value
   */
  std::string confidential_value_commitment_ = "";
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "p2wsh";
  /**
   * @brief JsonAPI(sighashType) value
   */
  std::string sighash_type_ = "all";
  /**
   * @brief JsonAPI(sighashAnyoneCanPay) value
   */
  bool sighash_anyone_can_pay_ = false;
};

// ------------------------------------------------------------------------
// CreateSignatureHashTxInRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateSignatureHashTxInRequest) class
 */
class CreateSignatureHashTxInRequest
  : public cfd::core::JsonClassBase<CreateSignatureHashTxInRequest> {
 public:
  CreateSignatureHashTxInRequest() {
    CollectFieldName();
  }
  virtual ~CreateSignatureHashTxInRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const CreateSignatureHashTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      CreateSignatureHashTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const CreateSignatureHashTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      CreateSignatureHashTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of keyData.
   * @return keyData
   */
  HashKeyData& GetKeyData() {  // NOLINT
    return key_data_;
  }
  /**
   * @brief Set to keyData.
   * @param[in] key_data    setting value.
   */
  void SetKeyData(  // line separate
      const HashKeyData& key_data) {  // NOLINT
    this->key_data_ = key_data;
  }
  /**
   * @brief Get data type of keyData.
   * @return Data type of keyData.
   */
  static std::string GetKeyDataFieldType() {
    return "HashKeyData";  // NOLINT
  }
  /**
   * @brief Get json string of keyData field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetKeyDataString(  // line separate
      const CreateSignatureHashTxInRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.key_data_.Serialize();
  }
  /**
   * @brief Set json object to keyData field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetKeyDataString(  // line separate
      CreateSignatureHashTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.key_data_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const CreateSignatureHashTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      CreateSignatureHashTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const CreateSignatureHashTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      CreateSignatureHashTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Get of sighashType
   * @return sighashType
   */
  std::string GetSighashType() const {
    return sighash_type_;
  }
  /**
   * @brief Set to sighashType
   * @param[in] sighash_type    setting value.
   */
  void SetSighashType(  // line separate
    const std::string& sighash_type) {  // NOLINT
    this->sighash_type_ = sighash_type;
  }
  /**
   * @brief Get data type of sighashType
   * @return Data type of sighashType
   */
  static std::string GetSighashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashTypeString(  // line separate
      const CreateSignatureHashTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_type_);
  }
  /**
   * @brief Set json object to sighashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashTypeString(  // line separate
      CreateSignatureHashTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_type_, json_value);
  }

  /**
   * @brief Get of sighashAnyoneCanPay
   * @return sighashAnyoneCanPay
   */
  bool GetSighashAnyoneCanPay() const {
    return sighash_anyone_can_pay_;
  }
  /**
   * @brief Set to sighashAnyoneCanPay
   * @param[in] sighash_anyone_can_pay    setting value.
   */
  void SetSighashAnyoneCanPay(  // line separate
    const bool& sighash_anyone_can_pay) {  // NOLINT
    this->sighash_anyone_can_pay_ = sighash_anyone_can_pay;
  }
  /**
   * @brief Get data type of sighashAnyoneCanPay
   * @return Data type of sighashAnyoneCanPay
   */
  static std::string GetSighashAnyoneCanPayFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashAnyoneCanPayString(  // line separate
      const CreateSignatureHashTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_anyone_can_pay_);
  }
  /**
   * @brief Set json object to sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashAnyoneCanPayString(  // line separate
      CreateSignatureHashTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_anyone_can_pay_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateSignatureHashTxInRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateSignatureHashTxInRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateSignatureHashTxInRequestMapTable =
    cfd::core::JsonTableMap<CreateSignatureHashTxInRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateSignatureHashTxInRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateSignatureHashTxInRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(keyData) value
   */
  HashKeyData key_data_;  // NOLINT
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "p2wsh";
  /**
   * @brief JsonAPI(sighashType) value
   */
  std::string sighash_type_ = "all";
  /**
   * @brief JsonAPI(sighashAnyoneCanPay) value
   */
  bool sighash_anyone_can_pay_ = false;
};

// ------------------------------------------------------------------------
// DecodePsbtInput
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodePsbtInput) class
 */
class DecodePsbtInput
  : public cfd::core::JsonClassBase<DecodePsbtInput> {
 public:
  DecodePsbtInput() {
    CollectFieldName();
  }
  virtual ~DecodePsbtInput() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of non_witness_utxo_hex
   * @return non_witness_utxo_hex
   */
  std::string GetNon_witness_utxo_hex() const {
    return non_witness_utxo_hex_;
  }
  /**
   * @brief Set to non_witness_utxo_hex
   * @param[in] non_witness_utxo_hex    setting value.
   */
  void SetNon_witness_utxo_hex(  // line separate
    const std::string& non_witness_utxo_hex) {  // NOLINT
    this->non_witness_utxo_hex_ = non_witness_utxo_hex;
  }
  /**
   * @brief Get data type of non_witness_utxo_hex
   * @return Data type of non_witness_utxo_hex
   */
  static std::string GetNon_witness_utxo_hexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of non_witness_utxo_hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNon_witness_utxo_hexString(  // line separate
      const DecodePsbtInput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.non_witness_utxo_hex_);
  }
  /**
   * @brief Set json object to non_witness_utxo_hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNon_witness_utxo_hexString(  // line separate
      DecodePsbtInput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.non_witness_utxo_hex_, json_value);
  }

  /**
   * @brief Get of non_witness_utxo.
   * @return non_witness_utxo
   */
  DecodeRawTransactionResponse& GetNon_witness_utxo() {  // NOLINT
    return non_witness_utxo_;
  }
  /**
   * @brief Set to non_witness_utxo.
   * @param[in] non_witness_utxo    setting value.
   */
  void SetNon_witness_utxo(  // line separate
      const DecodeRawTransactionResponse& non_witness_utxo) {  // NOLINT
    this->non_witness_utxo_ = non_witness_utxo;
  }
  /**
   * @brief Get data type of non_witness_utxo.
   * @return Data type of non_witness_utxo.
   */
  static std::string GetNon_witness_utxoFieldType() {
    return "DecodeRawTransactionResponse";  // NOLINT
  }
  /**
   * @brief Get json string of non_witness_utxo field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetNon_witness_utxoString(  // line separate
      const DecodePsbtInput& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.non_witness_utxo_.Serialize();
  }
  /**
   * @brief Set json object to non_witness_utxo field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetNon_witness_utxoString(  // line separate
      DecodePsbtInput& obj,  // NOLINT
      const UniValue& json_value) {
    obj.non_witness_utxo_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of witness_utxo.
   * @return witness_utxo
   */
  DecodePsbtUtxo& GetWitness_utxo() {  // NOLINT
    return witness_utxo_;
  }
  /**
   * @brief Set to witness_utxo.
   * @param[in] witness_utxo    setting value.
   */
  void SetWitness_utxo(  // line separate
      const DecodePsbtUtxo& witness_utxo) {  // NOLINT
    this->witness_utxo_ = witness_utxo;
  }
  /**
   * @brief Get data type of witness_utxo.
   * @return Data type of witness_utxo.
   */
  static std::string GetWitness_utxoFieldType() {
    return "DecodePsbtUtxo";  // NOLINT
  }
  /**
   * @brief Get json string of witness_utxo field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetWitness_utxoString(  // line separate
      const DecodePsbtInput& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.witness_utxo_.Serialize();
  }
  /**
   * @brief Set json object to witness_utxo field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetWitness_utxoString(  // line separate
      DecodePsbtInput& obj,  // NOLINT
      const UniValue& json_value) {
    obj.witness_utxo_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of partial_signatures.
   * @return partial_signatures
   */
  JsonObjectVector<PsbtSignatureData, PsbtSignatureDataStruct>& GetPartial_signatures() {  // NOLINT
    return partial_signatures_;
  }
  /**
   * @brief Set to partial_signatures.
   * @param[in] partial_signatures    setting value.
   */
  void SetPartial_signatures(  // line separate
      const JsonObjectVector<PsbtSignatureData, PsbtSignatureDataStruct>& partial_signatures) {  // NOLINT
    this->partial_signatures_ = partial_signatures;
  }
  /**
   * @brief Get data type of partial_signatures.
   * @return Data type of partial_signatures.
   */
  static std::string GetPartial_signaturesFieldType() {
    return "JsonObjectVector<PsbtSignatureData, PsbtSignatureDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of partial_signatures field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetPartial_signaturesString(  // line separate
      const DecodePsbtInput& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.partial_signatures_.Serialize();
  }
  /**
   * @brief Set json object to partial_signatures field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetPartial_signaturesString(  // line separate
      DecodePsbtInput& obj,  // NOLINT
      const UniValue& json_value) {
    obj.partial_signatures_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of sighash
   * @return sighash
   */
  std::string GetSighash() const {
    return sighash_;
  }
  /**
   * @brief Set to sighash
   * @param[in] sighash    setting value.
   */
  void SetSighash(  // line separate
    const std::string& sighash) {  // NOLINT
    this->sighash_ = sighash;
  }
  /**
   * @brief Get data type of sighash
   * @return Data type of sighash
   */
  static std::string GetSighashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashString(  // line separate
      const DecodePsbtInput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_);
  }
  /**
   * @brief Set json object to sighash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashString(  // line separate
      DecodePsbtInput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_, json_value);
  }

  /**
   * @brief Get of redeem_script.
   * @return redeem_script
   */
  PsbtScriptData& GetRedeem_script() {  // NOLINT
    return redeem_script_;
  }
  /**
   * @brief Set to redeem_script.
   * @param[in] redeem_script    setting value.
   */
  void SetRedeem_script(  // line separate
      const PsbtScriptData& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeem_script.
   * @return Data type of redeem_script.
   */
  static std::string GetRedeem_scriptFieldType() {
    return "PsbtScriptData";  // NOLINT
  }
  /**
   * @brief Get json string of redeem_script field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetRedeem_scriptString(  // line separate
      const DecodePsbtInput& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.redeem_script_.Serialize();
  }
  /**
   * @brief Set json object to redeem_script field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetRedeem_scriptString(  // line separate
      DecodePsbtInput& obj,  // NOLINT
      const UniValue& json_value) {
    obj.redeem_script_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of witness_script.
   * @return witness_script
   */
  PsbtScriptData& GetWitness_script() {  // NOLINT
    return witness_script_;
  }
  /**
   * @brief Set to witness_script.
   * @param[in] witness_script    setting value.
   */
  void SetWitness_script(  // line separate
      const PsbtScriptData& witness_script) {  // NOLINT
    this->witness_script_ = witness_script;
  }
  /**
   * @brief Get data type of witness_script.
   * @return Data type of witness_script.
   */
  static std::string GetWitness_scriptFieldType() {
    return "PsbtScriptData";  // NOLINT
  }
  /**
   * @brief Get json string of witness_script field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetWitness_scriptString(  // line separate
      const DecodePsbtInput& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.witness_script_.Serialize();
  }
  /**
   * @brief Set json object to witness_script field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetWitness_scriptString(  // line separate
      DecodePsbtInput& obj,  // NOLINT
      const UniValue& json_value) {
    obj.witness_script_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of bip32_derivs.
   * @return bip32_derivs
   */
  JsonObjectVector<PsbtBip32Data, PsbtBip32DataStruct>& GetBip32_derivs() {  // NOLINT
    return bip32_derivs_;
  }
  /**
   * @brief Set to bip32_derivs.
   * @param[in] bip32_derivs    setting value.
   */
  void SetBip32_derivs(  // line separate
      const JsonObjectVector<PsbtBip32Data, PsbtBip32DataStruct>& bip32_derivs) {  // NOLINT
    this->bip32_derivs_ = bip32_derivs;
  }
  /**
   * @brief Get data type of bip32_derivs.
   * @return Data type of bip32_derivs.
   */
  static std::string GetBip32_derivsFieldType() {
    return "JsonObjectVector<PsbtBip32Data, PsbtBip32DataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of bip32_derivs field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetBip32_derivsString(  // line separate
      const DecodePsbtInput& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.bip32_derivs_.Serialize();
  }
  /**
   * @brief Set json object to bip32_derivs field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetBip32_derivsString(  // line separate
      DecodePsbtInput& obj,  // NOLINT
      const UniValue& json_value) {
    obj.bip32_derivs_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of final_scriptsig.
   * @return final_scriptsig
   */
  DecodeUnlockingScript& GetFinal_scriptsig() {  // NOLINT
    return final_scriptsig_;
  }
  /**
   * @brief Set to final_scriptsig.
   * @param[in] final_scriptsig    setting value.
   */
  void SetFinal_scriptsig(  // line separate
      const DecodeUnlockingScript& final_scriptsig) {  // NOLINT
    this->final_scriptsig_ = final_scriptsig;
  }
  /**
   * @brief Get data type of final_scriptsig.
   * @return Data type of final_scriptsig.
   */
  static std::string GetFinal_scriptsigFieldType() {
    return "DecodeUnlockingScript";  // NOLINT
  }
  /**
   * @brief Get json string of final_scriptsig field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetFinal_scriptsigString(  // line separate
      const DecodePsbtInput& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.final_scriptsig_.Serialize();
  }
  /**
   * @brief Set json object to final_scriptsig field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetFinal_scriptsigString(  // line separate
      DecodePsbtInput& obj,  // NOLINT
      const UniValue& json_value) {
    obj.final_scriptsig_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of final_scriptwitness.
   * @return final_scriptwitness
   */
  JsonValueVector<std::string>& GetFinal_scriptwitness() {  // NOLINT
    return final_scriptwitness_;
  }
  /**
   * @brief Set to final_scriptwitness.
   * @param[in] final_scriptwitness    setting value.
   */
  void SetFinal_scriptwitness(  // line separate
      const JsonValueVector<std::string>& final_scriptwitness) {  // NOLINT
    this->final_scriptwitness_ = final_scriptwitness;
  }
  /**
   * @brief Get data type of final_scriptwitness.
   * @return Data type of final_scriptwitness.
   */
  static std::string GetFinal_scriptwitnessFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of final_scriptwitness field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetFinal_scriptwitnessString(  // line separate
      const DecodePsbtInput& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.final_scriptwitness_.Serialize();
  }
  /**
   * @brief Set json object to final_scriptwitness field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetFinal_scriptwitnessString(  // line separate
      DecodePsbtInput& obj,  // NOLINT
      const UniValue& json_value) {
    obj.final_scriptwitness_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of unknown.
   * @return unknown
   */
  JsonObjectVector<PsbtMapData, PsbtMapDataStruct>& GetUnknown() {  // NOLINT
    return unknown_;
  }
  /**
   * @brief Set to unknown.
   * @param[in] unknown    setting value.
   */
  void SetUnknown(  // line separate
      const JsonObjectVector<PsbtMapData, PsbtMapDataStruct>& unknown) {  // NOLINT
    this->unknown_ = unknown;
  }
  /**
   * @brief Get data type of unknown.
   * @return Data type of unknown.
   */
  static std::string GetUnknownFieldType() {
    return "JsonObjectVector<PsbtMapData, PsbtMapDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of unknown field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUnknownString(  // line separate
      const DecodePsbtInput& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.unknown_.Serialize();
  }
  /**
   * @brief Set json object to unknown field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUnknownString(  // line separate
      DecodePsbtInput& obj,  // NOLINT
      const UniValue& json_value) {
    obj.unknown_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodePsbtInputStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodePsbtInputStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodePsbtInputMapTable =
    cfd::core::JsonTableMap<DecodePsbtInput>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodePsbtInputMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodePsbtInputMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(non_witness_utxo_hex) value
   */
  std::string non_witness_utxo_hex_ = "";
  /**
   * @brief JsonAPI(non_witness_utxo) value
   */
  DecodeRawTransactionResponse non_witness_utxo_;  // NOLINT
  /**
   * @brief JsonAPI(witness_utxo) value
   */
  DecodePsbtUtxo witness_utxo_;  // NOLINT
  /**
   * @brief JsonAPI(partial_signatures) value
   */
  JsonObjectVector<PsbtSignatureData, PsbtSignatureDataStruct> partial_signatures_;  // NOLINT
  /**
   * @brief JsonAPI(sighash) value
   */
  std::string sighash_ = "";
  /**
   * @brief JsonAPI(redeem_script) value
   */
  PsbtScriptData redeem_script_;  // NOLINT
  /**
   * @brief JsonAPI(witness_script) value
   */
  PsbtScriptData witness_script_;  // NOLINT
  /**
   * @brief JsonAPI(bip32_derivs) value
   */
  JsonObjectVector<PsbtBip32Data, PsbtBip32DataStruct> bip32_derivs_;  // NOLINT
  /**
   * @brief JsonAPI(final_scriptsig) value
   */
  DecodeUnlockingScript final_scriptsig_;  // NOLINT
  /**
   * @brief JsonAPI(final_scriptwitness) value
   */
  JsonValueVector<std::string> final_scriptwitness_;  // NOLINT
  /**
   * @brief JsonAPI(unknown) value
   */
  JsonObjectVector<PsbtMapData, PsbtMapDataStruct> unknown_;  // NOLINT
};

// ------------------------------------------------------------------------
// DecodePsbtOutput
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodePsbtOutput) class
 */
class DecodePsbtOutput
  : public cfd::core::JsonClassBase<DecodePsbtOutput> {
 public:
  DecodePsbtOutput() {
    CollectFieldName();
  }
  virtual ~DecodePsbtOutput() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of redeem_script.
   * @return redeem_script
   */
  PsbtScriptData& GetRedeem_script() {  // NOLINT
    return redeem_script_;
  }
  /**
   * @brief Set to redeem_script.
   * @param[in] redeem_script    setting value.
   */
  void SetRedeem_script(  // line separate
      const PsbtScriptData& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeem_script.
   * @return Data type of redeem_script.
   */
  static std::string GetRedeem_scriptFieldType() {
    return "PsbtScriptData";  // NOLINT
  }
  /**
   * @brief Get json string of redeem_script field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetRedeem_scriptString(  // line separate
      const DecodePsbtOutput& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.redeem_script_.Serialize();
  }
  /**
   * @brief Set json object to redeem_script field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetRedeem_scriptString(  // line separate
      DecodePsbtOutput& obj,  // NOLINT
      const UniValue& json_value) {
    obj.redeem_script_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of witness_script.
   * @return witness_script
   */
  PsbtScriptData& GetWitness_script() {  // NOLINT
    return witness_script_;
  }
  /**
   * @brief Set to witness_script.
   * @param[in] witness_script    setting value.
   */
  void SetWitness_script(  // line separate
      const PsbtScriptData& witness_script) {  // NOLINT
    this->witness_script_ = witness_script;
  }
  /**
   * @brief Get data type of witness_script.
   * @return Data type of witness_script.
   */
  static std::string GetWitness_scriptFieldType() {
    return "PsbtScriptData";  // NOLINT
  }
  /**
   * @brief Get json string of witness_script field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetWitness_scriptString(  // line separate
      const DecodePsbtOutput& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.witness_script_.Serialize();
  }
  /**
   * @brief Set json object to witness_script field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetWitness_scriptString(  // line separate
      DecodePsbtOutput& obj,  // NOLINT
      const UniValue& json_value) {
    obj.witness_script_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of bip32_derivs.
   * @return bip32_derivs
   */
  JsonObjectVector<PsbtBip32Data, PsbtBip32DataStruct>& GetBip32_derivs() {  // NOLINT
    return bip32_derivs_;
  }
  /**
   * @brief Set to bip32_derivs.
   * @param[in] bip32_derivs    setting value.
   */
  void SetBip32_derivs(  // line separate
      const JsonObjectVector<PsbtBip32Data, PsbtBip32DataStruct>& bip32_derivs) {  // NOLINT
    this->bip32_derivs_ = bip32_derivs;
  }
  /**
   * @brief Get data type of bip32_derivs.
   * @return Data type of bip32_derivs.
   */
  static std::string GetBip32_derivsFieldType() {
    return "JsonObjectVector<PsbtBip32Data, PsbtBip32DataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of bip32_derivs field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetBip32_derivsString(  // line separate
      const DecodePsbtOutput& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.bip32_derivs_.Serialize();
  }
  /**
   * @brief Set json object to bip32_derivs field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetBip32_derivsString(  // line separate
      DecodePsbtOutput& obj,  // NOLINT
      const UniValue& json_value) {
    obj.bip32_derivs_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of unknown.
   * @return unknown
   */
  JsonObjectVector<PsbtMapData, PsbtMapDataStruct>& GetUnknown() {  // NOLINT
    return unknown_;
  }
  /**
   * @brief Set to unknown.
   * @param[in] unknown    setting value.
   */
  void SetUnknown(  // line separate
      const JsonObjectVector<PsbtMapData, PsbtMapDataStruct>& unknown) {  // NOLINT
    this->unknown_ = unknown;
  }
  /**
   * @brief Get data type of unknown.
   * @return Data type of unknown.
   */
  static std::string GetUnknownFieldType() {
    return "JsonObjectVector<PsbtMapData, PsbtMapDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of unknown field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUnknownString(  // line separate
      const DecodePsbtOutput& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.unknown_.Serialize();
  }
  /**
   * @brief Set json object to unknown field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUnknownString(  // line separate
      DecodePsbtOutput& obj,  // NOLINT
      const UniValue& json_value) {
    obj.unknown_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodePsbtOutputStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodePsbtOutputStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodePsbtOutputMapTable =
    cfd::core::JsonTableMap<DecodePsbtOutput>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodePsbtOutputMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodePsbtOutputMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(redeem_script) value
   */
  PsbtScriptData redeem_script_;  // NOLINT
  /**
   * @brief JsonAPI(witness_script) value
   */
  PsbtScriptData witness_script_;  // NOLINT
  /**
   * @brief JsonAPI(bip32_derivs) value
   */
  JsonObjectVector<PsbtBip32Data, PsbtBip32DataStruct> bip32_derivs_;  // NOLINT
  /**
   * @brief JsonAPI(unknown) value
   */
  JsonObjectVector<PsbtMapData, PsbtMapDataStruct> unknown_;  // NOLINT
};

// ------------------------------------------------------------------------
// DescriptorScriptJson
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DescriptorScriptJson) class
 */
class DescriptorScriptJson
  : public cfd::core::JsonClassBase<DescriptorScriptJson> {
 public:
  DescriptorScriptJson() {
    CollectFieldName();
  }
  virtual ~DescriptorScriptJson() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of depth
   * @return depth
   */
  uint32_t GetDepth() const {
    return depth_;
  }
  /**
   * @brief Set to depth
   * @param[in] depth    setting value.
   */
  void SetDepth(  // line separate
    const uint32_t& depth) {  // NOLINT
    this->depth_ = depth;
  }
  /**
   * @brief Get data type of depth
   * @return Data type of depth
   */
  static std::string GetDepthFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of depth field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDepthString(  // line separate
      const DescriptorScriptJson& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.depth_);
  }
  /**
   * @brief Set json object to depth field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDepthString(  // line separate
      DescriptorScriptJson& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.depth_, json_value);
  }

  /**
   * @brief Get of lockingScript
   * @return lockingScript
   */
  std::string GetLockingScript() const {
    return locking_script_;
  }
  /**
   * @brief Set to lockingScript
   * @param[in] locking_script    setting value.
   */
  void SetLockingScript(  // line separate
    const std::string& locking_script) {  // NOLINT
    this->locking_script_ = locking_script;
  }
  /**
   * @brief Get data type of lockingScript
   * @return Data type of lockingScript
   */
  static std::string GetLockingScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of lockingScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLockingScriptString(  // line separate
      const DescriptorScriptJson& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locking_script_);
  }
  /**
   * @brief Set json object to lockingScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLockingScriptString(  // line separate
      DescriptorScriptJson& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locking_script_, json_value);
  }

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const DescriptorScriptJson& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      DescriptorScriptJson& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const DescriptorScriptJson& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      DescriptorScriptJson& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Get of redeemScript
   * @return redeemScript
   */
  std::string GetRedeemScript() const {
    return redeem_script_;
  }
  /**
   * @brief Set to redeemScript
   * @param[in] redeem_script    setting value.
   */
  void SetRedeemScript(  // line separate
    const std::string& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeemScript
   * @return Data type of redeemScript
   */
  static std::string GetRedeemScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of redeemScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRedeemScriptString(  // line separate
      const DescriptorScriptJson& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.redeem_script_);
  }
  /**
   * @brief Set json object to redeemScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRedeemScriptString(  // line separate
      DescriptorScriptJson& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.redeem_script_, json_value);
  }

  /**
   * @brief Get of keyType
   * @return keyType
   */
  std::string GetKeyType() const {
    return key_type_;
  }
  /**
   * @brief Set to keyType
   * @param[in] key_type    setting value.
   */
  void SetKeyType(  // line separate
    const std::string& key_type) {  // NOLINT
    this->key_type_ = key_type;
  }
  /**
   * @brief Get data type of keyType
   * @return Data type of keyType
   */
  static std::string GetKeyTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of keyType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetKeyTypeString(  // line separate
      const DescriptorScriptJson& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.key_type_);
  }
  /**
   * @brief Set json object to keyType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetKeyTypeString(  // line separate
      DescriptorScriptJson& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.key_type_, json_value);
  }

  /**
   * @brief Get of key
   * @return key
   */
  std::string GetKey() const {
    return key_;
  }
  /**
   * @brief Set to key
   * @param[in] key    setting value.
   */
  void SetKey(  // line separate
    const std::string& key) {  // NOLINT
    this->key_ = key;
  }
  /**
   * @brief Get data type of key
   * @return Data type of key
   */
  static std::string GetKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of key field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetKeyString(  // line separate
      const DescriptorScriptJson& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.key_);
  }
  /**
   * @brief Set json object to key field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetKeyString(  // line separate
      DescriptorScriptJson& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.key_, json_value);
  }

  /**
   * @brief Get of keys.
   * @return keys
   */
  JsonObjectVector<DescriptorKeyJson, DescriptorKeyJsonStruct>& GetKeys() {  // NOLINT
    return keys_;
  }
  /**
   * @brief Set to keys.
   * @param[in] keys    setting value.
   */
  void SetKeys(  // line separate
      const JsonObjectVector<DescriptorKeyJson, DescriptorKeyJsonStruct>& keys) {  // NOLINT
    this->keys_ = keys;
  }
  /**
   * @brief Get data type of keys.
   * @return Data type of keys.
   */
  static std::string GetKeysFieldType() {
    return "JsonObjectVector<DescriptorKeyJson, DescriptorKeyJsonStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of keys field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetKeysString(  // line separate
      const DescriptorScriptJson& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.keys_.Serialize();
  }
  /**
   * @brief Set json object to keys field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetKeysString(  // line separate
      DescriptorScriptJson& obj,  // NOLINT
      const UniValue& json_value) {
    obj.keys_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of reqNum
   * @return reqNum
   */
  uint32_t GetReqNum() const {
    return req_num_;
  }
  /**
   * @brief Set to reqNum
   * @param[in] req_num    setting value.
   */
  void SetReqNum(  // line separate
    const uint32_t& req_num) {  // NOLINT
    this->req_num_ = req_num;
  }
  /**
   * @brief Get data type of reqNum
   * @return Data type of reqNum
   */
  static std::string GetReqNumFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of reqNum field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetReqNumString(  // line separate
      const DescriptorScriptJson& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.req_num_);
  }
  /**
   * @brief Set json object to reqNum field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetReqNumString(  // line separate
      DescriptorScriptJson& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.req_num_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DescriptorScriptJsonStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DescriptorScriptJsonStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DescriptorScriptJsonMapTable =
    cfd::core::JsonTableMap<DescriptorScriptJson>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DescriptorScriptJsonMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DescriptorScriptJsonMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(depth) value
   */
  uint32_t depth_ = 0;
  /**
   * @brief JsonAPI(lockingScript) value
   */
  std::string locking_script_ = "";
  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "";
  /**
   * @brief JsonAPI(redeemScript) value
   */
  std::string redeem_script_ = "";
  /**
   * @brief JsonAPI(keyType) value
   */
  std::string key_type_ = "";
  /**
   * @brief JsonAPI(key) value
   */
  std::string key_ = "";
  /**
   * @brief JsonAPI(keys) value
   */
  JsonObjectVector<DescriptorKeyJson, DescriptorKeyJsonStruct> keys_;  // NOLINT
  /**
   * @brief JsonAPI(reqNum) value
   */
  uint32_t req_num_ = 0;
};

// ------------------------------------------------------------------------
// ElementsDecodeRawTransactionTxIn
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsDecodeRawTransactionTxIn) class
 */
class ElementsDecodeRawTransactionTxIn
  : public cfd::core::JsonClassBase<ElementsDecodeRawTransactionTxIn> {
 public:
  ElementsDecodeRawTransactionTxIn() {
    CollectFieldName();
  }
  virtual ~ElementsDecodeRawTransactionTxIn() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of coinbase
   * @return coinbase
   */
  std::string GetCoinbase() const {
    return coinbase_;
  }
  /**
   * @brief Set to coinbase
   * @param[in] coinbase    setting value.
   */
  void SetCoinbase(  // line separate
    const std::string& coinbase) {  // NOLINT
    this->coinbase_ = coinbase;
  }
  /**
   * @brief Get data type of coinbase
   * @return Data type of coinbase
   */
  static std::string GetCoinbaseFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of coinbase field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetCoinbaseString(  // line separate
      const ElementsDecodeRawTransactionTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.coinbase_);
  }
  /**
   * @brief Set json object to coinbase field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetCoinbaseString(  // line separate
      ElementsDecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.coinbase_, json_value);
  }

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const ElementsDecodeRawTransactionTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      ElementsDecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const ElementsDecodeRawTransactionTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      ElementsDecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of scriptSig.
   * @return scriptSig
   */
  DecodeUnlockingScript& GetScriptSig() {  // NOLINT
    return script_sig_;
  }
  /**
   * @brief Set to scriptSig.
   * @param[in] script_sig    setting value.
   */
  void SetScriptSig(  // line separate
      const DecodeUnlockingScript& script_sig) {  // NOLINT
    this->script_sig_ = script_sig;
  }
  /**
   * @brief Get data type of scriptSig.
   * @return Data type of scriptSig.
   */
  static std::string GetScriptSigFieldType() {
    return "DecodeUnlockingScript";  // NOLINT
  }
  /**
   * @brief Get json string of scriptSig field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetScriptSigString(  // line separate
      const ElementsDecodeRawTransactionTxIn& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.script_sig_.Serialize();
  }
  /**
   * @brief Set json object to scriptSig field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetScriptSigString(  // line separate
      ElementsDecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    obj.script_sig_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of is_pegin
   * @return is_pegin
   */
  bool GetIs_pegin() const {
    return is_pegin_;
  }
  /**
   * @brief Set to is_pegin
   * @param[in] is_pegin    setting value.
   */
  void SetIs_pegin(  // line separate
    const bool& is_pegin) {  // NOLINT
    this->is_pegin_ = is_pegin;
  }
  /**
   * @brief Get data type of is_pegin
   * @return Data type of is_pegin
   */
  static std::string GetIs_peginFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of is_pegin field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIs_peginString(  // line separate
      const ElementsDecodeRawTransactionTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_pegin_);
  }
  /**
   * @brief Set json object to is_pegin field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIs_peginString(  // line separate
      ElementsDecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_pegin_, json_value);
  }

  /**
   * @brief Get of sequence
   * @return sequence
   */
  int64_t GetSequence() const {
    return sequence_;
  }
  /**
   * @brief Set to sequence
   * @param[in] sequence    setting value.
   */
  void SetSequence(  // line separate
    const int64_t& sequence) {  // NOLINT
    this->sequence_ = sequence;
  }
  /**
   * @brief Get data type of sequence
   * @return Data type of sequence
   */
  static std::string GetSequenceFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of sequence field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSequenceString(  // line separate
      const ElementsDecodeRawTransactionTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sequence_);
  }
  /**
   * @brief Set json object to sequence field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSequenceString(  // line separate
      ElementsDecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sequence_, json_value);
  }

  /**
   * @brief Get of txinwitness.
   * @return txinwitness
   */
  JsonValueVector<std::string>& GetTxinwitness() {  // NOLINT
    return txinwitness_;
  }
  /**
   * @brief Set to txinwitness.
   * @param[in] txinwitness    setting value.
   */
  void SetTxinwitness(  // line separate
      const JsonValueVector<std::string>& txinwitness) {  // NOLINT
    this->txinwitness_ = txinwitness;
  }
  /**
   * @brief Get data type of txinwitness.
   * @return Data type of txinwitness.
   */
  static std::string GetTxinwitnessFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of txinwitness field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinwitnessString(  // line separate
      const ElementsDecodeRawTransactionTxIn& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txinwitness_.Serialize();
  }
  /**
   * @brief Set json object to txinwitness field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinwitnessString(  // line separate
      ElementsDecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txinwitness_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of pegin_witness.
   * @return pegin_witness
   */
  JsonValueVector<std::string>& GetPegin_witness() {  // NOLINT
    return pegin_witness_;
  }
  /**
   * @brief Set to pegin_witness.
   * @param[in] pegin_witness    setting value.
   */
  void SetPegin_witness(  // line separate
      const JsonValueVector<std::string>& pegin_witness) {  // NOLINT
    this->pegin_witness_ = pegin_witness;
  }
  /**
   * @brief Get data type of pegin_witness.
   * @return Data type of pegin_witness.
   */
  static std::string GetPegin_witnessFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of pegin_witness field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetPegin_witnessString(  // line separate
      const ElementsDecodeRawTransactionTxIn& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.pegin_witness_.Serialize();
  }
  /**
   * @brief Set json object to pegin_witness field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetPegin_witnessString(  // line separate
      ElementsDecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    obj.pegin_witness_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of issuance.
   * @return issuance
   */
  ElementsDecodeIssuance& GetIssuance() {  // NOLINT
    return issuance_;
  }
  /**
   * @brief Set to issuance.
   * @param[in] issuance    setting value.
   */
  void SetIssuance(  // line separate
      const ElementsDecodeIssuance& issuance) {  // NOLINT
    this->issuance_ = issuance;
  }
  /**
   * @brief Get data type of issuance.
   * @return Data type of issuance.
   */
  static std::string GetIssuanceFieldType() {
    return "ElementsDecodeIssuance";  // NOLINT
  }
  /**
   * @brief Get json string of issuance field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetIssuanceString(  // line separate
      const ElementsDecodeRawTransactionTxIn& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.issuance_.Serialize();
  }
  /**
   * @brief Set json object to issuance field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetIssuanceString(  // line separate
      ElementsDecodeRawTransactionTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    obj.issuance_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsDecodeRawTransactionTxInStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsDecodeRawTransactionTxInStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsDecodeRawTransactionTxInMapTable =
    cfd::core::JsonTableMap<ElementsDecodeRawTransactionTxIn>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsDecodeRawTransactionTxInMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsDecodeRawTransactionTxInMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(coinbase) value
   */
  std::string coinbase_ = "";
  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(scriptSig) value
   */
  DecodeUnlockingScript script_sig_;  // NOLINT
  /**
   * @brief JsonAPI(is_pegin) value
   */
  bool is_pegin_ = false;
  /**
   * @brief JsonAPI(sequence) value
   */
  int64_t sequence_ = 0;
  /**
   * @brief JsonAPI(txinwitness) value
   */
  JsonValueVector<std::string> txinwitness_;  // NOLINT
  /**
   * @brief JsonAPI(pegin_witness) value
   */
  JsonValueVector<std::string> pegin_witness_;  // NOLINT
  /**
   * @brief JsonAPI(issuance) value
   */
  ElementsDecodeIssuance issuance_;  // NOLINT
};

// ------------------------------------------------------------------------
// ElementsDecodeRawTransactionTxOut
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsDecodeRawTransactionTxOut) class
 */
class ElementsDecodeRawTransactionTxOut
  : public cfd::core::JsonClassBase<ElementsDecodeRawTransactionTxOut> {
 public:
  ElementsDecodeRawTransactionTxOut() {
    CollectFieldName();
  }
  virtual ~ElementsDecodeRawTransactionTxOut() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of value
   * @return value
   */
  int64_t GetValue() const {
    return value_;
  }
  /**
   * @brief Set to value
   * @param[in] value    setting value.
   */
  void SetValue(  // line separate
    const int64_t& value) {  // NOLINT
    this->value_ = value;
  }
  /**
   * @brief Get data type of value
   * @return Data type of value
   */
  static std::string GetValueFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of value field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetValueString(  // line separate
      const ElementsDecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.value_);
  }
  /**
   * @brief Set json object to value field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetValueString(  // line separate
      ElementsDecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.value_, json_value);
  }

  /**
   * @brief Get of value-minimum
   * @return value-minimum
   */
  int64_t GetValue_minimum() const {
    return value_minimum_;
  }
  /**
   * @brief Set to value-minimum
   * @param[in] value_minimum    setting value.
   */
  void SetValue_minimum(  // line separate
    const int64_t& value_minimum) {  // NOLINT
    this->value_minimum_ = value_minimum;
  }
  /**
   * @brief Get data type of value-minimum
   * @return Data type of value-minimum
   */
  static std::string GetValue_minimumFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of value-minimum field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetValue_minimumString(  // line separate
      const ElementsDecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.value_minimum_);
  }
  /**
   * @brief Set json object to value-minimum field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetValue_minimumString(  // line separate
      ElementsDecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.value_minimum_, json_value);
  }

  /**
   * @brief Get of value-maximum
   * @return value-maximum
   */
  int64_t GetValue_maximum() const {
    return value_maximum_;
  }
  /**
   * @brief Set to value-maximum
   * @param[in] value_maximum    setting value.
   */
  void SetValue_maximum(  // line separate
    const int64_t& value_maximum) {  // NOLINT
    this->value_maximum_ = value_maximum;
  }
  /**
   * @brief Get data type of value-maximum
   * @return Data type of value-maximum
   */
  static std::string GetValue_maximumFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of value-maximum field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetValue_maximumString(  // line separate
      const ElementsDecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.value_maximum_);
  }
  /**
   * @brief Set json object to value-maximum field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetValue_maximumString(  // line separate
      ElementsDecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.value_maximum_, json_value);
  }

  /**
   * @brief Get of ct-exponent
   * @return ct-exponent
   */
  int GetCt_exponent() const {
    return ct_exponent_;
  }
  /**
   * @brief Set to ct-exponent
   * @param[in] ct_exponent    setting value.
   */
  void SetCt_exponent(  // line separate
    const int& ct_exponent) {  // NOLINT
    this->ct_exponent_ = ct_exponent;
  }
  /**
   * @brief Get data type of ct-exponent
   * @return Data type of ct-exponent
   */
  static std::string GetCt_exponentFieldType() {
    return "int";
  }
  /**
   * @brief Get json string of ct-exponent field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetCt_exponentString(  // line separate
      const ElementsDecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.ct_exponent_);
  }
  /**
   * @brief Set json object to ct-exponent field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetCt_exponentString(  // line separate
      ElementsDecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.ct_exponent_, json_value);
  }

  /**
   * @brief Get of ct-bits
   * @return ct-bits
   */
  int GetCt_bits() const {
    return ct_bits_;
  }
  /**
   * @brief Set to ct-bits
   * @param[in] ct_bits    setting value.
   */
  void SetCt_bits(  // line separate
    const int& ct_bits) {  // NOLINT
    this->ct_bits_ = ct_bits;
  }
  /**
   * @brief Get data type of ct-bits
   * @return Data type of ct-bits
   */
  static std::string GetCt_bitsFieldType() {
    return "int";
  }
  /**
   * @brief Get json string of ct-bits field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetCt_bitsString(  // line separate
      const ElementsDecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.ct_bits_);
  }
  /**
   * @brief Set json object to ct-bits field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetCt_bitsString(  // line separate
      ElementsDecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.ct_bits_, json_value);
  }

  /**
   * @brief Get of surjectionproof
   * @return surjectionproof
   */
  std::string GetSurjectionproof() const {
    return surjectionproof_;
  }
  /**
   * @brief Set to surjectionproof
   * @param[in] surjectionproof    setting value.
   */
  void SetSurjectionproof(  // line separate
    const std::string& surjectionproof) {  // NOLINT
    this->surjectionproof_ = surjectionproof;
  }
  /**
   * @brief Get data type of surjectionproof
   * @return Data type of surjectionproof
   */
  static std::string GetSurjectionproofFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of surjectionproof field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSurjectionproofString(  // line separate
      const ElementsDecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.surjectionproof_);
  }
  /**
   * @brief Set json object to surjectionproof field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSurjectionproofString(  // line separate
      ElementsDecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.surjectionproof_, json_value);
  }

  /**
   * @brief Get of valuecommitment
   * @return valuecommitment
   */
  std::string GetValuecommitment() const {
    return valuecommitment_;
  }
  /**
   * @brief Set to valuecommitment
   * @param[in] valuecommitment    setting value.
   */
  void SetValuecommitment(  // line separate
    const std::string& valuecommitment) {  // NOLINT
    this->valuecommitment_ = valuecommitment;
  }
  /**
   * @brief Get data type of valuecommitment
   * @return Data type of valuecommitment
   */
  static std::string GetValuecommitmentFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of valuecommitment field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetValuecommitmentString(  // line separate
      const ElementsDecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.valuecommitment_);
  }
  /**
   * @brief Set json object to valuecommitment field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetValuecommitmentString(  // line separate
      ElementsDecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.valuecommitment_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const ElementsDecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      ElementsDecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of assetcommitment
   * @return assetcommitment
   */
  std::string GetAssetcommitment() const {
    return assetcommitment_;
  }
  /**
   * @brief Set to assetcommitment
   * @param[in] assetcommitment    setting value.
   */
  void SetAssetcommitment(  // line separate
    const std::string& assetcommitment) {  // NOLINT
    this->assetcommitment_ = assetcommitment;
  }
  /**
   * @brief Get data type of assetcommitment
   * @return Data type of assetcommitment
   */
  static std::string GetAssetcommitmentFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetcommitment field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetcommitmentString(  // line separate
      const ElementsDecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.assetcommitment_);
  }
  /**
   * @brief Set json object to assetcommitment field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetcommitmentString(  // line separate
      ElementsDecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.assetcommitment_, json_value);
  }

  /**
   * @brief Get of commitmentnonce
   * @return commitmentnonce
   */
  std::string GetCommitmentnonce() const {
    return commitmentnonce_;
  }
  /**
   * @brief Set to commitmentnonce
   * @param[in] commitmentnonce    setting value.
   */
  void SetCommitmentnonce(  // line separate
    const std::string& commitmentnonce) {  // NOLINT
    this->commitmentnonce_ = commitmentnonce;
  }
  /**
   * @brief Get data type of commitmentnonce
   * @return Data type of commitmentnonce
   */
  static std::string GetCommitmentnonceFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of commitmentnonce field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetCommitmentnonceString(  // line separate
      const ElementsDecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.commitmentnonce_);
  }
  /**
   * @brief Set json object to commitmentnonce field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetCommitmentnonceString(  // line separate
      ElementsDecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.commitmentnonce_, json_value);
  }

  /**
   * @brief Get of commitmentnonce_fully_valid
   * @return commitmentnonce_fully_valid
   */
  bool GetCommitmentnonce_fully_valid() const {
    return commitmentnonce_fully_valid_;
  }
  /**
   * @brief Set to commitmentnonce_fully_valid
   * @param[in] commitmentnonce_fully_valid    setting value.
   */
  void SetCommitmentnonce_fully_valid(  // line separate
    const bool& commitmentnonce_fully_valid) {  // NOLINT
    this->commitmentnonce_fully_valid_ = commitmentnonce_fully_valid;
  }
  /**
   * @brief Get data type of commitmentnonce_fully_valid
   * @return Data type of commitmentnonce_fully_valid
   */
  static std::string GetCommitmentnonce_fully_validFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of commitmentnonce_fully_valid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetCommitmentnonce_fully_validString(  // line separate
      const ElementsDecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.commitmentnonce_fully_valid_);
  }
  /**
   * @brief Set json object to commitmentnonce_fully_valid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetCommitmentnonce_fully_validString(  // line separate
      ElementsDecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.commitmentnonce_fully_valid_, json_value);
  }

  /**
   * @brief Get of n
   * @return n
   */
  uint32_t GetN() const {
    return n_;
  }
  /**
   * @brief Set to n
   * @param[in] n    setting value.
   */
  void SetN(  // line separate
    const uint32_t& n) {  // NOLINT
    this->n_ = n;
  }
  /**
   * @brief Get data type of n
   * @return Data type of n
   */
  static std::string GetNFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of n field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNString(  // line separate
      const ElementsDecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.n_);
  }
  /**
   * @brief Set json object to n field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNString(  // line separate
      ElementsDecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.n_, json_value);
  }

  /**
   * @brief Get of scriptPubKey.
   * @return scriptPubKey
   */
  ElementsDecodeLockingScript& GetScriptPubKey() {  // NOLINT
    return script_pub_key_;
  }
  /**
   * @brief Set to scriptPubKey.
   * @param[in] script_pub_key    setting value.
   */
  void SetScriptPubKey(  // line separate
      const ElementsDecodeLockingScript& script_pub_key) {  // NOLINT
    this->script_pub_key_ = script_pub_key;
  }
  /**
   * @brief Get data type of scriptPubKey.
   * @return Data type of scriptPubKey.
   */
  static std::string GetScriptPubKeyFieldType() {
    return "ElementsDecodeLockingScript";  // NOLINT
  }
  /**
   * @brief Get json string of scriptPubKey field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetScriptPubKeyString(  // line separate
      const ElementsDecodeRawTransactionTxOut& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.script_pub_key_.Serialize();
  }
  /**
   * @brief Set json object to scriptPubKey field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetScriptPubKeyString(  // line separate
      ElementsDecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    obj.script_pub_key_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of rangeproof
   * @return rangeproof
   */
  std::string GetRangeproof() const {
    return rangeproof_;
  }
  /**
   * @brief Set to rangeproof
   * @param[in] rangeproof    setting value.
   */
  void SetRangeproof(  // line separate
    const std::string& rangeproof) {  // NOLINT
    this->rangeproof_ = rangeproof;
  }
  /**
   * @brief Get data type of rangeproof
   * @return Data type of rangeproof
   */
  static std::string GetRangeproofFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of rangeproof field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRangeproofString(  // line separate
      const ElementsDecodeRawTransactionTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.rangeproof_);
  }
  /**
   * @brief Set json object to rangeproof field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRangeproofString(  // line separate
      ElementsDecodeRawTransactionTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.rangeproof_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsDecodeRawTransactionTxOutStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsDecodeRawTransactionTxOutStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsDecodeRawTransactionTxOutMapTable =
    cfd::core::JsonTableMap<ElementsDecodeRawTransactionTxOut>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsDecodeRawTransactionTxOutMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsDecodeRawTransactionTxOutMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(value) value
   */
  int64_t value_ = 0;
  /**
   * @brief JsonAPI(value-minimum) value
   */
  int64_t value_minimum_ = 0;
  /**
   * @brief JsonAPI(value-maximum) value
   */
  int64_t value_maximum_ = 0;
  /**
   * @brief JsonAPI(ct-exponent) value
   */
  int ct_exponent_ = 0;
  /**
   * @brief JsonAPI(ct-bits) value
   */
  int ct_bits_ = 0;
  /**
   * @brief JsonAPI(surjectionproof) value
   */
  std::string surjectionproof_ = "";
  /**
   * @brief JsonAPI(valuecommitment) value
   */
  std::string valuecommitment_ = "";
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(assetcommitment) value
   */
  std::string assetcommitment_ = "";
  /**
   * @brief JsonAPI(commitmentnonce) value
   */
  std::string commitmentnonce_ = "";
  /**
   * @brief JsonAPI(commitmentnonce_fully_valid) value
   */
  bool commitmentnonce_fully_valid_ = false;
  /**
   * @brief JsonAPI(n) value
   */
  uint32_t n_ = 0;
  /**
   * @brief JsonAPI(scriptPubKey) value
   */
  ElementsDecodeLockingScript script_pub_key_;  // NOLINT
  /**
   * @brief JsonAPI(rangeproof) value
   */
  std::string rangeproof_ = "";
};

// ------------------------------------------------------------------------
// ElementsDestroyAmount
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsDestroyAmount) class
 */
class ElementsDestroyAmount
  : public cfd::core::JsonClassBase<ElementsDestroyAmount> {
 public:
  ElementsDestroyAmount() {
    CollectFieldName();
  }
  virtual ~ElementsDestroyAmount() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const ElementsDestroyAmount& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      ElementsDestroyAmount& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const ElementsDestroyAmount& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      ElementsDestroyAmount& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of directNonce
   * @return directNonce
   */
  std::string GetDirectNonce() const {
    return direct_nonce_;
  }
  /**
   * @brief Set to directNonce
   * @param[in] direct_nonce    setting value.
   */
  void SetDirectNonce(  // line separate
    const std::string& direct_nonce) {  // NOLINT
    this->direct_nonce_ = direct_nonce;
  }
  /**
   * @brief Get data type of directNonce
   * @return Data type of directNonce
   */
  static std::string GetDirectNonceFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of directNonce field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDirectNonceString(  // line separate
      const ElementsDestroyAmount& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.direct_nonce_);
  }
  /**
   * @brief Set json object to directNonce field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDirectNonceString(  // line separate
      ElementsDestroyAmount& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.direct_nonce_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsDestroyAmountStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsDestroyAmountStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsDestroyAmountMapTable =
    cfd::core::JsonTableMap<ElementsDestroyAmount>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsDestroyAmountMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsDestroyAmountMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(directNonce) value
   */
  std::string direct_nonce_ = "";
};

// ------------------------------------------------------------------------
// ElementsPeginTxIn
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsPeginTxIn) class
 */
class ElementsPeginTxIn
  : public cfd::core::JsonClassBase<ElementsPeginTxIn> {
 public:
  ElementsPeginTxIn() {
    CollectFieldName();
  }
  virtual ~ElementsPeginTxIn() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of isPegin
   * @return isPegin
   */
  bool GetIsPegin() const {
    return is_pegin_;
  }
  /**
   * @brief Set to isPegin
   * @param[in] is_pegin    setting value.
   */
  void SetIsPegin(  // line separate
    const bool& is_pegin) {  // NOLINT
    this->is_pegin_ = is_pegin;
  }
  /**
   * @brief Get data type of isPegin
   * @return Data type of isPegin
   */
  static std::string GetIsPeginFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isPegin field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsPeginString(  // line separate
      const ElementsPeginTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_pegin_);
  }
  /**
   * @brief Set json object to isPegin field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsPeginString(  // line separate
      ElementsPeginTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_pegin_, json_value);
  }

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const ElementsPeginTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      ElementsPeginTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const ElementsPeginTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      ElementsPeginTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of sequence
   * @return sequence
   */
  uint32_t GetSequence() const {
    return sequence_;
  }
  /**
   * @brief Set to sequence
   * @param[in] sequence    setting value.
   */
  void SetSequence(  // line separate
    const uint32_t& sequence) {  // NOLINT
    this->sequence_ = sequence;
  }
  /**
   * @brief Get data type of sequence
   * @return Data type of sequence
   */
  static std::string GetSequenceFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of sequence field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSequenceString(  // line separate
      const ElementsPeginTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sequence_);
  }
  /**
   * @brief Set json object to sequence field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSequenceString(  // line separate
      ElementsPeginTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sequence_, json_value);
  }

  /**
   * @brief Get of peginwitness.
   * @return peginwitness
   */
  ElementsAddPeginWitness& GetPeginwitness() {  // NOLINT
    return peginwitness_;
  }
  /**
   * @brief Set to peginwitness.
   * @param[in] peginwitness    setting value.
   */
  void SetPeginwitness(  // line separate
      const ElementsAddPeginWitness& peginwitness) {  // NOLINT
    this->peginwitness_ = peginwitness;
  }
  /**
   * @brief Get data type of peginwitness.
   * @return Data type of peginwitness.
   */
  static std::string GetPeginwitnessFieldType() {
    return "ElementsAddPeginWitness";  // NOLINT
  }
  /**
   * @brief Get json string of peginwitness field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetPeginwitnessString(  // line separate
      const ElementsPeginTxIn& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.peginwitness_.Serialize();
  }
  /**
   * @brief Set json object to peginwitness field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetPeginwitnessString(  // line separate
      ElementsPeginTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    obj.peginwitness_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of isRemoveMainchainTxWitness
   * @return isRemoveMainchainTxWitness
   */
  bool GetIsRemoveMainchainTxWitness() const {
    return is_remove_mainchain_tx_witness_;
  }
  /**
   * @brief Set to isRemoveMainchainTxWitness
   * @param[in] is_remove_mainchain_tx_witness    setting value.
   */
  void SetIsRemoveMainchainTxWitness(  // line separate
    const bool& is_remove_mainchain_tx_witness) {  // NOLINT
    this->is_remove_mainchain_tx_witness_ = is_remove_mainchain_tx_witness;
  }
  /**
   * @brief Get data type of isRemoveMainchainTxWitness
   * @return Data type of isRemoveMainchainTxWitness
   */
  static std::string GetIsRemoveMainchainTxWitnessFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isRemoveMainchainTxWitness field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsRemoveMainchainTxWitnessString(  // line separate
      const ElementsPeginTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_remove_mainchain_tx_witness_);
  }
  /**
   * @brief Set json object to isRemoveMainchainTxWitness field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsRemoveMainchainTxWitnessString(  // line separate
      ElementsPeginTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_remove_mainchain_tx_witness_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsPeginTxInStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsPeginTxInStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsPeginTxInMapTable =
    cfd::core::JsonTableMap<ElementsPeginTxIn>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsPeginTxInMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsPeginTxInMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(isPegin) value
   */
  bool is_pegin_ = true;
  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(sequence) value
   */
  uint32_t sequence_ = 4294967295;
  /**
   * @brief JsonAPI(peginwitness) value
   */
  ElementsAddPeginWitness peginwitness_;  // NOLINT
  /**
   * @brief JsonAPI(isRemoveMainchainTxWitness) value
   */
  bool is_remove_mainchain_tx_witness_ = false;
};

// ------------------------------------------------------------------------
// ElementsPegoutTxOut
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsPegoutTxOut) class
 */
class ElementsPegoutTxOut
  : public cfd::core::JsonClassBase<ElementsPegoutTxOut> {
 public:
  ElementsPegoutTxOut() {
    CollectFieldName();
  }
  virtual ~ElementsPegoutTxOut() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const ElementsPegoutTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      ElementsPegoutTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const ElementsPegoutTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      ElementsPegoutTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const ElementsPegoutTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      ElementsPegoutTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of elementsNetwork
   * @return elementsNetwork
   */
  std::string GetElementsNetwork() const {
    return elements_network_;
  }
  /**
   * @brief Set to elementsNetwork
   * @param[in] elements_network    setting value.
   */
  void SetElementsNetwork(  // line separate
    const std::string& elements_network) {  // NOLINT
    this->elements_network_ = elements_network;
  }
  /**
   * @brief Get data type of elementsNetwork
   * @return Data type of elementsNetwork
   */
  static std::string GetElementsNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of elementsNetwork field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetElementsNetworkString(  // line separate
      const ElementsPegoutTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.elements_network_);
  }
  /**
   * @brief Set json object to elementsNetwork field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetElementsNetworkString(  // line separate
      ElementsPegoutTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.elements_network_, json_value);
  }

  /**
   * @brief Get of mainchainGenesisBlockHash
   * @return mainchainGenesisBlockHash
   */
  std::string GetMainchainGenesisBlockHash() const {
    return mainchain_genesis_block_hash_;
  }
  /**
   * @brief Set to mainchainGenesisBlockHash
   * @param[in] mainchain_genesis_block_hash    setting value.
   */
  void SetMainchainGenesisBlockHash(  // line separate
    const std::string& mainchain_genesis_block_hash) {  // NOLINT
    this->mainchain_genesis_block_hash_ = mainchain_genesis_block_hash;
  }
  /**
   * @brief Get data type of mainchainGenesisBlockHash
   * @return Data type of mainchainGenesisBlockHash
   */
  static std::string GetMainchainGenesisBlockHashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of mainchainGenesisBlockHash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMainchainGenesisBlockHashString(  // line separate
      const ElementsPegoutTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.mainchain_genesis_block_hash_);
  }
  /**
   * @brief Set json object to mainchainGenesisBlockHash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMainchainGenesisBlockHashString(  // line separate
      ElementsPegoutTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.mainchain_genesis_block_hash_, json_value);
  }

  /**
   * @brief Get of btcAddress
   * @return btcAddress
   */
  std::string GetBtcAddress() const {
    return btc_address_;
  }
  /**
   * @brief Set to btcAddress
   * @param[in] btc_address    setting value.
   */
  void SetBtcAddress(  // line separate
    const std::string& btc_address) {  // NOLINT
    this->btc_address_ = btc_address;
  }
  /**
   * @brief Get data type of btcAddress
   * @return Data type of btcAddress
   */
  static std::string GetBtcAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of btcAddress field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBtcAddressString(  // line separate
      const ElementsPegoutTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.btc_address_);
  }
  /**
   * @brief Set json object to btcAddress field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBtcAddressString(  // line separate
      ElementsPegoutTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.btc_address_, json_value);
  }

  /**
   * @brief Get of onlinePubkey
   * @return onlinePubkey
   */
  std::string GetOnlinePubkey() const {
    return online_pubkey_;
  }
  /**
   * @brief Set to onlinePubkey
   * @param[in] online_pubkey    setting value.
   */
  void SetOnlinePubkey(  // line separate
    const std::string& online_pubkey) {  // NOLINT
    this->online_pubkey_ = online_pubkey;
  }
  /**
   * @brief Get data type of onlinePubkey
   * @return Data type of onlinePubkey
   */
  static std::string GetOnlinePubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of onlinePubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetOnlinePubkeyString(  // line separate
      const ElementsPegoutTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.online_pubkey_);
  }
  /**
   * @brief Set json object to onlinePubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetOnlinePubkeyString(  // line separate
      ElementsPegoutTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.online_pubkey_, json_value);
  }

  /**
   * @brief Get of masterOnlineKey
   * @return masterOnlineKey
   */
  std::string GetMasterOnlineKey() const {
    return master_online_key_;
  }
  /**
   * @brief Set to masterOnlineKey
   * @param[in] master_online_key    setting value.
   */
  void SetMasterOnlineKey(  // line separate
    const std::string& master_online_key) {  // NOLINT
    this->master_online_key_ = master_online_key;
  }
  /**
   * @brief Get data type of masterOnlineKey
   * @return Data type of masterOnlineKey
   */
  static std::string GetMasterOnlineKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of masterOnlineKey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMasterOnlineKeyString(  // line separate
      const ElementsPegoutTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.master_online_key_);
  }
  /**
   * @brief Set json object to masterOnlineKey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMasterOnlineKeyString(  // line separate
      ElementsPegoutTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.master_online_key_, json_value);
  }

  /**
   * @brief Get of bitcoinDescriptor
   * @return bitcoinDescriptor
   */
  std::string GetBitcoinDescriptor() const {
    return bitcoin_descriptor_;
  }
  /**
   * @brief Set to bitcoinDescriptor
   * @param[in] bitcoin_descriptor    setting value.
   */
  void SetBitcoinDescriptor(  // line separate
    const std::string& bitcoin_descriptor) {  // NOLINT
    this->bitcoin_descriptor_ = bitcoin_descriptor;
  }
  /**
   * @brief Get data type of bitcoinDescriptor
   * @return Data type of bitcoinDescriptor
   */
  static std::string GetBitcoinDescriptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of bitcoinDescriptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBitcoinDescriptorString(  // line separate
      const ElementsPegoutTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.bitcoin_descriptor_);
  }
  /**
   * @brief Set json object to bitcoinDescriptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBitcoinDescriptorString(  // line separate
      ElementsPegoutTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.bitcoin_descriptor_, json_value);
  }

  /**
   * @brief Get of bip32Counter
   * @return bip32Counter
   */
  uint32_t GetBip32Counter() const {
    return bip32_counter_;
  }
  /**
   * @brief Set to bip32Counter
   * @param[in] bip32_counter    setting value.
   */
  void SetBip32Counter(  // line separate
    const uint32_t& bip32_counter) {  // NOLINT
    this->bip32_counter_ = bip32_counter;
  }
  /**
   * @brief Get data type of bip32Counter
   * @return Data type of bip32Counter
   */
  static std::string GetBip32CounterFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of bip32Counter field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBip32CounterString(  // line separate
      const ElementsPegoutTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.bip32_counter_);
  }
  /**
   * @brief Set json object to bip32Counter field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBip32CounterString(  // line separate
      ElementsPegoutTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.bip32_counter_, json_value);
  }

  /**
   * @brief Get of whitelist
   * @return whitelist
   */
  std::string GetWhitelist() const {
    return whitelist_;
  }
  /**
   * @brief Set to whitelist
   * @param[in] whitelist    setting value.
   */
  void SetWhitelist(  // line separate
    const std::string& whitelist) {  // NOLINT
    this->whitelist_ = whitelist;
  }
  /**
   * @brief Get data type of whitelist
   * @return Data type of whitelist
   */
  static std::string GetWhitelistFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of whitelist field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetWhitelistString(  // line separate
      const ElementsPegoutTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.whitelist_);
  }
  /**
   * @brief Set json object to whitelist field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetWhitelistString(  // line separate
      ElementsPegoutTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.whitelist_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsPegoutTxOutStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsPegoutTxOutStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsPegoutTxOutMapTable =
    cfd::core::JsonTableMap<ElementsPegoutTxOut>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsPegoutTxOutMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsPegoutTxOutMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(elementsNetwork) value
   */
  std::string elements_network_ = "";
  /**
   * @brief JsonAPI(mainchainGenesisBlockHash) value
   */
  std::string mainchain_genesis_block_hash_ = "";
  /**
   * @brief JsonAPI(btcAddress) value
   */
  std::string btc_address_ = "";
  /**
   * @brief JsonAPI(onlinePubkey) value
   */
  std::string online_pubkey_ = "";
  /**
   * @brief JsonAPI(masterOnlineKey) value
   */
  std::string master_online_key_ = "";
  /**
   * @brief JsonAPI(bitcoinDescriptor) value
   */
  std::string bitcoin_descriptor_ = "";
  /**
   * @brief JsonAPI(bip32Counter) value
   */
  uint32_t bip32_counter_ = 0;
  /**
   * @brief JsonAPI(whitelist) value
   */
  std::string whitelist_ = "";
};

// ------------------------------------------------------------------------
// ElementsTxOut
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsTxOut) class
 */
class ElementsTxOut
  : public cfd::core::JsonClassBase<ElementsTxOut> {
 public:
  ElementsTxOut() {
    CollectFieldName();
  }
  virtual ~ElementsTxOut() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const ElementsTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      ElementsTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const ElementsTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      ElementsTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const ElementsTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      ElementsTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of directLockingScript
   * @return directLockingScript
   */
  std::string GetDirectLockingScript() const {
    return direct_locking_script_;
  }
  /**
   * @brief Set to directLockingScript
   * @param[in] direct_locking_script    setting value.
   */
  void SetDirectLockingScript(  // line separate
    const std::string& direct_locking_script) {  // NOLINT
    this->direct_locking_script_ = direct_locking_script;
  }
  /**
   * @brief Get data type of directLockingScript
   * @return Data type of directLockingScript
   */
  static std::string GetDirectLockingScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of directLockingScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDirectLockingScriptString(  // line separate
      const ElementsTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.direct_locking_script_);
  }
  /**
   * @brief Set json object to directLockingScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDirectLockingScriptString(  // line separate
      ElementsTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.direct_locking_script_, json_value);
  }

  /**
   * @brief Get of directNonce
   * @return directNonce
   */
  std::string GetDirectNonce() const {
    return direct_nonce_;
  }
  /**
   * @brief Set to directNonce
   * @param[in] direct_nonce    setting value.
   */
  void SetDirectNonce(  // line separate
    const std::string& direct_nonce) {  // NOLINT
    this->direct_nonce_ = direct_nonce;
  }
  /**
   * @brief Get data type of directNonce
   * @return Data type of directNonce
   */
  static std::string GetDirectNonceFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of directNonce field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDirectNonceString(  // line separate
      const ElementsTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.direct_nonce_);
  }
  /**
   * @brief Set json object to directNonce field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDirectNonceString(  // line separate
      ElementsTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.direct_nonce_, json_value);
  }

  /**
   * @brief Get of isRemoveNonce
   * @return isRemoveNonce
   */
  bool GetIsRemoveNonce() const {
    return is_remove_nonce_;
  }
  /**
   * @brief Set to isRemoveNonce
   * @param[in] is_remove_nonce    setting value.
   */
  void SetIsRemoveNonce(  // line separate
    const bool& is_remove_nonce) {  // NOLINT
    this->is_remove_nonce_ = is_remove_nonce;
  }
  /**
   * @brief Get data type of isRemoveNonce
   * @return Data type of isRemoveNonce
   */
  static std::string GetIsRemoveNonceFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isRemoveNonce field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsRemoveNonceString(  // line separate
      const ElementsTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_remove_nonce_);
  }
  /**
   * @brief Set json object to isRemoveNonce field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsRemoveNonceString(  // line separate
      ElementsTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_remove_nonce_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsTxOutStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsTxOutStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsTxOutMapTable =
    cfd::core::JsonTableMap<ElementsTxOut>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsTxOutMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsTxOutMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(directLockingScript) value
   */
  std::string direct_locking_script_ = "";
  /**
   * @brief JsonAPI(directNonce) value
   */
  std::string direct_nonce_ = "";
  /**
   * @brief JsonAPI(isRemoveNonce) value
   */
  bool is_remove_nonce_ = false;
};

// ------------------------------------------------------------------------
// ElementsTxOutFee
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsTxOutFee) class
 */
class ElementsTxOutFee
  : public cfd::core::JsonClassBase<ElementsTxOutFee> {
 public:
  ElementsTxOutFee() {
    CollectFieldName();
  }
  virtual ~ElementsTxOutFee() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const ElementsTxOutFee& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      ElementsTxOutFee& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const ElementsTxOutFee& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      ElementsTxOutFee& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsTxOutFeeStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsTxOutFeeStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsTxOutFeeMapTable =
    cfd::core::JsonTableMap<ElementsTxOutFee>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsTxOutFeeMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsTxOutFeeMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
};

// ------------------------------------------------------------------------
// FailSignTxIn
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (FailSignTxIn) class
 */
class FailSignTxIn
  : public cfd::core::JsonClassBase<FailSignTxIn> {
 public:
  FailSignTxIn() {
    CollectFieldName();
  }
  virtual ~FailSignTxIn() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const FailSignTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      FailSignTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const FailSignTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      FailSignTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of reason
   * @return reason
   */
  std::string GetReason() const {
    return reason_;
  }
  /**
   * @brief Set to reason
   * @param[in] reason    setting value.
   */
  void SetReason(  // line separate
    const std::string& reason) {  // NOLINT
    this->reason_ = reason;
  }
  /**
   * @brief Get data type of reason
   * @return Data type of reason
   */
  static std::string GetReasonFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of reason field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetReasonString(  // line separate
      const FailSignTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.reason_);
  }
  /**
   * @brief Set json object to reason field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetReasonString(  // line separate
      FailSignTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.reason_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const FailSignTxInStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  FailSignTxInStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using FailSignTxInMapTable =
    cfd::core::JsonTableMap<FailSignTxIn>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const FailSignTxInMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static FailSignTxInMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(reason) value
   */
  std::string reason_ = "";
};

// ------------------------------------------------------------------------
// FinalizedPsbtInputData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (FinalizedPsbtInputData) class
 */
class FinalizedPsbtInputData
  : public cfd::core::JsonClassBase<FinalizedPsbtInputData> {
 public:
  FinalizedPsbtInputData() {
    CollectFieldName();
  }
  virtual ~FinalizedPsbtInputData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const FinalizedPsbtInputData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      FinalizedPsbtInputData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const FinalizedPsbtInputData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      FinalizedPsbtInputData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of finalScriptsig
   * @return finalScriptsig
   */
  std::string GetFinalScriptsig() const {
    return final_scriptsig_;
  }
  /**
   * @brief Set to finalScriptsig
   * @param[in] final_scriptsig    setting value.
   */
  void SetFinalScriptsig(  // line separate
    const std::string& final_scriptsig) {  // NOLINT
    this->final_scriptsig_ = final_scriptsig;
  }
  /**
   * @brief Get data type of finalScriptsig
   * @return Data type of finalScriptsig
   */
  static std::string GetFinalScriptsigFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of finalScriptsig field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFinalScriptsigString(  // line separate
      const FinalizedPsbtInputData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.final_scriptsig_);
  }
  /**
   * @brief Set json object to finalScriptsig field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFinalScriptsigString(  // line separate
      FinalizedPsbtInputData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.final_scriptsig_, json_value);
  }

  /**
   * @brief Get of final_scriptwitness.
   * @return final_scriptwitness
   */
  JsonValueVector<std::string>& GetFinal_scriptwitness() {  // NOLINT
    return final_scriptwitness_;
  }
  /**
   * @brief Set to final_scriptwitness.
   * @param[in] final_scriptwitness    setting value.
   */
  void SetFinal_scriptwitness(  // line separate
      const JsonValueVector<std::string>& final_scriptwitness) {  // NOLINT
    this->final_scriptwitness_ = final_scriptwitness;
  }
  /**
   * @brief Get data type of final_scriptwitness.
   * @return Data type of final_scriptwitness.
   */
  static std::string GetFinal_scriptwitnessFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of final_scriptwitness field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetFinal_scriptwitnessString(  // line separate
      const FinalizedPsbtInputData& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.final_scriptwitness_.Serialize();
  }
  /**
   * @brief Set json object to final_scriptwitness field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetFinal_scriptwitnessString(  // line separate
      FinalizedPsbtInputData& obj,  // NOLINT
      const UniValue& json_value) {
    obj.final_scriptwitness_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const FinalizedPsbtInputDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  FinalizedPsbtInputDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using FinalizedPsbtInputDataMapTable =
    cfd::core::JsonTableMap<FinalizedPsbtInputData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const FinalizedPsbtInputDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static FinalizedPsbtInputDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(finalScriptsig) value
   */
  std::string final_scriptsig_ = "";
  /**
   * @brief JsonAPI(final_scriptwitness) value
   */
  JsonValueVector<std::string> final_scriptwitness_;  // NOLINT
};

// ------------------------------------------------------------------------
// FundAmountMapData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (FundAmountMapData) class
 */
class FundAmountMapData
  : public cfd::core::JsonClassBase<FundAmountMapData> {
 public:
  FundAmountMapData() {
    CollectFieldName();
  }
  virtual ~FundAmountMapData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const FundAmountMapData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      FundAmountMapData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const FundAmountMapData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      FundAmountMapData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of reserveAddress
   * @return reserveAddress
   */
  std::string GetReserveAddress() const {
    return reserve_address_;
  }
  /**
   * @brief Set to reserveAddress
   * @param[in] reserve_address    setting value.
   */
  void SetReserveAddress(  // line separate
    const std::string& reserve_address) {  // NOLINT
    this->reserve_address_ = reserve_address;
  }
  /**
   * @brief Get data type of reserveAddress
   * @return Data type of reserveAddress
   */
  static std::string GetReserveAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of reserveAddress field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetReserveAddressString(  // line separate
      const FundAmountMapData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.reserve_address_);
  }
  /**
   * @brief Set json object to reserveAddress field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetReserveAddressString(  // line separate
      FundAmountMapData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.reserve_address_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const FundAmountMapDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  FundAmountMapDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using FundAmountMapDataMapTable =
    cfd::core::JsonTableMap<FundAmountMapData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const FundAmountMapDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static FundAmountMapDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(reserveAddress) value
   */
  std::string reserve_address_ = "";
};

// ------------------------------------------------------------------------
// FundFeeInformation
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (FundFeeInformation) class
 */
class FundFeeInformation
  : public cfd::core::JsonClassBase<FundFeeInformation> {
 public:
  FundFeeInformation() {
    CollectFieldName();
  }
  virtual ~FundFeeInformation() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of feeRate
   * @return feeRate
   */
  double GetFeeRate() const {
    return fee_rate_;
  }
  /**
   * @brief Set to feeRate
   * @param[in] fee_rate    setting value.
   */
  void SetFeeRate(  // line separate
    const double& fee_rate) {  // NOLINT
    this->fee_rate_ = fee_rate;
  }
  /**
   * @brief Get data type of feeRate
   * @return Data type of feeRate
   */
  static std::string GetFeeRateFieldType() {
    return "double";
  }
  /**
   * @brief Get json string of feeRate field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFeeRateString(  // line separate
      const FundFeeInformation& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fee_rate_);
  }
  /**
   * @brief Set json object to feeRate field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFeeRateString(  // line separate
      FundFeeInformation& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fee_rate_, json_value);
  }

  /**
   * @brief Get of longTermFeeRate
   * @return longTermFeeRate
   */
  double GetLongTermFeeRate() const {
    return long_term_fee_rate_;
  }
  /**
   * @brief Set to longTermFeeRate
   * @param[in] long_term_fee_rate    setting value.
   */
  void SetLongTermFeeRate(  // line separate
    const double& long_term_fee_rate) {  // NOLINT
    this->long_term_fee_rate_ = long_term_fee_rate;
  }
  /**
   * @brief Get data type of longTermFeeRate
   * @return Data type of longTermFeeRate
   */
  static std::string GetLongTermFeeRateFieldType() {
    return "double";
  }
  /**
   * @brief Get json string of longTermFeeRate field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLongTermFeeRateString(  // line separate
      const FundFeeInformation& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.long_term_fee_rate_);
  }
  /**
   * @brief Set json object to longTermFeeRate field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLongTermFeeRateString(  // line separate
      FundFeeInformation& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.long_term_fee_rate_, json_value);
  }

  /**
   * @brief Get of knapsackMinChange
   * @return knapsackMinChange
   */
  int64_t GetKnapsackMinChange() const {
    return knapsack_min_change_;
  }
  /**
   * @brief Set to knapsackMinChange
   * @param[in] knapsack_min_change    setting value.
   */
  void SetKnapsackMinChange(  // line separate
    const int64_t& knapsack_min_change) {  // NOLINT
    this->knapsack_min_change_ = knapsack_min_change;
  }
  /**
   * @brief Get data type of knapsackMinChange
   * @return Data type of knapsackMinChange
   */
  static std::string GetKnapsackMinChangeFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of knapsackMinChange field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetKnapsackMinChangeString(  // line separate
      const FundFeeInformation& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.knapsack_min_change_);
  }
  /**
   * @brief Set json object to knapsackMinChange field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetKnapsackMinChangeString(  // line separate
      FundFeeInformation& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.knapsack_min_change_, json_value);
  }

  /**
   * @brief Get of dustFeeRate
   * @return dustFeeRate
   */
  double GetDustFeeRate() const {
    return dust_fee_rate_;
  }
  /**
   * @brief Set to dustFeeRate
   * @param[in] dust_fee_rate    setting value.
   */
  void SetDustFeeRate(  // line separate
    const double& dust_fee_rate) {  // NOLINT
    this->dust_fee_rate_ = dust_fee_rate;
  }
  /**
   * @brief Get data type of dustFeeRate
   * @return Data type of dustFeeRate
   */
  static std::string GetDustFeeRateFieldType() {
    return "double";
  }
  /**
   * @brief Get json string of dustFeeRate field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDustFeeRateString(  // line separate
      const FundFeeInformation& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.dust_fee_rate_);
  }
  /**
   * @brief Set json object to dustFeeRate field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDustFeeRateString(  // line separate
      FundFeeInformation& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.dust_fee_rate_, json_value);
  }

  /**
   * @brief Get of feeAsset
   * @return feeAsset
   */
  std::string GetFeeAsset() const {
    return fee_asset_;
  }
  /**
   * @brief Set to feeAsset
   * @param[in] fee_asset    setting value.
   */
  void SetFeeAsset(  // line separate
    const std::string& fee_asset) {  // NOLINT
    this->fee_asset_ = fee_asset;
  }
  /**
   * @brief Get data type of feeAsset
   * @return Data type of feeAsset
   */
  static std::string GetFeeAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of feeAsset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFeeAssetString(  // line separate
      const FundFeeInformation& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fee_asset_);
  }
  /**
   * @brief Set json object to feeAsset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFeeAssetString(  // line separate
      FundFeeInformation& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fee_asset_, json_value);
  }

  /**
   * @brief Get of isBlindEstimateFee
   * @return isBlindEstimateFee
   */
  bool GetIsBlindEstimateFee() const {
    return is_blind_estimate_fee_;
  }
  /**
   * @brief Set to isBlindEstimateFee
   * @param[in] is_blind_estimate_fee    setting value.
   */
  void SetIsBlindEstimateFee(  // line separate
    const bool& is_blind_estimate_fee) {  // NOLINT
    this->is_blind_estimate_fee_ = is_blind_estimate_fee;
  }
  /**
   * @brief Get data type of isBlindEstimateFee
   * @return Data type of isBlindEstimateFee
   */
  static std::string GetIsBlindEstimateFeeFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isBlindEstimateFee field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsBlindEstimateFeeString(  // line separate
      const FundFeeInformation& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_blind_estimate_fee_);
  }
  /**
   * @brief Set json object to isBlindEstimateFee field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsBlindEstimateFeeString(  // line separate
      FundFeeInformation& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_blind_estimate_fee_, json_value);
  }

  /**
   * @brief Get of exponent
   * @return exponent
   */
  int GetExponent() const {
    return exponent_;
  }
  /**
   * @brief Set to exponent
   * @param[in] exponent    setting value.
   */
  void SetExponent(  // line separate
    const int& exponent) {  // NOLINT
    this->exponent_ = exponent;
  }
  /**
   * @brief Get data type of exponent
   * @return Data type of exponent
   */
  static std::string GetExponentFieldType() {
    return "int";
  }
  /**
   * @brief Get json string of exponent field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExponentString(  // line separate
      const FundFeeInformation& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.exponent_);
  }
  /**
   * @brief Set json object to exponent field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExponentString(  // line separate
      FundFeeInformation& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.exponent_, json_value);
  }

  /**
   * @brief Get of minimumBits
   * @return minimumBits
   */
  int GetMinimumBits() const {
    return minimum_bits_;
  }
  /**
   * @brief Set to minimumBits
   * @param[in] minimum_bits    setting value.
   */
  void SetMinimumBits(  // line separate
    const int& minimum_bits) {  // NOLINT
    this->minimum_bits_ = minimum_bits;
  }
  /**
   * @brief Get data type of minimumBits
   * @return Data type of minimumBits
   */
  static std::string GetMinimumBitsFieldType() {
    return "int";
  }
  /**
   * @brief Get json string of minimumBits field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMinimumBitsString(  // line separate
      const FundFeeInformation& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.minimum_bits_);
  }
  /**
   * @brief Set json object to minimumBits field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMinimumBitsString(  // line separate
      FundFeeInformation& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.minimum_bits_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const FundFeeInformationStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  FundFeeInformationStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using FundFeeInformationMapTable =
    cfd::core::JsonTableMap<FundFeeInformation>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const FundFeeInformationMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static FundFeeInformationMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(feeRate) value
   */
  double fee_rate_ = 20;
  /**
   * @brief JsonAPI(longTermFeeRate) value
   */
  double long_term_fee_rate_ = 20;
  /**
   * @brief JsonAPI(knapsackMinChange) value
   */
  int64_t knapsack_min_change_ = -1;
  /**
   * @brief JsonAPI(dustFeeRate) value
   */
  double dust_fee_rate_ = 3;
  /**
   * @brief JsonAPI(feeAsset) value
   */
  std::string fee_asset_ = "";
  /**
   * @brief JsonAPI(isBlindEstimateFee) value
   */
  bool is_blind_estimate_fee_ = true;
  /**
   * @brief JsonAPI(exponent) value
   */
  int exponent_ = 0;
  /**
   * @brief JsonAPI(minimumBits) value
   */
  int minimum_bits_ = 52;
};

// ------------------------------------------------------------------------
// FundSelectUtxoData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (FundSelectUtxoData) class
 */
class FundSelectUtxoData
  : public cfd::core::JsonClassBase<FundSelectUtxoData> {
 public:
  FundSelectUtxoData() {
    CollectFieldName();
  }
  virtual ~FundSelectUtxoData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const FundSelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      FundSelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const FundSelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      FundSelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const FundSelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      FundSelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const FundSelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      FundSelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const FundSelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      FundSelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of redeemScript
   * @return redeemScript
   */
  std::string GetRedeemScript() const {
    return redeem_script_;
  }
  /**
   * @brief Set to redeemScript
   * @param[in] redeem_script    setting value.
   */
  void SetRedeemScript(  // line separate
    const std::string& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeemScript
   * @return Data type of redeemScript
   */
  static std::string GetRedeemScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of redeemScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRedeemScriptString(  // line separate
      const FundSelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.redeem_script_);
  }
  /**
   * @brief Set json object to redeemScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRedeemScriptString(  // line separate
      FundSelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.redeem_script_, json_value);
  }

  /**
   * @brief Get of descriptor
   * @return descriptor
   */
  std::string GetDescriptor() const {
    return descriptor_;
  }
  /**
   * @brief Set to descriptor
   * @param[in] descriptor    setting value.
   */
  void SetDescriptor(  // line separate
    const std::string& descriptor) {  // NOLINT
    this->descriptor_ = descriptor;
  }
  /**
   * @brief Get data type of descriptor
   * @return Data type of descriptor
   */
  static std::string GetDescriptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of descriptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDescriptorString(  // line separate
      const FundSelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.descriptor_);
  }
  /**
   * @brief Set json object to descriptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDescriptorString(  // line separate
      FundSelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.descriptor_, json_value);
  }

  /**
   * @brief Get of isIssuance
   * @return isIssuance
   */
  bool GetIsIssuance() const {
    return is_issuance_;
  }
  /**
   * @brief Set to isIssuance
   * @param[in] is_issuance    setting value.
   */
  void SetIsIssuance(  // line separate
    const bool& is_issuance) {  // NOLINT
    this->is_issuance_ = is_issuance;
  }
  /**
   * @brief Get data type of isIssuance
   * @return Data type of isIssuance
   */
  static std::string GetIsIssuanceFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isIssuance field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsIssuanceString(  // line separate
      const FundSelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_issuance_);
  }
  /**
   * @brief Set json object to isIssuance field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsIssuanceString(  // line separate
      FundSelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_issuance_, json_value);
  }

  /**
   * @brief Get of isBlindIssuance
   * @return isBlindIssuance
   */
  bool GetIsBlindIssuance() const {
    return is_blind_issuance_;
  }
  /**
   * @brief Set to isBlindIssuance
   * @param[in] is_blind_issuance    setting value.
   */
  void SetIsBlindIssuance(  // line separate
    const bool& is_blind_issuance) {  // NOLINT
    this->is_blind_issuance_ = is_blind_issuance;
  }
  /**
   * @brief Get data type of isBlindIssuance
   * @return Data type of isBlindIssuance
   */
  static std::string GetIsBlindIssuanceFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isBlindIssuance field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsBlindIssuanceString(  // line separate
      const FundSelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_blind_issuance_);
  }
  /**
   * @brief Set json object to isBlindIssuance field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsBlindIssuanceString(  // line separate
      FundSelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_blind_issuance_, json_value);
  }

  /**
   * @brief Get of isPegin
   * @return isPegin
   */
  bool GetIsPegin() const {
    return is_pegin_;
  }
  /**
   * @brief Set to isPegin
   * @param[in] is_pegin    setting value.
   */
  void SetIsPegin(  // line separate
    const bool& is_pegin) {  // NOLINT
    this->is_pegin_ = is_pegin;
  }
  /**
   * @brief Get data type of isPegin
   * @return Data type of isPegin
   */
  static std::string GetIsPeginFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isPegin field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsPeginString(  // line separate
      const FundSelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_pegin_);
  }
  /**
   * @brief Set json object to isPegin field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsPeginString(  // line separate
      FundSelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_pegin_, json_value);
  }

  /**
   * @brief Get of peginBtcTxSize
   * @return peginBtcTxSize
   */
  uint32_t GetPeginBtcTxSize() const {
    return pegin_btc_tx_size_;
  }
  /**
   * @brief Set to peginBtcTxSize
   * @param[in] pegin_btc_tx_size    setting value.
   */
  void SetPeginBtcTxSize(  // line separate
    const uint32_t& pegin_btc_tx_size) {  // NOLINT
    this->pegin_btc_tx_size_ = pegin_btc_tx_size;
  }
  /**
   * @brief Get data type of peginBtcTxSize
   * @return Data type of peginBtcTxSize
   */
  static std::string GetPeginBtcTxSizeFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of peginBtcTxSize field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPeginBtcTxSizeString(  // line separate
      const FundSelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pegin_btc_tx_size_);
  }
  /**
   * @brief Set json object to peginBtcTxSize field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPeginBtcTxSizeString(  // line separate
      FundSelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pegin_btc_tx_size_, json_value);
  }

  /**
   * @brief Get of fedpegScript
   * @return fedpegScript
   */
  std::string GetFedpegScript() const {
    return fedpeg_script_;
  }
  /**
   * @brief Set to fedpegScript
   * @param[in] fedpeg_script    setting value.
   */
  void SetFedpegScript(  // line separate
    const std::string& fedpeg_script) {  // NOLINT
    this->fedpeg_script_ = fedpeg_script;
  }
  /**
   * @brief Get data type of fedpegScript
   * @return Data type of fedpegScript
   */
  static std::string GetFedpegScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of fedpegScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFedpegScriptString(  // line separate
      const FundSelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fedpeg_script_);
  }
  /**
   * @brief Set json object to fedpegScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFedpegScriptString(  // line separate
      FundSelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fedpeg_script_, json_value);
  }

  /**
   * @brief Get of scriptSigTemplate
   * @return scriptSigTemplate
   */
  std::string GetScriptSigTemplate() const {
    return script_sig_template_;
  }
  /**
   * @brief Set to scriptSigTemplate
   * @param[in] script_sig_template    setting value.
   */
  void SetScriptSigTemplate(  // line separate
    const std::string& script_sig_template) {  // NOLINT
    this->script_sig_template_ = script_sig_template;
  }
  /**
   * @brief Get data type of scriptSigTemplate
   * @return Data type of scriptSigTemplate
   */
  static std::string GetScriptSigTemplateFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of scriptSigTemplate field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetScriptSigTemplateString(  // line separate
      const FundSelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.script_sig_template_);
  }
  /**
   * @brief Set json object to scriptSigTemplate field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetScriptSigTemplateString(  // line separate
      FundSelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.script_sig_template_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const FundSelectUtxoDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  FundSelectUtxoDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using FundSelectUtxoDataMapTable =
    cfd::core::JsonTableMap<FundSelectUtxoData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const FundSelectUtxoDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static FundSelectUtxoDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(redeemScript) value
   */
  std::string redeem_script_ = "";
  /**
   * @brief JsonAPI(descriptor) value
   */
  std::string descriptor_ = "";
  /**
   * @brief JsonAPI(isIssuance) value
   */
  bool is_issuance_ = false;
  /**
   * @brief JsonAPI(isBlindIssuance) value
   */
  bool is_blind_issuance_ = false;
  /**
   * @brief JsonAPI(isPegin) value
   */
  bool is_pegin_ = false;
  /**
   * @brief JsonAPI(peginBtcTxSize) value
   */
  uint32_t pegin_btc_tx_size_ = 0;
  /**
   * @brief JsonAPI(fedpegScript) value
   */
  std::string fedpeg_script_ = "";
  /**
   * @brief JsonAPI(scriptSigTemplate) value
   */
  std::string script_sig_template_ = "";
};

// ------------------------------------------------------------------------
// FundUtxoJsonData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (FundUtxoJsonData) class
 */
class FundUtxoJsonData
  : public cfd::core::JsonClassBase<FundUtxoJsonData> {
 public:
  FundUtxoJsonData() {
    CollectFieldName();
  }
  virtual ~FundUtxoJsonData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const FundUtxoJsonData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      FundUtxoJsonData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const FundUtxoJsonData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      FundUtxoJsonData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const FundUtxoJsonData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      FundUtxoJsonData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const FundUtxoJsonData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      FundUtxoJsonData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const FundUtxoJsonData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      FundUtxoJsonData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of descriptor
   * @return descriptor
   */
  std::string GetDescriptor() const {
    return descriptor_;
  }
  /**
   * @brief Set to descriptor
   * @param[in] descriptor    setting value.
   */
  void SetDescriptor(  // line separate
    const std::string& descriptor) {  // NOLINT
    this->descriptor_ = descriptor;
  }
  /**
   * @brief Get data type of descriptor
   * @return Data type of descriptor
   */
  static std::string GetDescriptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of descriptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDescriptorString(  // line separate
      const FundUtxoJsonData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.descriptor_);
  }
  /**
   * @brief Set json object to descriptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDescriptorString(  // line separate
      FundUtxoJsonData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.descriptor_, json_value);
  }

  /**
   * @brief Get of scriptSigTemplate
   * @return scriptSigTemplate
   */
  std::string GetScriptSigTemplate() const {
    return script_sig_template_;
  }
  /**
   * @brief Set to scriptSigTemplate
   * @param[in] script_sig_template    setting value.
   */
  void SetScriptSigTemplate(  // line separate
    const std::string& script_sig_template) {  // NOLINT
    this->script_sig_template_ = script_sig_template;
  }
  /**
   * @brief Get data type of scriptSigTemplate
   * @return Data type of scriptSigTemplate
   */
  static std::string GetScriptSigTemplateFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of scriptSigTemplate field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetScriptSigTemplateString(  // line separate
      const FundUtxoJsonData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.script_sig_template_);
  }
  /**
   * @brief Set json object to scriptSigTemplate field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetScriptSigTemplateString(  // line separate
      FundUtxoJsonData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.script_sig_template_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const FundUtxoJsonDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  FundUtxoJsonDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using FundUtxoJsonDataMapTable =
    cfd::core::JsonTableMap<FundUtxoJsonData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const FundUtxoJsonDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static FundUtxoJsonDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(descriptor) value
   */
  std::string descriptor_ = "";
  /**
   * @brief JsonAPI(scriptSigTemplate) value
   */
  std::string script_sig_template_ = "";
};

// ------------------------------------------------------------------------
// GetSighashTxIn
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetSighashTxIn) class
 */
class GetSighashTxIn
  : public cfd::core::JsonClassBase<GetSighashTxIn> {
 public:
  GetSighashTxIn() {
    CollectFieldName();
  }
  virtual ~GetSighashTxIn() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const GetSighashTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      GetSighashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const GetSighashTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      GetSighashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of keyData.
   * @return keyData
   */
  HashKeyData& GetKeyData() {  // NOLINT
    return key_data_;
  }
  /**
   * @brief Set to keyData.
   * @param[in] key_data    setting value.
   */
  void SetKeyData(  // line separate
      const HashKeyData& key_data) {  // NOLINT
    this->key_data_ = key_data;
  }
  /**
   * @brief Get data type of keyData.
   * @return Data type of keyData.
   */
  static std::string GetKeyDataFieldType() {
    return "HashKeyData";  // NOLINT
  }
  /**
   * @brief Get json string of keyData field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetKeyDataString(  // line separate
      const GetSighashTxIn& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.key_data_.Serialize();
  }
  /**
   * @brief Set json object to keyData field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetKeyDataString(  // line separate
      GetSighashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    obj.key_data_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const GetSighashTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      GetSighashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Get of sighashType
   * @return sighashType
   */
  std::string GetSighashType() const {
    return sighash_type_;
  }
  /**
   * @brief Set to sighashType
   * @param[in] sighash_type    setting value.
   */
  void SetSighashType(  // line separate
    const std::string& sighash_type) {  // NOLINT
    this->sighash_type_ = sighash_type;
  }
  /**
   * @brief Get data type of sighashType
   * @return Data type of sighashType
   */
  static std::string GetSighashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashTypeString(  // line separate
      const GetSighashTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_type_);
  }
  /**
   * @brief Set json object to sighashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashTypeString(  // line separate
      GetSighashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_type_, json_value);
  }

  /**
   * @brief Get of sighashAnyoneCanPay
   * @return sighashAnyoneCanPay
   */
  bool GetSighashAnyoneCanPay() const {
    return sighash_anyone_can_pay_;
  }
  /**
   * @brief Set to sighashAnyoneCanPay
   * @param[in] sighash_anyone_can_pay    setting value.
   */
  void SetSighashAnyoneCanPay(  // line separate
    const bool& sighash_anyone_can_pay) {  // NOLINT
    this->sighash_anyone_can_pay_ = sighash_anyone_can_pay;
  }
  /**
   * @brief Get data type of sighashAnyoneCanPay
   * @return Data type of sighashAnyoneCanPay
   */
  static std::string GetSighashAnyoneCanPayFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashAnyoneCanPayString(  // line separate
      const GetSighashTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_anyone_can_pay_);
  }
  /**
   * @brief Set json object to sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashAnyoneCanPayString(  // line separate
      GetSighashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_anyone_can_pay_, json_value);
  }

  /**
   * @brief Get of annex
   * @return annex
   */
  std::string GetAnnex() const {
    return annex_;
  }
  /**
   * @brief Set to annex
   * @param[in] annex    setting value.
   */
  void SetAnnex(  // line separate
    const std::string& annex) {  // NOLINT
    this->annex_ = annex;
  }
  /**
   * @brief Get data type of annex
   * @return Data type of annex
   */
  static std::string GetAnnexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of annex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAnnexString(  // line separate
      const GetSighashTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.annex_);
  }
  /**
   * @brief Set json object to annex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAnnexString(  // line separate
      GetSighashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.annex_, json_value);
  }

  /**
   * @brief Get of codeSeparatorPosition
   * @return codeSeparatorPosition
   */
  int64_t GetCodeSeparatorPosition() const {
    return code_separator_position_;
  }
  /**
   * @brief Set to codeSeparatorPosition
   * @param[in] code_separator_position    setting value.
   */
  void SetCodeSeparatorPosition(  // line separate
    const int64_t& code_separator_position) {  // NOLINT
    this->code_separator_position_ = code_separator_position;
  }
  /**
   * @brief Get data type of codeSeparatorPosition
   * @return Data type of codeSeparatorPosition
   */
  static std::string GetCodeSeparatorPositionFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of codeSeparatorPosition field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetCodeSeparatorPositionString(  // line separate
      const GetSighashTxIn& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.code_separator_position_);
  }
  /**
   * @brief Set json object to codeSeparatorPosition field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetCodeSeparatorPositionString(  // line separate
      GetSighashTxIn& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.code_separator_position_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetSighashTxInStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetSighashTxInStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetSighashTxInMapTable =
    cfd::core::JsonTableMap<GetSighashTxIn>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetSighashTxInMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetSighashTxInMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(keyData) value
   */
  HashKeyData key_data_;  // NOLINT
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "taproot";
  /**
   * @brief JsonAPI(sighashType) value
   */
  std::string sighash_type_ = "all";
  /**
   * @brief JsonAPI(sighashAnyoneCanPay) value
   */
  bool sighash_anyone_can_pay_ = false;
  /**
   * @brief JsonAPI(annex) value
   */
  std::string annex_ = "";
  /**
   * @brief JsonAPI(codeSeparatorPosition) value
   */
  int64_t code_separator_position_ = -1;
};

// ------------------------------------------------------------------------
// IssuanceDataRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (IssuanceDataRequest) class
 */
class IssuanceDataRequest
  : public cfd::core::JsonClassBase<IssuanceDataRequest> {
 public:
  IssuanceDataRequest() {
    CollectFieldName();
  }
  virtual ~IssuanceDataRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const IssuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      IssuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const IssuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      IssuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of assetAmount
   * @return assetAmount
   */
  int64_t GetAssetAmount() const {
    return asset_amount_;
  }
  /**
   * @brief Set to assetAmount
   * @param[in] asset_amount    setting value.
   */
  void SetAssetAmount(  // line separate
    const int64_t& asset_amount) {  // NOLINT
    this->asset_amount_ = asset_amount;
  }
  /**
   * @brief Get data type of assetAmount
   * @return Data type of assetAmount
   */
  static std::string GetAssetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of assetAmount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetAmountString(  // line separate
      const IssuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_amount_);
  }
  /**
   * @brief Set json object to assetAmount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetAmountString(  // line separate
      IssuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_amount_, json_value);
  }

  /**
   * @brief Get of assetAddress
   * @return assetAddress
   */
  std::string GetAssetAddress() const {
    return asset_address_;
  }
  /**
   * @brief Set to assetAddress
   * @param[in] asset_address    setting value.
   */
  void SetAssetAddress(  // line separate
    const std::string& asset_address) {  // NOLINT
    this->asset_address_ = asset_address;
  }
  /**
   * @brief Get data type of assetAddress
   * @return Data type of assetAddress
   */
  static std::string GetAssetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetAddress field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetAddressString(  // line separate
      const IssuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_address_);
  }
  /**
   * @brief Set json object to assetAddress field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetAddressString(  // line separate
      IssuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_address_, json_value);
  }

  /**
   * @brief Get of tokenAmount
   * @return tokenAmount
   */
  int64_t GetTokenAmount() const {
    return token_amount_;
  }
  /**
   * @brief Set to tokenAmount
   * @param[in] token_amount    setting value.
   */
  void SetTokenAmount(  // line separate
    const int64_t& token_amount) {  // NOLINT
    this->token_amount_ = token_amount;
  }
  /**
   * @brief Get data type of tokenAmount
   * @return Data type of tokenAmount
   */
  static std::string GetTokenAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of tokenAmount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTokenAmountString(  // line separate
      const IssuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.token_amount_);
  }
  /**
   * @brief Set json object to tokenAmount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTokenAmountString(  // line separate
      IssuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.token_amount_, json_value);
  }

  /**
   * @brief Get of tokenAddress
   * @return tokenAddress
   */
  std::string GetTokenAddress() const {
    return token_address_;
  }
  /**
   * @brief Set to tokenAddress
   * @param[in] token_address    setting value.
   */
  void SetTokenAddress(  // line separate
    const std::string& token_address) {  // NOLINT
    this->token_address_ = token_address;
  }
  /**
   * @brief Get data type of tokenAddress
   * @return Data type of tokenAddress
   */
  static std::string GetTokenAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tokenAddress field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTokenAddressString(  // line separate
      const IssuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.token_address_);
  }
  /**
   * @brief Set json object to tokenAddress field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTokenAddressString(  // line separate
      IssuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.token_address_, json_value);
  }

  /**
   * @brief Get of isBlind
   * @return isBlind
   */
  bool GetIsBlind() const {
    return is_blind_;
  }
  /**
   * @brief Set to isBlind
   * @param[in] is_blind    setting value.
   */
  void SetIsBlind(  // line separate
    const bool& is_blind) {  // NOLINT
    this->is_blind_ = is_blind;
  }
  /**
   * @brief Get data type of isBlind
   * @return Data type of isBlind
   */
  static std::string GetIsBlindFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isBlind field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsBlindString(  // line separate
      const IssuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_blind_);
  }
  /**
   * @brief Set json object to isBlind field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsBlindString(  // line separate
      IssuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_blind_, json_value);
  }

  /**
   * @brief Get of contractHash
   * @return contractHash
   */
  std::string GetContractHash() const {
    return contract_hash_;
  }
  /**
   * @brief Set to contractHash
   * @param[in] contract_hash    setting value.
   */
  void SetContractHash(  // line separate
    const std::string& contract_hash) {  // NOLINT
    this->contract_hash_ = contract_hash;
  }
  /**
   * @brief Get data type of contractHash
   * @return Data type of contractHash
   */
  static std::string GetContractHashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of contractHash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetContractHashString(  // line separate
      const IssuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.contract_hash_);
  }
  /**
   * @brief Set json object to contractHash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetContractHashString(  // line separate
      IssuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.contract_hash_, json_value);
  }

  /**
   * @brief Get of isRemoveNonce
   * @return isRemoveNonce
   */
  bool GetIsRemoveNonce() const {
    return is_remove_nonce_;
  }
  /**
   * @brief Set to isRemoveNonce
   * @param[in] is_remove_nonce    setting value.
   */
  void SetIsRemoveNonce(  // line separate
    const bool& is_remove_nonce) {  // NOLINT
    this->is_remove_nonce_ = is_remove_nonce;
  }
  /**
   * @brief Get data type of isRemoveNonce
   * @return Data type of isRemoveNonce
   */
  static std::string GetIsRemoveNonceFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isRemoveNonce field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsRemoveNonceString(  // line separate
      const IssuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_remove_nonce_);
  }
  /**
   * @brief Set json object to isRemoveNonce field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsRemoveNonceString(  // line separate
      IssuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_remove_nonce_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const IssuanceDataRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  IssuanceDataRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using IssuanceDataRequestMapTable =
    cfd::core::JsonTableMap<IssuanceDataRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const IssuanceDataRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static IssuanceDataRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(assetAmount) value
   */
  int64_t asset_amount_ = 0;
  /**
   * @brief JsonAPI(assetAddress) value
   */
  std::string asset_address_ = "";
  /**
   * @brief JsonAPI(tokenAmount) value
   */
  int64_t token_amount_ = 0;
  /**
   * @brief JsonAPI(tokenAddress) value
   */
  std::string token_address_ = "";
  /**
   * @brief JsonAPI(isBlind) value
   */
  bool is_blind_ = true;
  /**
   * @brief JsonAPI(contractHash) value
   */
  std::string contract_hash_ = "";
  /**
   * @brief JsonAPI(isRemoveNonce) value
   */
  bool is_remove_nonce_ = false;
};

// ------------------------------------------------------------------------
// IssuanceDataResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (IssuanceDataResponse) class
 */
class IssuanceDataResponse
  : public cfd::core::JsonClassBase<IssuanceDataResponse> {
 public:
  IssuanceDataResponse() {
    CollectFieldName();
  }
  virtual ~IssuanceDataResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const IssuanceDataResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      IssuanceDataResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const IssuanceDataResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      IssuanceDataResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const IssuanceDataResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      IssuanceDataResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of entropy
   * @return entropy
   */
  std::string GetEntropy() const {
    return entropy_;
  }
  /**
   * @brief Set to entropy
   * @param[in] entropy    setting value.
   */
  void SetEntropy(  // line separate
    const std::string& entropy) {  // NOLINT
    this->entropy_ = entropy;
  }
  /**
   * @brief Get data type of entropy
   * @return Data type of entropy
   */
  static std::string GetEntropyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of entropy field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetEntropyString(  // line separate
      const IssuanceDataResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.entropy_);
  }
  /**
   * @brief Set json object to entropy field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetEntropyString(  // line separate
      IssuanceDataResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.entropy_, json_value);
  }

  /**
   * @brief Get of token
   * @return token
   */
  std::string GetToken() const {
    return token_;
  }
  /**
   * @brief Set to token
   * @param[in] token    setting value.
   */
  void SetToken(  // line separate
    const std::string& token) {  // NOLINT
    this->token_ = token;
  }
  /**
   * @brief Get data type of token
   * @return Data type of token
   */
  static std::string GetTokenFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of token field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTokenString(  // line separate
      const IssuanceDataResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.token_);
  }
  /**
   * @brief Set json object to token field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTokenString(  // line separate
      IssuanceDataResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.token_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const IssuanceDataResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  IssuanceDataResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using IssuanceDataResponseMapTable =
    cfd::core::JsonTableMap<IssuanceDataResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const IssuanceDataResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static IssuanceDataResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(entropy) value
   */
  std::string entropy_ = "";
  /**
   * @brief JsonAPI(token) value
   */
  std::string token_ = "";
};

// ------------------------------------------------------------------------
// PrivkeyData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PrivkeyData) class
 */
class PrivkeyData
  : public cfd::core::JsonClassBase<PrivkeyData> {
 public:
  PrivkeyData() {
    CollectFieldName();
  }
  virtual ~PrivkeyData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of privkey
   * @return privkey
   */
  std::string GetPrivkey() const {
    return privkey_;
  }
  /**
   * @brief Set to privkey
   * @param[in] privkey    setting value.
   */
  void SetPrivkey(  // line separate
    const std::string& privkey) {  // NOLINT
    this->privkey_ = privkey;
  }
  /**
   * @brief Get data type of privkey
   * @return Data type of privkey
   */
  static std::string GetPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of privkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPrivkeyString(  // line separate
      const PrivkeyData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.privkey_);
  }
  /**
   * @brief Set json object to privkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPrivkeyString(  // line separate
      PrivkeyData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.privkey_, json_value);
  }

  /**
   * @brief Get of wif
   * @return wif
   */
  bool GetWif() const {
    return wif_;
  }
  /**
   * @brief Set to wif
   * @param[in] wif    setting value.
   */
  void SetWif(  // line separate
    const bool& wif) {  // NOLINT
    this->wif_ = wif;
  }
  /**
   * @brief Get data type of wif
   * @return Data type of wif
   */
  static std::string GetWifFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of wif field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetWifString(  // line separate
      const PrivkeyData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.wif_);
  }
  /**
   * @brief Set json object to wif field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetWifString(  // line separate
      PrivkeyData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.wif_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const PrivkeyData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      PrivkeyData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of isCompressed
   * @return isCompressed
   */
  bool GetIsCompressed() const {
    return is_compressed_;
  }
  /**
   * @brief Set to isCompressed
   * @param[in] is_compressed    setting value.
   */
  void SetIsCompressed(  // line separate
    const bool& is_compressed) {  // NOLINT
    this->is_compressed_ = is_compressed;
  }
  /**
   * @brief Get data type of isCompressed
   * @return Data type of isCompressed
   */
  static std::string GetIsCompressedFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isCompressed field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsCompressedString(  // line separate
      const PrivkeyData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_compressed_);
  }
  /**
   * @brief Set json object to isCompressed field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsCompressedString(  // line separate
      PrivkeyData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_compressed_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PrivkeyDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PrivkeyDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PrivkeyDataMapTable =
    cfd::core::JsonTableMap<PrivkeyData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PrivkeyDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PrivkeyDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(privkey) value
   */
  std::string privkey_ = "";
  /**
   * @brief JsonAPI(wif) value
   */
  bool wif_ = true;
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(isCompressed) value
   */
  bool is_compressed_ = true;
};

// ------------------------------------------------------------------------
// PsbtAddInputRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtAddInputRequest) class
 */
class PsbtAddInputRequest
  : public cfd::core::JsonClassBase<PsbtAddInputRequest> {
 public:
  PsbtAddInputRequest() {
    CollectFieldName();
  }
  virtual ~PsbtAddInputRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txin.
   * @return txin
   */
  TxInRequest& GetTxin() {  // NOLINT
    return txin_;
  }
  /**
   * @brief Set to txin.
   * @param[in] txin    setting value.
   */
  void SetTxin(  // line separate
      const TxInRequest& txin) {  // NOLINT
    this->txin_ = txin;
  }
  /**
   * @brief Get data type of txin.
   * @return Data type of txin.
   */
  static std::string GetTxinFieldType() {
    return "TxInRequest";  // NOLINT
  }
  /**
   * @brief Get json string of txin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinString(  // line separate
      const PsbtAddInputRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txin_.Serialize();
  }
  /**
   * @brief Set json object to txin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinString(  // line separate
      PsbtAddInputRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of input.
   * @return input
   */
  PsbtInputRequestData& GetInput() {  // NOLINT
    return input_;
  }
  /**
   * @brief Set to input.
   * @param[in] input    setting value.
   */
  void SetInput(  // line separate
      const PsbtInputRequestData& input) {  // NOLINT
    this->input_ = input;
  }
  /**
   * @brief Get data type of input.
   * @return Data type of input.
   */
  static std::string GetInputFieldType() {
    return "PsbtInputRequestData";  // NOLINT
  }
  /**
   * @brief Get json string of input field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetInputString(  // line separate
      const PsbtAddInputRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.input_.Serialize();
  }
  /**
   * @brief Set json object to input field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetInputString(  // line separate
      PsbtAddInputRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.input_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtAddInputRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtAddInputRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtAddInputRequestMapTable =
    cfd::core::JsonTableMap<PsbtAddInputRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtAddInputRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtAddInputRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txin) value
   */
  TxInRequest txin_;  // NOLINT
  /**
   * @brief JsonAPI(input) value
   */
  PsbtInputRequestData input_;  // NOLINT
};

// ------------------------------------------------------------------------
// PsbtAddOutputRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtAddOutputRequest) class
 */
class PsbtAddOutputRequest
  : public cfd::core::JsonClassBase<PsbtAddOutputRequest> {
 public:
  PsbtAddOutputRequest() {
    CollectFieldName();
  }
  virtual ~PsbtAddOutputRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txout.
   * @return txout
   */
  TxOutRequest& GetTxout() {  // NOLINT
    return txout_;
  }
  /**
   * @brief Set to txout.
   * @param[in] txout    setting value.
   */
  void SetTxout(  // line separate
      const TxOutRequest& txout) {  // NOLINT
    this->txout_ = txout;
  }
  /**
   * @brief Get data type of txout.
   * @return Data type of txout.
   */
  static std::string GetTxoutFieldType() {
    return "TxOutRequest";  // NOLINT
  }
  /**
   * @brief Get json string of txout field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxoutString(  // line separate
      const PsbtAddOutputRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txout_.Serialize();
  }
  /**
   * @brief Set json object to txout field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxoutString(  // line separate
      PsbtAddOutputRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txout_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of output.
   * @return output
   */
  PsbtOutputRequestData& GetOutput() {  // NOLINT
    return output_;
  }
  /**
   * @brief Set to output.
   * @param[in] output    setting value.
   */
  void SetOutput(  // line separate
      const PsbtOutputRequestData& output) {  // NOLINT
    this->output_ = output;
  }
  /**
   * @brief Get data type of output.
   * @return Data type of output.
   */
  static std::string GetOutputFieldType() {
    return "PsbtOutputRequestData";  // NOLINT
  }
  /**
   * @brief Get json string of output field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetOutputString(  // line separate
      const PsbtAddOutputRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.output_.Serialize();
  }
  /**
   * @brief Set json object to output field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetOutputString(  // line separate
      PsbtAddOutputRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.output_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtAddOutputRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtAddOutputRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtAddOutputRequestMapTable =
    cfd::core::JsonTableMap<PsbtAddOutputRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtAddOutputRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtAddOutputRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txout) value
   */
  TxOutRequest txout_;  // NOLINT
  /**
   * @brief JsonAPI(output) value
   */
  PsbtOutputRequestData output_;  // NOLINT
};

// ------------------------------------------------------------------------
// PsbtGlobalRequestData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtGlobalRequestData) class
 */
class PsbtGlobalRequestData
  : public cfd::core::JsonClassBase<PsbtGlobalRequestData> {
 public:
  PsbtGlobalRequestData() {
    CollectFieldName();
  }
  virtual ~PsbtGlobalRequestData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of xpubs.
   * @return xpubs
   */
  JsonObjectVector<PsbtGlobalXpubInput, PsbtGlobalXpubInputStruct>& GetXpubs() {  // NOLINT
    return xpubs_;
  }
  /**
   * @brief Set to xpubs.
   * @param[in] xpubs    setting value.
   */
  void SetXpubs(  // line separate
      const JsonObjectVector<PsbtGlobalXpubInput, PsbtGlobalXpubInputStruct>& xpubs) {  // NOLINT
    this->xpubs_ = xpubs;
  }
  /**
   * @brief Get data type of xpubs.
   * @return Data type of xpubs.
   */
  static std::string GetXpubsFieldType() {
    return "JsonObjectVector<PsbtGlobalXpubInput, PsbtGlobalXpubInputStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of xpubs field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetXpubsString(  // line separate
      const PsbtGlobalRequestData& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.xpubs_.Serialize();
  }
  /**
   * @brief Set json object to xpubs field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetXpubsString(  // line separate
      PsbtGlobalRequestData& obj,  // NOLINT
      const UniValue& json_value) {
    obj.xpubs_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of unknown.
   * @return unknown
   */
  JsonObjectVector<PsbtMapData, PsbtMapDataStruct>& GetUnknown() {  // NOLINT
    return unknown_;
  }
  /**
   * @brief Set to unknown.
   * @param[in] unknown    setting value.
   */
  void SetUnknown(  // line separate
      const JsonObjectVector<PsbtMapData, PsbtMapDataStruct>& unknown) {  // NOLINT
    this->unknown_ = unknown;
  }
  /**
   * @brief Get data type of unknown.
   * @return Data type of unknown.
   */
  static std::string GetUnknownFieldType() {
    return "JsonObjectVector<PsbtMapData, PsbtMapDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of unknown field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUnknownString(  // line separate
      const PsbtGlobalRequestData& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.unknown_.Serialize();
  }
  /**
   * @brief Set json object to unknown field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUnknownString(  // line separate
      PsbtGlobalRequestData& obj,  // NOLINT
      const UniValue& json_value) {
    obj.unknown_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtGlobalRequestDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtGlobalRequestDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtGlobalRequestDataMapTable =
    cfd::core::JsonTableMap<PsbtGlobalRequestData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtGlobalRequestDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtGlobalRequestDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(xpubs) value
   */
  JsonObjectVector<PsbtGlobalXpubInput, PsbtGlobalXpubInputStruct> xpubs_;  // NOLINT
  /**
   * @brief JsonAPI(unknown) value
   */
  JsonObjectVector<PsbtMapData, PsbtMapDataStruct> unknown_;  // NOLINT
};

// ------------------------------------------------------------------------
// PsbtGlobalXpub
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtGlobalXpub) class
 */
class PsbtGlobalXpub
  : public cfd::core::JsonClassBase<PsbtGlobalXpub> {
 public:
  PsbtGlobalXpub() {
    CollectFieldName();
  }
  virtual ~PsbtGlobalXpub() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of xpub.
   * @return xpub
   */
  XpubData& GetXpub() {  // NOLINT
    return xpub_;
  }
  /**
   * @brief Set to xpub.
   * @param[in] xpub    setting value.
   */
  void SetXpub(  // line separate
      const XpubData& xpub) {  // NOLINT
    this->xpub_ = xpub;
  }
  /**
   * @brief Get data type of xpub.
   * @return Data type of xpub.
   */
  static std::string GetXpubFieldType() {
    return "XpubData";  // NOLINT
  }
  /**
   * @brief Get json string of xpub field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetXpubString(  // line separate
      const PsbtGlobalXpub& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.xpub_.Serialize();
  }
  /**
   * @brief Set json object to xpub field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetXpubString(  // line separate
      PsbtGlobalXpub& obj,  // NOLINT
      const UniValue& json_value) {
    obj.xpub_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of master_fingerprint
   * @return master_fingerprint
   */
  std::string GetMaster_fingerprint() const {
    return master_fingerprint_;
  }
  /**
   * @brief Set to master_fingerprint
   * @param[in] master_fingerprint    setting value.
   */
  void SetMaster_fingerprint(  // line separate
    const std::string& master_fingerprint) {  // NOLINT
    this->master_fingerprint_ = master_fingerprint;
  }
  /**
   * @brief Get data type of master_fingerprint
   * @return Data type of master_fingerprint
   */
  static std::string GetMaster_fingerprintFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of master_fingerprint field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMaster_fingerprintString(  // line separate
      const PsbtGlobalXpub& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.master_fingerprint_);
  }
  /**
   * @brief Set json object to master_fingerprint field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMaster_fingerprintString(  // line separate
      PsbtGlobalXpub& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.master_fingerprint_, json_value);
  }

  /**
   * @brief Get of path
   * @return path
   */
  std::string GetPath() const {
    return path_;
  }
  /**
   * @brief Set to path
   * @param[in] path    setting value.
   */
  void SetPath(  // line separate
    const std::string& path) {  // NOLINT
    this->path_ = path;
  }
  /**
   * @brief Get data type of path
   * @return Data type of path
   */
  static std::string GetPathFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of path field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPathString(  // line separate
      const PsbtGlobalXpub& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.path_);
  }
  /**
   * @brief Set json object to path field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPathString(  // line separate
      PsbtGlobalXpub& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.path_, json_value);
  }

  /**
   * @brief Get of descriptorXpub
   * @return descriptorXpub
   */
  std::string GetDescriptorXpub() const {
    return descriptor_xpub_;
  }
  /**
   * @brief Set to descriptorXpub
   * @param[in] descriptor_xpub    setting value.
   */
  void SetDescriptorXpub(  // line separate
    const std::string& descriptor_xpub) {  // NOLINT
    this->descriptor_xpub_ = descriptor_xpub;
  }
  /**
   * @brief Get data type of descriptorXpub
   * @return Data type of descriptorXpub
   */
  static std::string GetDescriptorXpubFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of descriptorXpub field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDescriptorXpubString(  // line separate
      const PsbtGlobalXpub& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.descriptor_xpub_);
  }
  /**
   * @brief Set json object to descriptorXpub field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDescriptorXpubString(  // line separate
      PsbtGlobalXpub& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.descriptor_xpub_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtGlobalXpubStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtGlobalXpubStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtGlobalXpubMapTable =
    cfd::core::JsonTableMap<PsbtGlobalXpub>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtGlobalXpubMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtGlobalXpubMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(xpub) value
   */
  XpubData xpub_;  // NOLINT
  /**
   * @brief JsonAPI(master_fingerprint) value
   */
  std::string master_fingerprint_ = "";
  /**
   * @brief JsonAPI(path) value
   */
  std::string path_ = "";
  /**
   * @brief JsonAPI(descriptorXpub) value
   */
  std::string descriptor_xpub_ = "";
};

// ------------------------------------------------------------------------
// PsbtInputRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtInputRequest) class
 */
class PsbtInputRequest
  : public cfd::core::JsonClassBase<PsbtInputRequest> {
 public:
  PsbtInputRequest() {
    CollectFieldName();
  }
  virtual ~PsbtInputRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of outpoint.
   * @return outpoint
   */
  OutPoint& GetOutpoint() {  // NOLINT
    return outpoint_;
  }
  /**
   * @brief Set to outpoint.
   * @param[in] outpoint    setting value.
   */
  void SetOutpoint(  // line separate
      const OutPoint& outpoint) {  // NOLINT
    this->outpoint_ = outpoint;
  }
  /**
   * @brief Get data type of outpoint.
   * @return Data type of outpoint.
   */
  static std::string GetOutpointFieldType() {
    return "OutPoint";  // NOLINT
  }
  /**
   * @brief Get json string of outpoint field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetOutpointString(  // line separate
      const PsbtInputRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.outpoint_.Serialize();
  }
  /**
   * @brief Set json object to outpoint field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetOutpointString(  // line separate
      PsbtInputRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.outpoint_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of index
   * @return index
   */
  uint32_t GetIndex() const {
    return index_;
  }
  /**
   * @brief Set to index
   * @param[in] index    setting value.
   */
  void SetIndex(  // line separate
    const uint32_t& index) {  // NOLINT
    this->index_ = index;
  }
  /**
   * @brief Get data type of index
   * @return Data type of index
   */
  static std::string GetIndexFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of index field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIndexString(  // line separate
      const PsbtInputRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.index_);
  }
  /**
   * @brief Set json object to index field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIndexString(  // line separate
      PsbtInputRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.index_, json_value);
  }

  /**
   * @brief Get of input.
   * @return input
   */
  PsbtInputRequestData& GetInput() {  // NOLINT
    return input_;
  }
  /**
   * @brief Set to input.
   * @param[in] input    setting value.
   */
  void SetInput(  // line separate
      const PsbtInputRequestData& input) {  // NOLINT
    this->input_ = input;
  }
  /**
   * @brief Get data type of input.
   * @return Data type of input.
   */
  static std::string GetInputFieldType() {
    return "PsbtInputRequestData";  // NOLINT
  }
  /**
   * @brief Get json string of input field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetInputString(  // line separate
      const PsbtInputRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.input_.Serialize();
  }
  /**
   * @brief Set json object to input field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetInputString(  // line separate
      PsbtInputRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.input_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtInputRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtInputRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtInputRequestMapTable =
    cfd::core::JsonTableMap<PsbtInputRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtInputRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtInputRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(outpoint) value
   */
  OutPoint outpoint_;  // NOLINT
  /**
   * @brief JsonAPI(index) value
   */
  uint32_t index_ = 0;
  /**
   * @brief JsonAPI(input) value
   */
  PsbtInputRequestData input_;  // NOLINT
};

// ------------------------------------------------------------------------
// PsbtOutputRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtOutputRequest) class
 */
class PsbtOutputRequest
  : public cfd::core::JsonClassBase<PsbtOutputRequest> {
 public:
  PsbtOutputRequest() {
    CollectFieldName();
  }
  virtual ~PsbtOutputRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of index
   * @return index
   */
  uint32_t GetIndex() const {
    return index_;
  }
  /**
   * @brief Set to index
   * @param[in] index    setting value.
   */
  void SetIndex(  // line separate
    const uint32_t& index) {  // NOLINT
    this->index_ = index;
  }
  /**
   * @brief Get data type of index
   * @return Data type of index
   */
  static std::string GetIndexFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of index field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIndexString(  // line separate
      const PsbtOutputRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.index_);
  }
  /**
   * @brief Set json object to index field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIndexString(  // line separate
      PsbtOutputRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.index_, json_value);
  }

  /**
   * @brief Get of output.
   * @return output
   */
  PsbtOutputRequestData& GetOutput() {  // NOLINT
    return output_;
  }
  /**
   * @brief Set to output.
   * @param[in] output    setting value.
   */
  void SetOutput(  // line separate
      const PsbtOutputRequestData& output) {  // NOLINT
    this->output_ = output;
  }
  /**
   * @brief Get data type of output.
   * @return Data type of output.
   */
  static std::string GetOutputFieldType() {
    return "PsbtOutputRequestData";  // NOLINT
  }
  /**
   * @brief Get json string of output field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetOutputString(  // line separate
      const PsbtOutputRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.output_.Serialize();
  }
  /**
   * @brief Set json object to output field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetOutputString(  // line separate
      PsbtOutputRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.output_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtOutputRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtOutputRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtOutputRequestMapTable =
    cfd::core::JsonTableMap<PsbtOutputRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtOutputRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtOutputRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(index) value
   */
  uint32_t index_ = 0;
  /**
   * @brief JsonAPI(output) value
   */
  PsbtOutputRequestData output_;  // NOLINT
};

// ------------------------------------------------------------------------
// PsbtRecordData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtRecordData) class
 */
class PsbtRecordData
  : public cfd::core::JsonClassBase<PsbtRecordData> {
 public:
  PsbtRecordData() {
    CollectFieldName();
  }
  virtual ~PsbtRecordData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of index
   * @return index
   */
  uint32_t GetIndex() const {
    return index_;
  }
  /**
   * @brief Set to index
   * @param[in] index    setting value.
   */
  void SetIndex(  // line separate
    const uint32_t& index) {  // NOLINT
    this->index_ = index;
  }
  /**
   * @brief Get data type of index
   * @return Data type of index
   */
  static std::string GetIndexFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of index field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIndexString(  // line separate
      const PsbtRecordData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.index_);
  }
  /**
   * @brief Set json object to index field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIndexString(  // line separate
      PsbtRecordData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.index_, json_value);
  }

  /**
   * @brief Get of type
   * @return type
   */
  std::string GetType() const {
    return type_;
  }
  /**
   * @brief Set to type
   * @param[in] type    setting value.
   */
  void SetType(  // line separate
    const std::string& type) {  // NOLINT
    this->type_ = type;
  }
  /**
   * @brief Get data type of type
   * @return Data type of type
   */
  static std::string GetTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of type field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTypeString(  // line separate
      const PsbtRecordData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.type_);
  }
  /**
   * @brief Set json object to type field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTypeString(  // line separate
      PsbtRecordData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.type_, json_value);
  }

  /**
   * @brief Get of key
   * @return key
   */
  std::string GetKey() const {
    return key_;
  }
  /**
   * @brief Set to key
   * @param[in] key    setting value.
   */
  void SetKey(  // line separate
    const std::string& key) {  // NOLINT
    this->key_ = key;
  }
  /**
   * @brief Get data type of key
   * @return Data type of key
   */
  static std::string GetKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of key field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetKeyString(  // line separate
      const PsbtRecordData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.key_);
  }
  /**
   * @brief Set json object to key field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetKeyString(  // line separate
      PsbtRecordData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.key_, json_value);
  }

  /**
   * @brief Get of value
   * @return value
   */
  std::string GetValue() const {
    return value_;
  }
  /**
   * @brief Set to value
   * @param[in] value    setting value.
   */
  void SetValue(  // line separate
    const std::string& value) {  // NOLINT
    this->value_ = value;
  }
  /**
   * @brief Get data type of value
   * @return Data type of value
   */
  static std::string GetValueFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of value field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetValueString(  // line separate
      const PsbtRecordData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.value_);
  }
  /**
   * @brief Set json object to value field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetValueString(  // line separate
      PsbtRecordData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.value_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtRecordDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtRecordDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtRecordDataMapTable =
    cfd::core::JsonTableMap<PsbtRecordData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtRecordDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtRecordDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(index) value
   */
  uint32_t index_ = 0;
  /**
   * @brief JsonAPI(type) value
   */
  std::string type_ = "";
  /**
   * @brief JsonAPI(key) value
   */
  std::string key_ = "";
  /**
   * @brief JsonAPI(value) value
   */
  std::string value_ = "";
};

// ------------------------------------------------------------------------
// ReissuanceDataRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ReissuanceDataRequest) class
 */
class ReissuanceDataRequest
  : public cfd::core::JsonClassBase<ReissuanceDataRequest> {
 public:
  ReissuanceDataRequest() {
    CollectFieldName();
  }
  virtual ~ReissuanceDataRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const ReissuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      ReissuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const ReissuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      ReissuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const ReissuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      ReissuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const ReissuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      ReissuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Get of assetBlindingNonce
   * @return assetBlindingNonce
   */
  std::string GetAssetBlindingNonce() const {
    return asset_blinding_nonce_;
  }
  /**
   * @brief Set to assetBlindingNonce
   * @param[in] asset_blinding_nonce    setting value.
   */
  void SetAssetBlindingNonce(  // line separate
    const std::string& asset_blinding_nonce) {  // NOLINT
    this->asset_blinding_nonce_ = asset_blinding_nonce;
  }
  /**
   * @brief Get data type of assetBlindingNonce
   * @return Data type of assetBlindingNonce
   */
  static std::string GetAssetBlindingNonceFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetBlindingNonce field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetBlindingNonceString(  // line separate
      const ReissuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_blinding_nonce_);
  }
  /**
   * @brief Set json object to assetBlindingNonce field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetBlindingNonceString(  // line separate
      ReissuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_blinding_nonce_, json_value);
  }

  /**
   * @brief Get of assetEntropy
   * @return assetEntropy
   */
  std::string GetAssetEntropy() const {
    return asset_entropy_;
  }
  /**
   * @brief Set to assetEntropy
   * @param[in] asset_entropy    setting value.
   */
  void SetAssetEntropy(  // line separate
    const std::string& asset_entropy) {  // NOLINT
    this->asset_entropy_ = asset_entropy;
  }
  /**
   * @brief Get data type of assetEntropy
   * @return Data type of assetEntropy
   */
  static std::string GetAssetEntropyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetEntropy field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetEntropyString(  // line separate
      const ReissuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_entropy_);
  }
  /**
   * @brief Set json object to assetEntropy field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetEntropyString(  // line separate
      ReissuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_entropy_, json_value);
  }

  /**
   * @brief Get of isRemoveNonce
   * @return isRemoveNonce
   */
  bool GetIsRemoveNonce() const {
    return is_remove_nonce_;
  }
  /**
   * @brief Set to isRemoveNonce
   * @param[in] is_remove_nonce    setting value.
   */
  void SetIsRemoveNonce(  // line separate
    const bool& is_remove_nonce) {  // NOLINT
    this->is_remove_nonce_ = is_remove_nonce;
  }
  /**
   * @brief Get data type of isRemoveNonce
   * @return Data type of isRemoveNonce
   */
  static std::string GetIsRemoveNonceFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isRemoveNonce field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsRemoveNonceString(  // line separate
      const ReissuanceDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_remove_nonce_);
  }
  /**
   * @brief Set json object to isRemoveNonce field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsRemoveNonceString(  // line separate
      ReissuanceDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_remove_nonce_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ReissuanceDataRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ReissuanceDataRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ReissuanceDataRequestMapTable =
    cfd::core::JsonTableMap<ReissuanceDataRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ReissuanceDataRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ReissuanceDataRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
  /**
   * @brief JsonAPI(assetBlindingNonce) value
   */
  std::string asset_blinding_nonce_ = "";
  /**
   * @brief JsonAPI(assetEntropy) value
   */
  std::string asset_entropy_ = "";
  /**
   * @brief JsonAPI(isRemoveNonce) value
   */
  bool is_remove_nonce_ = false;
};

// ------------------------------------------------------------------------
// SelectUtxoData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SelectUtxoData) class
 */
class SelectUtxoData
  : public cfd::core::JsonClassBase<SelectUtxoData> {
 public:
  SelectUtxoData() {
    CollectFieldName();
  }
  virtual ~SelectUtxoData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const SelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      SelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const SelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      SelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const SelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      SelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of redeemScript
   * @return redeemScript
   */
  std::string GetRedeemScript() const {
    return redeem_script_;
  }
  /**
   * @brief Set to redeemScript
   * @param[in] redeem_script    setting value.
   */
  void SetRedeemScript(  // line separate
    const std::string& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeemScript
   * @return Data type of redeemScript
   */
  static std::string GetRedeemScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of redeemScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRedeemScriptString(  // line separate
      const SelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.redeem_script_);
  }
  /**
   * @brief Set json object to redeemScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRedeemScriptString(  // line separate
      SelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.redeem_script_, json_value);
  }

  /**
   * @brief Get of descriptor
   * @return descriptor
   */
  std::string GetDescriptor() const {
    return descriptor_;
  }
  /**
   * @brief Set to descriptor
   * @param[in] descriptor    setting value.
   */
  void SetDescriptor(  // line separate
    const std::string& descriptor) {  // NOLINT
    this->descriptor_ = descriptor;
  }
  /**
   * @brief Get data type of descriptor
   * @return Data type of descriptor
   */
  static std::string GetDescriptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of descriptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDescriptorString(  // line separate
      const SelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.descriptor_);
  }
  /**
   * @brief Set json object to descriptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDescriptorString(  // line separate
      SelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.descriptor_, json_value);
  }

  /**
   * @brief Get of isIssuance
   * @return isIssuance
   */
  bool GetIsIssuance() const {
    return is_issuance_;
  }
  /**
   * @brief Set to isIssuance
   * @param[in] is_issuance    setting value.
   */
  void SetIsIssuance(  // line separate
    const bool& is_issuance) {  // NOLINT
    this->is_issuance_ = is_issuance;
  }
  /**
   * @brief Get data type of isIssuance
   * @return Data type of isIssuance
   */
  static std::string GetIsIssuanceFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isIssuance field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsIssuanceString(  // line separate
      const SelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_issuance_);
  }
  /**
   * @brief Set json object to isIssuance field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsIssuanceString(  // line separate
      SelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_issuance_, json_value);
  }

  /**
   * @brief Get of isBlindIssuance
   * @return isBlindIssuance
   */
  bool GetIsBlindIssuance() const {
    return is_blind_issuance_;
  }
  /**
   * @brief Set to isBlindIssuance
   * @param[in] is_blind_issuance    setting value.
   */
  void SetIsBlindIssuance(  // line separate
    const bool& is_blind_issuance) {  // NOLINT
    this->is_blind_issuance_ = is_blind_issuance;
  }
  /**
   * @brief Get data type of isBlindIssuance
   * @return Data type of isBlindIssuance
   */
  static std::string GetIsBlindIssuanceFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isBlindIssuance field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsBlindIssuanceString(  // line separate
      const SelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_blind_issuance_);
  }
  /**
   * @brief Set json object to isBlindIssuance field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsBlindIssuanceString(  // line separate
      SelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_blind_issuance_, json_value);
  }

  /**
   * @brief Get of isPegin
   * @return isPegin
   */
  bool GetIsPegin() const {
    return is_pegin_;
  }
  /**
   * @brief Set to isPegin
   * @param[in] is_pegin    setting value.
   */
  void SetIsPegin(  // line separate
    const bool& is_pegin) {  // NOLINT
    this->is_pegin_ = is_pegin;
  }
  /**
   * @brief Get data type of isPegin
   * @return Data type of isPegin
   */
  static std::string GetIsPeginFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isPegin field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsPeginString(  // line separate
      const SelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_pegin_);
  }
  /**
   * @brief Set json object to isPegin field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsPeginString(  // line separate
      SelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_pegin_, json_value);
  }

  /**
   * @brief Get of peginBtcTxSize
   * @return peginBtcTxSize
   */
  int64_t GetPeginBtcTxSize() const {
    return pegin_btc_tx_size_;
  }
  /**
   * @brief Set to peginBtcTxSize
   * @param[in] pegin_btc_tx_size    setting value.
   */
  void SetPeginBtcTxSize(  // line separate
    const int64_t& pegin_btc_tx_size) {  // NOLINT
    this->pegin_btc_tx_size_ = pegin_btc_tx_size;
  }
  /**
   * @brief Get data type of peginBtcTxSize
   * @return Data type of peginBtcTxSize
   */
  static std::string GetPeginBtcTxSizeFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of peginBtcTxSize field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPeginBtcTxSizeString(  // line separate
      const SelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pegin_btc_tx_size_);
  }
  /**
   * @brief Set json object to peginBtcTxSize field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPeginBtcTxSizeString(  // line separate
      SelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pegin_btc_tx_size_, json_value);
  }

  /**
   * @brief Get of fedpegScript
   * @return fedpegScript
   */
  std::string GetFedpegScript() const {
    return fedpeg_script_;
  }
  /**
   * @brief Set to fedpegScript
   * @param[in] fedpeg_script    setting value.
   */
  void SetFedpegScript(  // line separate
    const std::string& fedpeg_script) {  // NOLINT
    this->fedpeg_script_ = fedpeg_script;
  }
  /**
   * @brief Get data type of fedpegScript
   * @return Data type of fedpegScript
   */
  static std::string GetFedpegScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of fedpegScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFedpegScriptString(  // line separate
      const SelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fedpeg_script_);
  }
  /**
   * @brief Set json object to fedpegScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFedpegScriptString(  // line separate
      SelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fedpeg_script_, json_value);
  }

  /**
   * @brief Get of scriptSigTemplate
   * @return scriptSigTemplate
   */
  std::string GetScriptSigTemplate() const {
    return script_sig_template_;
  }
  /**
   * @brief Set to scriptSigTemplate
   * @param[in] script_sig_template    setting value.
   */
  void SetScriptSigTemplate(  // line separate
    const std::string& script_sig_template) {  // NOLINT
    this->script_sig_template_ = script_sig_template;
  }
  /**
   * @brief Get data type of scriptSigTemplate
   * @return Data type of scriptSigTemplate
   */
  static std::string GetScriptSigTemplateFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of scriptSigTemplate field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetScriptSigTemplateString(  // line separate
      const SelectUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.script_sig_template_);
  }
  /**
   * @brief Set json object to scriptSigTemplate field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetScriptSigTemplateString(  // line separate
      SelectUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.script_sig_template_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SelectUtxoDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SelectUtxoDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SelectUtxoDataMapTable =
    cfd::core::JsonTableMap<SelectUtxoData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SelectUtxoDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SelectUtxoDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(redeemScript) value
   */
  std::string redeem_script_ = "";
  /**
   * @brief JsonAPI(descriptor) value
   */
  std::string descriptor_ = "";
  /**
   * @brief JsonAPI(isIssuance) value
   */
  bool is_issuance_ = false;
  /**
   * @brief JsonAPI(isBlindIssuance) value
   */
  bool is_blind_issuance_ = false;
  /**
   * @brief JsonAPI(isPegin) value
   */
  bool is_pegin_ = false;
  /**
   * @brief JsonAPI(peginBtcTxSize) value
   */
  int64_t pegin_btc_tx_size_ = 0;
  /**
   * @brief JsonAPI(fedpegScript) value
   */
  std::string fedpeg_script_ = "";
  /**
   * @brief JsonAPI(scriptSigTemplate) value
   */
  std::string script_sig_template_ = "";
};

// ------------------------------------------------------------------------
// SerializeLedgerFormatTxOut
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SerializeLedgerFormatTxOut) class
 */
class SerializeLedgerFormatTxOut
  : public cfd::core::JsonClassBase<SerializeLedgerFormatTxOut> {
 public:
  SerializeLedgerFormatTxOut() {
    CollectFieldName();
  }
  virtual ~SerializeLedgerFormatTxOut() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of index
   * @return index
   */
  uint32_t GetIndex() const {
    return index_;
  }
  /**
   * @brief Set to index
   * @param[in] index    setting value.
   */
  void SetIndex(  // line separate
    const uint32_t& index) {  // NOLINT
    this->index_ = index;
  }
  /**
   * @brief Get data type of index
   * @return Data type of index
   */
  static std::string GetIndexFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of index field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIndexString(  // line separate
      const SerializeLedgerFormatTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.index_);
  }
  /**
   * @brief Set json object to index field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIndexString(  // line separate
      SerializeLedgerFormatTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.index_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const SerializeLedgerFormatTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      SerializeLedgerFormatTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const SerializeLedgerFormatTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      SerializeLedgerFormatTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SerializeLedgerFormatTxOutStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SerializeLedgerFormatTxOutStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SerializeLedgerFormatTxOutMapTable =
    cfd::core::JsonTableMap<SerializeLedgerFormatTxOut>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SerializeLedgerFormatTxOutMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SerializeLedgerFormatTxOutMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(index) value
   */
  uint32_t index_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
};

// ------------------------------------------------------------------------
// SignWithPrivkeyTxInRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SignWithPrivkeyTxInRequest) class
 */
class SignWithPrivkeyTxInRequest
  : public cfd::core::JsonClassBase<SignWithPrivkeyTxInRequest> {
 public:
  SignWithPrivkeyTxInRequest() {
    CollectFieldName();
  }
  virtual ~SignWithPrivkeyTxInRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const SignWithPrivkeyTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      SignWithPrivkeyTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const SignWithPrivkeyTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      SignWithPrivkeyTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of privkey
   * @return privkey
   */
  std::string GetPrivkey() const {
    return privkey_;
  }
  /**
   * @brief Set to privkey
   * @param[in] privkey    setting value.
   */
  void SetPrivkey(  // line separate
    const std::string& privkey) {  // NOLINT
    this->privkey_ = privkey;
  }
  /**
   * @brief Get data type of privkey
   * @return Data type of privkey
   */
  static std::string GetPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of privkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPrivkeyString(  // line separate
      const SignWithPrivkeyTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.privkey_);
  }
  /**
   * @brief Set json object to privkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPrivkeyString(  // line separate
      SignWithPrivkeyTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.privkey_, json_value);
  }

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const SignWithPrivkeyTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      SignWithPrivkeyTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const SignWithPrivkeyTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      SignWithPrivkeyTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Get of sighashType
   * @return sighashType
   */
  std::string GetSighashType() const {
    return sighash_type_;
  }
  /**
   * @brief Set to sighashType
   * @param[in] sighash_type    setting value.
   */
  void SetSighashType(  // line separate
    const std::string& sighash_type) {  // NOLINT
    this->sighash_type_ = sighash_type;
  }
  /**
   * @brief Get data type of sighashType
   * @return Data type of sighashType
   */
  static std::string GetSighashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashTypeString(  // line separate
      const SignWithPrivkeyTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_type_);
  }
  /**
   * @brief Set json object to sighashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashTypeString(  // line separate
      SignWithPrivkeyTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_type_, json_value);
  }

  /**
   * @brief Get of sighashAnyoneCanPay
   * @return sighashAnyoneCanPay
   */
  bool GetSighashAnyoneCanPay() const {
    return sighash_anyone_can_pay_;
  }
  /**
   * @brief Set to sighashAnyoneCanPay
   * @param[in] sighash_anyone_can_pay    setting value.
   */
  void SetSighashAnyoneCanPay(  // line separate
    const bool& sighash_anyone_can_pay) {  // NOLINT
    this->sighash_anyone_can_pay_ = sighash_anyone_can_pay;
  }
  /**
   * @brief Get data type of sighashAnyoneCanPay
   * @return Data type of sighashAnyoneCanPay
   */
  static std::string GetSighashAnyoneCanPayFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashAnyoneCanPayString(  // line separate
      const SignWithPrivkeyTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_anyone_can_pay_);
  }
  /**
   * @brief Set json object to sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashAnyoneCanPayString(  // line separate
      SignWithPrivkeyTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_anyone_can_pay_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const SignWithPrivkeyTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      SignWithPrivkeyTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of confidentialValueCommitment
   * @return confidentialValueCommitment
   */
  std::string GetConfidentialValueCommitment() const {
    return confidential_value_commitment_;
  }
  /**
   * @brief Set to confidentialValueCommitment
   * @param[in] confidential_value_commitment    setting value.
   */
  void SetConfidentialValueCommitment(  // line separate
    const std::string& confidential_value_commitment) {  // NOLINT
    this->confidential_value_commitment_ = confidential_value_commitment;
  }
  /**
   * @brief Get data type of confidentialValueCommitment
   * @return Data type of confidentialValueCommitment
   */
  static std::string GetConfidentialValueCommitmentFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of confidentialValueCommitment field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetConfidentialValueCommitmentString(  // line separate
      const SignWithPrivkeyTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.confidential_value_commitment_);
  }
  /**
   * @brief Set json object to confidentialValueCommitment field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetConfidentialValueCommitmentString(  // line separate
      SignWithPrivkeyTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.confidential_value_commitment_, json_value);
  }

  /**
   * @brief Get of isGrindR
   * @return isGrindR
   */
  bool GetIsGrindR() const {
    return is_grind_r_;
  }
  /**
   * @brief Set to isGrindR
   * @param[in] is_grind_r    setting value.
   */
  void SetIsGrindR(  // line separate
    const bool& is_grind_r) {  // NOLINT
    this->is_grind_r_ = is_grind_r;
  }
  /**
   * @brief Get data type of isGrindR
   * @return Data type of isGrindR
   */
  static std::string GetIsGrindRFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isGrindR field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsGrindRString(  // line separate
      const SignWithPrivkeyTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_grind_r_);
  }
  /**
   * @brief Set json object to isGrindR field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsGrindRString(  // line separate
      SignWithPrivkeyTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_grind_r_, json_value);
  }

  /**
   * @brief Get of auxRand
   * @return auxRand
   */
  std::string GetAuxRand() const {
    return aux_rand_;
  }
  /**
   * @brief Set to auxRand
   * @param[in] aux_rand    setting value.
   */
  void SetAuxRand(  // line separate
    const std::string& aux_rand) {  // NOLINT
    this->aux_rand_ = aux_rand;
  }
  /**
   * @brief Get data type of auxRand
   * @return Data type of auxRand
   */
  static std::string GetAuxRandFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of auxRand field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAuxRandString(  // line separate
      const SignWithPrivkeyTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.aux_rand_);
  }
  /**
   * @brief Set json object to auxRand field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAuxRandString(  // line separate
      SignWithPrivkeyTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.aux_rand_, json_value);
  }

  /**
   * @brief Get of annex
   * @return annex
   */
  std::string GetAnnex() const {
    return annex_;
  }
  /**
   * @brief Set to annex
   * @param[in] annex    setting value.
   */
  void SetAnnex(  // line separate
    const std::string& annex) {  // NOLINT
    this->annex_ = annex;
  }
  /**
   * @brief Get data type of annex
   * @return Data type of annex
   */
  static std::string GetAnnexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of annex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAnnexString(  // line separate
      const SignWithPrivkeyTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.annex_);
  }
  /**
   * @brief Set json object to annex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAnnexString(  // line separate
      SignWithPrivkeyTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.annex_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SignWithPrivkeyTxInRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SignWithPrivkeyTxInRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SignWithPrivkeyTxInRequestMapTable =
    cfd::core::JsonTableMap<SignWithPrivkeyTxInRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SignWithPrivkeyTxInRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SignWithPrivkeyTxInRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(privkey) value
   */
  std::string privkey_ = "";
  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "";
  /**
   * @brief JsonAPI(sighashType) value
   */
  std::string sighash_type_ = "all";
  /**
   * @brief JsonAPI(sighashAnyoneCanPay) value
   */
  bool sighash_anyone_can_pay_ = false;
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(confidentialValueCommitment) value
   */
  std::string confidential_value_commitment_ = "";
  /**
   * @brief JsonAPI(isGrindR) value
   */
  bool is_grind_r_ = true;
  /**
   * @brief JsonAPI(auxRand) value
   */
  std::string aux_rand_ = "";
  /**
   * @brief JsonAPI(annex) value
   */
  std::string annex_ = "";
};

// ------------------------------------------------------------------------
// TapBranchData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (TapBranchData) class
 */
class TapBranchData
  : public cfd::core::JsonClassBase<TapBranchData> {
 public:
  TapBranchData() {
    CollectFieldName();
  }
  virtual ~TapBranchData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tapscript
   * @return tapscript
   */
  std::string GetTapscript() const {
    return tapscript_;
  }
  /**
   * @brief Set to tapscript
   * @param[in] tapscript    setting value.
   */
  void SetTapscript(  // line separate
    const std::string& tapscript) {  // NOLINT
    this->tapscript_ = tapscript;
  }
  /**
   * @brief Get data type of tapscript
   * @return Data type of tapscript
   */
  static std::string GetTapscriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tapscript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTapscriptString(  // line separate
      const TapBranchData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tapscript_);
  }
  /**
   * @brief Set json object to tapscript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTapscriptString(  // line separate
      TapBranchData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tapscript_, json_value);
  }

  /**
   * @brief Get of branchHash
   * @return branchHash
   */
  std::string GetBranchHash() const {
    return branch_hash_;
  }
  /**
   * @brief Set to branchHash
   * @param[in] branch_hash    setting value.
   */
  void SetBranchHash(  // line separate
    const std::string& branch_hash) {  // NOLINT
    this->branch_hash_ = branch_hash;
  }
  /**
   * @brief Get data type of branchHash
   * @return Data type of branchHash
   */
  static std::string GetBranchHashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of branchHash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBranchHashString(  // line separate
      const TapBranchData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.branch_hash_);
  }
  /**
   * @brief Set json object to branchHash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBranchHashString(  // line separate
      TapBranchData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.branch_hash_, json_value);
  }

  /**
   * @brief Get of treeString
   * @return treeString
   */
  std::string GetTreeString() const {
    return tree_string_;
  }
  /**
   * @brief Set to treeString
   * @param[in] tree_string    setting value.
   */
  void SetTreeString(  // line separate
    const std::string& tree_string) {  // NOLINT
    this->tree_string_ = tree_string;
  }
  /**
   * @brief Get data type of treeString
   * @return Data type of treeString
   */
  static std::string GetTreeStringFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of treeString field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTreeStringString(  // line separate
      const TapBranchData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tree_string_);
  }
  /**
   * @brief Set json object to treeString field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTreeStringString(  // line separate
      TapBranchData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tree_string_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const TapBranchDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  TapBranchDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using TapBranchDataMapTable =
    cfd::core::JsonTableMap<TapBranchData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const TapBranchDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static TapBranchDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tapscript) value
   */
  std::string tapscript_ = "";
  /**
   * @brief JsonAPI(branchHash) value
   */
  std::string branch_hash_ = "";
  /**
   * @brief JsonAPI(treeString) value
   */
  std::string tree_string_ = "";
};

// ------------------------------------------------------------------------
// TapScriptTreeItem
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (TapScriptTreeItem) class
 */
class TapScriptTreeItem
  : public cfd::core::JsonClassBase<TapScriptTreeItem> {
 public:
  TapScriptTreeItem() {
    CollectFieldName();
  }
  virtual ~TapScriptTreeItem() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of depth
   * @return depth
   */
  uint32_t GetDepth() const {
    return depth_;
  }
  /**
   * @brief Set to depth
   * @param[in] depth    setting value.
   */
  void SetDepth(  // line separate
    const uint32_t& depth) {  // NOLINT
    this->depth_ = depth;
  }
  /**
   * @brief Get data type of depth
   * @return Data type of depth
   */
  static std::string GetDepthFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of depth field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDepthString(  // line separate
      const TapScriptTreeItem& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.depth_);
  }
  /**
   * @brief Set json object to depth field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDepthString(  // line separate
      TapScriptTreeItem& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.depth_, json_value);
  }

  /**
   * @brief Get of tapBranchHash
   * @return tapBranchHash
   */
  std::string GetTapBranchHash() const {
    return tap_branch_hash_;
  }
  /**
   * @brief Set to tapBranchHash
   * @param[in] tap_branch_hash    setting value.
   */
  void SetTapBranchHash(  // line separate
    const std::string& tap_branch_hash) {  // NOLINT
    this->tap_branch_hash_ = tap_branch_hash;
  }
  /**
   * @brief Get data type of tapBranchHash
   * @return Data type of tapBranchHash
   */
  static std::string GetTapBranchHashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tapBranchHash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTapBranchHashString(  // line separate
      const TapScriptTreeItem& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tap_branch_hash_);
  }
  /**
   * @brief Set json object to tapBranchHash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTapBranchHashString(  // line separate
      TapScriptTreeItem& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tap_branch_hash_, json_value);
  }

  /**
   * @brief Get of tapscript
   * @return tapscript
   */
  std::string GetTapscript() const {
    return tapscript_;
  }
  /**
   * @brief Set to tapscript
   * @param[in] tapscript    setting value.
   */
  void SetTapscript(  // line separate
    const std::string& tapscript) {  // NOLINT
    this->tapscript_ = tapscript;
  }
  /**
   * @brief Get data type of tapscript
   * @return Data type of tapscript
   */
  static std::string GetTapscriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tapscript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTapscriptString(  // line separate
      const TapScriptTreeItem& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tapscript_);
  }
  /**
   * @brief Set json object to tapscript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTapscriptString(  // line separate
      TapScriptTreeItem& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tapscript_, json_value);
  }

  /**
   * @brief Get of leafVersion
   * @return leafVersion
   */
  int64_t GetLeafVersion() const {
    return leaf_version_;
  }
  /**
   * @brief Set to leafVersion
   * @param[in] leaf_version    setting value.
   */
  void SetLeafVersion(  // line separate
    const int64_t& leaf_version) {  // NOLINT
    this->leaf_version_ = leaf_version;
  }
  /**
   * @brief Get data type of leafVersion
   * @return Data type of leafVersion
   */
  static std::string GetLeafVersionFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of leafVersion field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLeafVersionString(  // line separate
      const TapScriptTreeItem& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.leaf_version_);
  }
  /**
   * @brief Set json object to leafVersion field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLeafVersionString(  // line separate
      TapScriptTreeItem& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.leaf_version_, json_value);
  }

  /**
   * @brief Get of relatedBranchHash.
   * @return relatedBranchHash
   */
  JsonValueVector<std::string>& GetRelatedBranchHash() {  // NOLINT
    return related_branch_hash_;
  }
  /**
   * @brief Set to relatedBranchHash.
   * @param[in] related_branch_hash    setting value.
   */
  void SetRelatedBranchHash(  // line separate
      const JsonValueVector<std::string>& related_branch_hash) {  // NOLINT
    this->related_branch_hash_ = related_branch_hash;
  }
  /**
   * @brief Get data type of relatedBranchHash.
   * @return Data type of relatedBranchHash.
   */
  static std::string GetRelatedBranchHashFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of relatedBranchHash field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetRelatedBranchHashString(  // line separate
      const TapScriptTreeItem& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.related_branch_hash_.Serialize();
  }
  /**
   * @brief Set json object to relatedBranchHash field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetRelatedBranchHashString(  // line separate
      TapScriptTreeItem& obj,  // NOLINT
      const UniValue& json_value) {
    obj.related_branch_hash_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const TapScriptTreeItemStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  TapScriptTreeItemStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using TapScriptTreeItemMapTable =
    cfd::core::JsonTableMap<TapScriptTreeItem>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const TapScriptTreeItemMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static TapScriptTreeItemMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(depth) value
   */
  uint32_t depth_ = 0;
  /**
   * @brief JsonAPI(tapBranchHash) value
   */
  std::string tap_branch_hash_ = "";
  /**
   * @brief JsonAPI(tapscript) value
   */
  std::string tapscript_ = "";
  /**
   * @brief JsonAPI(leafVersion) value
   */
  int64_t leaf_version_ = 0;
  /**
   * @brief JsonAPI(relatedBranchHash) value
   */
  JsonValueVector<std::string> related_branch_hash_;  // NOLINT
};

// ------------------------------------------------------------------------
// TargetAmountMapData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (TargetAmountMapData) class
 */
class TargetAmountMapData
  : public cfd::core::JsonClassBase<TargetAmountMapData> {
 public:
  TargetAmountMapData() {
    CollectFieldName();
  }
  virtual ~TargetAmountMapData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const TargetAmountMapData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      TargetAmountMapData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const TargetAmountMapData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      TargetAmountMapData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const TargetAmountMapDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  TargetAmountMapDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using TargetAmountMapDataMapTable =
    cfd::core::JsonTableMap<TargetAmountMapData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const TargetAmountMapDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static TargetAmountMapDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
};

// ------------------------------------------------------------------------
// UnblindIssuance
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (UnblindIssuance) class
 */
class UnblindIssuance
  : public cfd::core::JsonClassBase<UnblindIssuance> {
 public:
  UnblindIssuance() {
    CollectFieldName();
  }
  virtual ~UnblindIssuance() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const UnblindIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      UnblindIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const UnblindIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      UnblindIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of assetBlindingKey
   * @return assetBlindingKey
   */
  std::string GetAssetBlindingKey() const {
    return asset_blinding_key_;
  }
  /**
   * @brief Set to assetBlindingKey
   * @param[in] asset_blinding_key    setting value.
   */
  void SetAssetBlindingKey(  // line separate
    const std::string& asset_blinding_key) {  // NOLINT
    this->asset_blinding_key_ = asset_blinding_key;
  }
  /**
   * @brief Get data type of assetBlindingKey
   * @return Data type of assetBlindingKey
   */
  static std::string GetAssetBlindingKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetBlindingKey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetBlindingKeyString(  // line separate
      const UnblindIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_blinding_key_);
  }
  /**
   * @brief Set json object to assetBlindingKey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetBlindingKeyString(  // line separate
      UnblindIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_blinding_key_, json_value);
  }

  /**
   * @brief Get of tokenBlindingKey
   * @return tokenBlindingKey
   */
  std::string GetTokenBlindingKey() const {
    return token_blinding_key_;
  }
  /**
   * @brief Set to tokenBlindingKey
   * @param[in] token_blinding_key    setting value.
   */
  void SetTokenBlindingKey(  // line separate
    const std::string& token_blinding_key) {  // NOLINT
    this->token_blinding_key_ = token_blinding_key;
  }
  /**
   * @brief Get data type of tokenBlindingKey
   * @return Data type of tokenBlindingKey
   */
  static std::string GetTokenBlindingKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tokenBlindingKey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTokenBlindingKeyString(  // line separate
      const UnblindIssuance& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.token_blinding_key_);
  }
  /**
   * @brief Set json object to tokenBlindingKey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTokenBlindingKeyString(  // line separate
      UnblindIssuance& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.token_blinding_key_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const UnblindIssuanceStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  UnblindIssuanceStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using UnblindIssuanceMapTable =
    cfd::core::JsonTableMap<UnblindIssuance>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const UnblindIssuanceMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static UnblindIssuanceMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(assetBlindingKey) value
   */
  std::string asset_blinding_key_ = "";
  /**
   * @brief JsonAPI(tokenBlindingKey) value
   */
  std::string token_blinding_key_ = "";
};

// ------------------------------------------------------------------------
// UnblindIssuanceOutput
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (UnblindIssuanceOutput) class
 */
class UnblindIssuanceOutput
  : public cfd::core::JsonClassBase<UnblindIssuanceOutput> {
 public:
  UnblindIssuanceOutput() {
    CollectFieldName();
  }
  virtual ~UnblindIssuanceOutput() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const UnblindIssuanceOutput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      UnblindIssuanceOutput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const UnblindIssuanceOutput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      UnblindIssuanceOutput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const UnblindIssuanceOutput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      UnblindIssuanceOutput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of assetamount
   * @return assetamount
   */
  int64_t GetAssetamount() const {
    return assetamount_;
  }
  /**
   * @brief Set to assetamount
   * @param[in] assetamount    setting value.
   */
  void SetAssetamount(  // line separate
    const int64_t& assetamount) {  // NOLINT
    this->assetamount_ = assetamount;
  }
  /**
   * @brief Get data type of assetamount
   * @return Data type of assetamount
   */
  static std::string GetAssetamountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of assetamount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetamountString(  // line separate
      const UnblindIssuanceOutput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.assetamount_);
  }
  /**
   * @brief Set json object to assetamount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetamountString(  // line separate
      UnblindIssuanceOutput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.assetamount_, json_value);
  }

  /**
   * @brief Get of token
   * @return token
   */
  std::string GetToken() const {
    return token_;
  }
  /**
   * @brief Set to token
   * @param[in] token    setting value.
   */
  void SetToken(  // line separate
    const std::string& token) {  // NOLINT
    this->token_ = token;
  }
  /**
   * @brief Get data type of token
   * @return Data type of token
   */
  static std::string GetTokenFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of token field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTokenString(  // line separate
      const UnblindIssuanceOutput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.token_);
  }
  /**
   * @brief Set json object to token field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTokenString(  // line separate
      UnblindIssuanceOutput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.token_, json_value);
  }

  /**
   * @brief Get of tokenamount
   * @return tokenamount
   */
  int64_t GetTokenamount() const {
    return tokenamount_;
  }
  /**
   * @brief Set to tokenamount
   * @param[in] tokenamount    setting value.
   */
  void SetTokenamount(  // line separate
    const int64_t& tokenamount) {  // NOLINT
    this->tokenamount_ = tokenamount;
  }
  /**
   * @brief Get data type of tokenamount
   * @return Data type of tokenamount
   */
  static std::string GetTokenamountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of tokenamount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTokenamountString(  // line separate
      const UnblindIssuanceOutput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tokenamount_);
  }
  /**
   * @brief Set json object to tokenamount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTokenamountString(  // line separate
      UnblindIssuanceOutput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tokenamount_, json_value);
  }

  /**
   * @brief Get of assetValueBlindFactor
   * @return assetValueBlindFactor
   */
  std::string GetAssetValueBlindFactor() const {
    return asset_value_blind_factor_;
  }
  /**
   * @brief Set to assetValueBlindFactor
   * @param[in] asset_value_blind_factor    setting value.
   */
  void SetAssetValueBlindFactor(  // line separate
    const std::string& asset_value_blind_factor) {  // NOLINT
    this->asset_value_blind_factor_ = asset_value_blind_factor;
  }
  /**
   * @brief Get data type of assetValueBlindFactor
   * @return Data type of assetValueBlindFactor
   */
  static std::string GetAssetValueBlindFactorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetValueBlindFactor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetValueBlindFactorString(  // line separate
      const UnblindIssuanceOutput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_value_blind_factor_);
  }
  /**
   * @brief Set json object to assetValueBlindFactor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetValueBlindFactorString(  // line separate
      UnblindIssuanceOutput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_value_blind_factor_, json_value);
  }

  /**
   * @brief Get of tokenValueBlindFactor
   * @return tokenValueBlindFactor
   */
  std::string GetTokenValueBlindFactor() const {
    return token_value_blind_factor_;
  }
  /**
   * @brief Set to tokenValueBlindFactor
   * @param[in] token_value_blind_factor    setting value.
   */
  void SetTokenValueBlindFactor(  // line separate
    const std::string& token_value_blind_factor) {  // NOLINT
    this->token_value_blind_factor_ = token_value_blind_factor;
  }
  /**
   * @brief Get data type of tokenValueBlindFactor
   * @return Data type of tokenValueBlindFactor
   */
  static std::string GetTokenValueBlindFactorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tokenValueBlindFactor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTokenValueBlindFactorString(  // line separate
      const UnblindIssuanceOutput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.token_value_blind_factor_);
  }
  /**
   * @brief Set json object to tokenValueBlindFactor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTokenValueBlindFactorString(  // line separate
      UnblindIssuanceOutput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.token_value_blind_factor_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const UnblindIssuanceOutputStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  UnblindIssuanceOutputStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using UnblindIssuanceOutputMapTable =
    cfd::core::JsonTableMap<UnblindIssuanceOutput>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const UnblindIssuanceOutputMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static UnblindIssuanceOutputMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(assetamount) value
   */
  int64_t assetamount_ = 0;
  /**
   * @brief JsonAPI(token) value
   */
  std::string token_ = "";
  /**
   * @brief JsonAPI(tokenamount) value
   */
  int64_t tokenamount_ = 0;
  /**
   * @brief JsonAPI(assetValueBlindFactor) value
   */
  std::string asset_value_blind_factor_ = "";
  /**
   * @brief JsonAPI(tokenValueBlindFactor) value
   */
  std::string token_value_blind_factor_ = "";
};

// ------------------------------------------------------------------------
// UnblindOutput
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (UnblindOutput) class
 */
class UnblindOutput
  : public cfd::core::JsonClassBase<UnblindOutput> {
 public:
  UnblindOutput() {
    CollectFieldName();
  }
  virtual ~UnblindOutput() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of index
   * @return index
   */
  uint32_t GetIndex() const {
    return index_;
  }
  /**
   * @brief Set to index
   * @param[in] index    setting value.
   */
  void SetIndex(  // line separate
    const uint32_t& index) {  // NOLINT
    this->index_ = index;
  }
  /**
   * @brief Get data type of index
   * @return Data type of index
   */
  static std::string GetIndexFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of index field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIndexString(  // line separate
      const UnblindOutput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.index_);
  }
  /**
   * @brief Set json object to index field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIndexString(  // line separate
      UnblindOutput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.index_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const UnblindOutput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      UnblindOutput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of blindFactor
   * @return blindFactor
   */
  std::string GetBlindFactor() const {
    return blind_factor_;
  }
  /**
   * @brief Set to blindFactor
   * @param[in] blind_factor    setting value.
   */
  void SetBlindFactor(  // line separate
    const std::string& blind_factor) {  // NOLINT
    this->blind_factor_ = blind_factor;
  }
  /**
   * @brief Get data type of blindFactor
   * @return Data type of blindFactor
   */
  static std::string GetBlindFactorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of blindFactor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBlindFactorString(  // line separate
      const UnblindOutput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.blind_factor_);
  }
  /**
   * @brief Set json object to blindFactor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBlindFactorString(  // line separate
      UnblindOutput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.blind_factor_, json_value);
  }

  /**
   * @brief Get of assetBlindFactor
   * @return assetBlindFactor
   */
  std::string GetAssetBlindFactor() const {
    return asset_blind_factor_;
  }
  /**
   * @brief Set to assetBlindFactor
   * @param[in] asset_blind_factor    setting value.
   */
  void SetAssetBlindFactor(  // line separate
    const std::string& asset_blind_factor) {  // NOLINT
    this->asset_blind_factor_ = asset_blind_factor;
  }
  /**
   * @brief Get data type of assetBlindFactor
   * @return Data type of assetBlindFactor
   */
  static std::string GetAssetBlindFactorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetBlindFactor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetBlindFactorString(  // line separate
      const UnblindOutput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_blind_factor_);
  }
  /**
   * @brief Set json object to assetBlindFactor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetBlindFactorString(  // line separate
      UnblindOutput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_blind_factor_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const UnblindOutput& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      UnblindOutput& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const UnblindOutputStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  UnblindOutputStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using UnblindOutputMapTable =
    cfd::core::JsonTableMap<UnblindOutput>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const UnblindOutputMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static UnblindOutputMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(index) value
   */
  uint32_t index_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(blindFactor) value
   */
  std::string blind_factor_ = "";
  /**
   * @brief JsonAPI(assetBlindFactor) value
   */
  std::string asset_blind_factor_ = "";
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
};

// ------------------------------------------------------------------------
// UnblindTxOut
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (UnblindTxOut) class
 */
class UnblindTxOut
  : public cfd::core::JsonClassBase<UnblindTxOut> {
 public:
  UnblindTxOut() {
    CollectFieldName();
  }
  virtual ~UnblindTxOut() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of index
   * @return index
   */
  uint32_t GetIndex() const {
    return index_;
  }
  /**
   * @brief Set to index
   * @param[in] index    setting value.
   */
  void SetIndex(  // line separate
    const uint32_t& index) {  // NOLINT
    this->index_ = index;
  }
  /**
   * @brief Get data type of index
   * @return Data type of index
   */
  static std::string GetIndexFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of index field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIndexString(  // line separate
      const UnblindTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.index_);
  }
  /**
   * @brief Set json object to index field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIndexString(  // line separate
      UnblindTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.index_, json_value);
  }

  /**
   * @brief Get of blindingKey
   * @return blindingKey
   */
  std::string GetBlindingKey() const {
    return blinding_key_;
  }
  /**
   * @brief Set to blindingKey
   * @param[in] blinding_key    setting value.
   */
  void SetBlindingKey(  // line separate
    const std::string& blinding_key) {  // NOLINT
    this->blinding_key_ = blinding_key;
  }
  /**
   * @brief Get data type of blindingKey
   * @return Data type of blindingKey
   */
  static std::string GetBlindingKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of blindingKey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBlindingKeyString(  // line separate
      const UnblindTxOut& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.blinding_key_);
  }
  /**
   * @brief Set json object to blindingKey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBlindingKeyString(  // line separate
      UnblindTxOut& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.blinding_key_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const UnblindTxOutStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  UnblindTxOutStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using UnblindTxOutMapTable =
    cfd::core::JsonTableMap<UnblindTxOut>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const UnblindTxOutMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static UnblindTxOutMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(index) value
   */
  uint32_t index_ = 0;
  /**
   * @brief JsonAPI(blindingKey) value
   */
  std::string blinding_key_ = "";
};

// ------------------------------------------------------------------------
// UpdateTxOutAmountData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (UpdateTxOutAmountData) class
 */
class UpdateTxOutAmountData
  : public cfd::core::JsonClassBase<UpdateTxOutAmountData> {
 public:
  UpdateTxOutAmountData() {
    CollectFieldName();
  }
  virtual ~UpdateTxOutAmountData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const UpdateTxOutAmountData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      UpdateTxOutAmountData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of index
   * @return index
   */
  uint32_t GetIndex() const {
    return index_;
  }
  /**
   * @brief Set to index
   * @param[in] index    setting value.
   */
  void SetIndex(  // line separate
    const uint32_t& index) {  // NOLINT
    this->index_ = index;
  }
  /**
   * @brief Get data type of index
   * @return Data type of index
   */
  static std::string GetIndexFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of index field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIndexString(  // line separate
      const UpdateTxOutAmountData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.index_);
  }
  /**
   * @brief Set json object to index field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIndexString(  // line separate
      UpdateTxOutAmountData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.index_, json_value);
  }

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const UpdateTxOutAmountData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      UpdateTxOutAmountData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Get of directLockingScript
   * @return directLockingScript
   */
  std::string GetDirectLockingScript() const {
    return direct_locking_script_;
  }
  /**
   * @brief Set to directLockingScript
   * @param[in] direct_locking_script    setting value.
   */
  void SetDirectLockingScript(  // line separate
    const std::string& direct_locking_script) {  // NOLINT
    this->direct_locking_script_ = direct_locking_script;
  }
  /**
   * @brief Get data type of directLockingScript
   * @return Data type of directLockingScript
   */
  static std::string GetDirectLockingScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of directLockingScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDirectLockingScriptString(  // line separate
      const UpdateTxOutAmountData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.direct_locking_script_);
  }
  /**
   * @brief Set json object to directLockingScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDirectLockingScriptString(  // line separate
      UpdateTxOutAmountData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.direct_locking_script_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const UpdateTxOutAmountDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  UpdateTxOutAmountDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using UpdateTxOutAmountDataMapTable =
    cfd::core::JsonTableMap<UpdateTxOutAmountData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const UpdateTxOutAmountDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static UpdateTxOutAmountDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(index) value
   */
  uint32_t index_ = 0;
  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
  /**
   * @brief JsonAPI(directLockingScript) value
   */
  std::string direct_locking_script_ = "";
};

// ------------------------------------------------------------------------
// UpdateWitnessStackTxInRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (UpdateWitnessStackTxInRequest) class
 */
class UpdateWitnessStackTxInRequest
  : public cfd::core::JsonClassBase<UpdateWitnessStackTxInRequest> {
 public:
  UpdateWitnessStackTxInRequest() {
    CollectFieldName();
  }
  virtual ~UpdateWitnessStackTxInRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const UpdateWitnessStackTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      UpdateWitnessStackTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const UpdateWitnessStackTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      UpdateWitnessStackTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of witnessStack.
   * @return witnessStack
   */
  WitnessStackData& GetWitnessStack() {  // NOLINT
    return witness_stack_;
  }
  /**
   * @brief Set to witnessStack.
   * @param[in] witness_stack    setting value.
   */
  void SetWitnessStack(  // line separate
      const WitnessStackData& witness_stack) {  // NOLINT
    this->witness_stack_ = witness_stack;
  }
  /**
   * @brief Get data type of witnessStack.
   * @return Data type of witnessStack.
   */
  static std::string GetWitnessStackFieldType() {
    return "WitnessStackData";  // NOLINT
  }
  /**
   * @brief Get json string of witnessStack field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetWitnessStackString(  // line separate
      const UpdateWitnessStackTxInRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.witness_stack_.Serialize();
  }
  /**
   * @brief Set json object to witnessStack field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetWitnessStackString(  // line separate
      UpdateWitnessStackTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.witness_stack_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const UpdateWitnessStackTxInRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  UpdateWitnessStackTxInRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using UpdateWitnessStackTxInRequestMapTable =
    cfd::core::JsonTableMap<UpdateWitnessStackTxInRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const UpdateWitnessStackTxInRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static UpdateWitnessStackTxInRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(witnessStack) value
   */
  WitnessStackData witness_stack_;  // NOLINT
};

// ------------------------------------------------------------------------
// UtxoJsonData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (UtxoJsonData) class
 */
class UtxoJsonData
  : public cfd::core::JsonClassBase<UtxoJsonData> {
 public:
  UtxoJsonData() {
    CollectFieldName();
  }
  virtual ~UtxoJsonData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const UtxoJsonData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      UtxoJsonData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const UtxoJsonData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      UtxoJsonData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const UtxoJsonData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      UtxoJsonData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const UtxoJsonData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      UtxoJsonData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of descriptor
   * @return descriptor
   */
  std::string GetDescriptor() const {
    return descriptor_;
  }
  /**
   * @brief Set to descriptor
   * @param[in] descriptor    setting value.
   */
  void SetDescriptor(  // line separate
    const std::string& descriptor) {  // NOLINT
    this->descriptor_ = descriptor;
  }
  /**
   * @brief Get data type of descriptor
   * @return Data type of descriptor
   */
  static std::string GetDescriptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of descriptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDescriptorString(  // line separate
      const UtxoJsonData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.descriptor_);
  }
  /**
   * @brief Set json object to descriptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDescriptorString(  // line separate
      UtxoJsonData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.descriptor_, json_value);
  }

  /**
   * @brief Get of scriptSigTemplate
   * @return scriptSigTemplate
   */
  std::string GetScriptSigTemplate() const {
    return script_sig_template_;
  }
  /**
   * @brief Set to scriptSigTemplate
   * @param[in] script_sig_template    setting value.
   */
  void SetScriptSigTemplate(  // line separate
    const std::string& script_sig_template) {  // NOLINT
    this->script_sig_template_ = script_sig_template;
  }
  /**
   * @brief Get data type of scriptSigTemplate
   * @return Data type of scriptSigTemplate
   */
  static std::string GetScriptSigTemplateFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of scriptSigTemplate field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetScriptSigTemplateString(  // line separate
      const UtxoJsonData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.script_sig_template_);
  }
  /**
   * @brief Set json object to scriptSigTemplate field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetScriptSigTemplateString(  // line separate
      UtxoJsonData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.script_sig_template_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const UtxoJsonDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  UtxoJsonDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using UtxoJsonDataMapTable =
    cfd::core::JsonTableMap<UtxoJsonData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const UtxoJsonDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static UtxoJsonDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(descriptor) value
   */
  std::string descriptor_ = "";
  /**
   * @brief JsonAPI(scriptSigTemplate) value
   */
  std::string script_sig_template_ = "";
};

// ------------------------------------------------------------------------
// UtxoObject
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (UtxoObject) class
 */
class UtxoObject
  : public cfd::core::JsonClassBase<UtxoObject> {
 public:
  UtxoObject() {
    CollectFieldName();
  }
  virtual ~UtxoObject() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const UtxoObject& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      UtxoObject& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const UtxoObject& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      UtxoObject& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const UtxoObject& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      UtxoObject& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Get of lockingScript
   * @return lockingScript
   */
  std::string GetLockingScript() const {
    return locking_script_;
  }
  /**
   * @brief Set to lockingScript
   * @param[in] locking_script    setting value.
   */
  void SetLockingScript(  // line separate
    const std::string& locking_script) {  // NOLINT
    this->locking_script_ = locking_script;
  }
  /**
   * @brief Get data type of lockingScript
   * @return Data type of lockingScript
   */
  static std::string GetLockingScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of lockingScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLockingScriptString(  // line separate
      const UtxoObject& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locking_script_);
  }
  /**
   * @brief Set json object to lockingScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLockingScriptString(  // line separate
      UtxoObject& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locking_script_, json_value);
  }

  /**
   * @brief Get of descriptor
   * @return descriptor
   */
  std::string GetDescriptor() const {
    return descriptor_;
  }
  /**
   * @brief Set to descriptor
   * @param[in] descriptor    setting value.
   */
  void SetDescriptor(  // line separate
    const std::string& descriptor) {  // NOLINT
    this->descriptor_ = descriptor;
  }
  /**
   * @brief Get data type of descriptor
   * @return Data type of descriptor
   */
  static std::string GetDescriptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of descriptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDescriptorString(  // line separate
      const UtxoObject& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.descriptor_);
  }
  /**
   * @brief Set json object to descriptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDescriptorString(  // line separate
      UtxoObject& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.descriptor_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const UtxoObject& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      UtxoObject& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of confidentialValueCommitment
   * @return confidentialValueCommitment
   */
  std::string GetConfidentialValueCommitment() const {
    return confidential_value_commitment_;
  }
  /**
   * @brief Set to confidentialValueCommitment
   * @param[in] confidential_value_commitment    setting value.
   */
  void SetConfidentialValueCommitment(  // line separate
    const std::string& confidential_value_commitment) {  // NOLINT
    this->confidential_value_commitment_ = confidential_value_commitment;
  }
  /**
   * @brief Get data type of confidentialValueCommitment
   * @return Data type of confidentialValueCommitment
   */
  static std::string GetConfidentialValueCommitmentFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of confidentialValueCommitment field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetConfidentialValueCommitmentString(  // line separate
      const UtxoObject& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.confidential_value_commitment_);
  }
  /**
   * @brief Set json object to confidentialValueCommitment field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetConfidentialValueCommitmentString(  // line separate
      UtxoObject& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.confidential_value_commitment_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const UtxoObject& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      UtxoObject& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of confidentialAssetCommitment
   * @return confidentialAssetCommitment
   */
  std::string GetConfidentialAssetCommitment() const {
    return confidential_asset_commitment_;
  }
  /**
   * @brief Set to confidentialAssetCommitment
   * @param[in] confidential_asset_commitment    setting value.
   */
  void SetConfidentialAssetCommitment(  // line separate
    const std::string& confidential_asset_commitment) {  // NOLINT
    this->confidential_asset_commitment_ = confidential_asset_commitment;
  }
  /**
   * @brief Get data type of confidentialAssetCommitment
   * @return Data type of confidentialAssetCommitment
   */
  static std::string GetConfidentialAssetCommitmentFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of confidentialAssetCommitment field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetConfidentialAssetCommitmentString(  // line separate
      const UtxoObject& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.confidential_asset_commitment_);
  }
  /**
   * @brief Set json object to confidentialAssetCommitment field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetConfidentialAssetCommitmentString(  // line separate
      UtxoObject& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.confidential_asset_commitment_, json_value);
  }

  /**
   * @brief Get of blindFactor
   * @return blindFactor
   */
  std::string GetBlindFactor() const {
    return blind_factor_;
  }
  /**
   * @brief Set to blindFactor
   * @param[in] blind_factor    setting value.
   */
  void SetBlindFactor(  // line separate
    const std::string& blind_factor) {  // NOLINT
    this->blind_factor_ = blind_factor;
  }
  /**
   * @brief Get data type of blindFactor
   * @return Data type of blindFactor
   */
  static std::string GetBlindFactorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of blindFactor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBlindFactorString(  // line separate
      const UtxoObject& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.blind_factor_);
  }
  /**
   * @brief Set json object to blindFactor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBlindFactorString(  // line separate
      UtxoObject& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.blind_factor_, json_value);
  }

  /**
   * @brief Get of assetBlindFactor
   * @return assetBlindFactor
   */
  std::string GetAssetBlindFactor() const {
    return asset_blind_factor_;
  }
  /**
   * @brief Set to assetBlindFactor
   * @param[in] asset_blind_factor    setting value.
   */
  void SetAssetBlindFactor(  // line separate
    const std::string& asset_blind_factor) {  // NOLINT
    this->asset_blind_factor_ = asset_blind_factor;
  }
  /**
   * @brief Get data type of assetBlindFactor
   * @return Data type of assetBlindFactor
   */
  static std::string GetAssetBlindFactorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetBlindFactor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetBlindFactorString(  // line separate
      const UtxoObject& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_blind_factor_);
  }
  /**
   * @brief Set json object to assetBlindFactor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetBlindFactorString(  // line separate
      UtxoObject& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_blind_factor_, json_value);
  }

  /**
   * @brief Get of scriptSigTemplate
   * @return scriptSigTemplate
   */
  std::string GetScriptSigTemplate() const {
    return script_sig_template_;
  }
  /**
   * @brief Set to scriptSigTemplate
   * @param[in] script_sig_template    setting value.
   */
  void SetScriptSigTemplate(  // line separate
    const std::string& script_sig_template) {  // NOLINT
    this->script_sig_template_ = script_sig_template;
  }
  /**
   * @brief Get data type of scriptSigTemplate
   * @return Data type of scriptSigTemplate
   */
  static std::string GetScriptSigTemplateFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of scriptSigTemplate field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetScriptSigTemplateString(  // line separate
      const UtxoObject& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.script_sig_template_);
  }
  /**
   * @brief Set json object to scriptSigTemplate field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetScriptSigTemplateString(  // line separate
      UtxoObject& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.script_sig_template_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const UtxoObjectStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  UtxoObjectStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using UtxoObjectMapTable =
    cfd::core::JsonTableMap<UtxoObject>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const UtxoObjectMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static UtxoObjectMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
  /**
   * @brief JsonAPI(lockingScript) value
   */
  std::string locking_script_ = "";
  /**
   * @brief JsonAPI(descriptor) value
   */
  std::string descriptor_ = "";
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(confidentialValueCommitment) value
   */
  std::string confidential_value_commitment_ = "";
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(confidentialAssetCommitment) value
   */
  std::string confidential_asset_commitment_ = "";
  /**
   * @brief JsonAPI(blindFactor) value
   */
  std::string blind_factor_ = "";
  /**
   * @brief JsonAPI(assetBlindFactor) value
   */
  std::string asset_blind_factor_ = "";
  /**
   * @brief JsonAPI(scriptSigTemplate) value
   */
  std::string script_sig_template_ = "";
};

// ------------------------------------------------------------------------
// VerifySignatureTxInRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (VerifySignatureTxInRequest) class
 */
class VerifySignatureTxInRequest
  : public cfd::core::JsonClassBase<VerifySignatureTxInRequest> {
 public:
  VerifySignatureTxInRequest() {
    CollectFieldName();
  }
  virtual ~VerifySignatureTxInRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const VerifySignatureTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      VerifySignatureTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const VerifySignatureTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      VerifySignatureTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of signature
   * @return signature
   */
  std::string GetSignature() const {
    return signature_;
  }
  /**
   * @brief Set to signature
   * @param[in] signature    setting value.
   */
  void SetSignature(  // line separate
    const std::string& signature) {  // NOLINT
    this->signature_ = signature;
  }
  /**
   * @brief Get data type of signature
   * @return Data type of signature
   */
  static std::string GetSignatureFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of signature field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSignatureString(  // line separate
      const VerifySignatureTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.signature_);
  }
  /**
   * @brief Set json object to signature field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSignatureString(  // line separate
      VerifySignatureTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.signature_, json_value);
  }

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const VerifySignatureTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      VerifySignatureTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Get of redeemScript
   * @return redeemScript
   */
  std::string GetRedeemScript() const {
    return redeem_script_;
  }
  /**
   * @brief Set to redeemScript
   * @param[in] redeem_script    setting value.
   */
  void SetRedeemScript(  // line separate
    const std::string& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeemScript
   * @return Data type of redeemScript
   */
  static std::string GetRedeemScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of redeemScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRedeemScriptString(  // line separate
      const VerifySignatureTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.redeem_script_);
  }
  /**
   * @brief Set json object to redeemScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRedeemScriptString(  // line separate
      VerifySignatureTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.redeem_script_, json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const VerifySignatureTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      VerifySignatureTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Get of sighashType
   * @return sighashType
   */
  std::string GetSighashType() const {
    return sighash_type_;
  }
  /**
   * @brief Set to sighashType
   * @param[in] sighash_type    setting value.
   */
  void SetSighashType(  // line separate
    const std::string& sighash_type) {  // NOLINT
    this->sighash_type_ = sighash_type;
  }
  /**
   * @brief Get data type of sighashType
   * @return Data type of sighashType
   */
  static std::string GetSighashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashTypeString(  // line separate
      const VerifySignatureTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_type_);
  }
  /**
   * @brief Set json object to sighashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashTypeString(  // line separate
      VerifySignatureTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_type_, json_value);
  }

  /**
   * @brief Get of sighashAnyoneCanPay
   * @return sighashAnyoneCanPay
   */
  bool GetSighashAnyoneCanPay() const {
    return sighash_anyone_can_pay_;
  }
  /**
   * @brief Set to sighashAnyoneCanPay
   * @param[in] sighash_anyone_can_pay    setting value.
   */
  void SetSighashAnyoneCanPay(  // line separate
    const bool& sighash_anyone_can_pay) {  // NOLINT
    this->sighash_anyone_can_pay_ = sighash_anyone_can_pay;
  }
  /**
   * @brief Get data type of sighashAnyoneCanPay
   * @return Data type of sighashAnyoneCanPay
   */
  static std::string GetSighashAnyoneCanPayFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashAnyoneCanPayString(  // line separate
      const VerifySignatureTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_anyone_can_pay_);
  }
  /**
   * @brief Set json object to sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashAnyoneCanPayString(  // line separate
      VerifySignatureTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_anyone_can_pay_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const VerifySignatureTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      VerifySignatureTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of confidentialValueCommitment
   * @return confidentialValueCommitment
   */
  std::string GetConfidentialValueCommitment() const {
    return confidential_value_commitment_;
  }
  /**
   * @brief Set to confidentialValueCommitment
   * @param[in] confidential_value_commitment    setting value.
   */
  void SetConfidentialValueCommitment(  // line separate
    const std::string& confidential_value_commitment) {  // NOLINT
    this->confidential_value_commitment_ = confidential_value_commitment;
  }
  /**
   * @brief Get data type of confidentialValueCommitment
   * @return Data type of confidentialValueCommitment
   */
  static std::string GetConfidentialValueCommitmentFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of confidentialValueCommitment field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetConfidentialValueCommitmentString(  // line separate
      const VerifySignatureTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.confidential_value_commitment_);
  }
  /**
   * @brief Set json object to confidentialValueCommitment field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetConfidentialValueCommitmentString(  // line separate
      VerifySignatureTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.confidential_value_commitment_, json_value);
  }

  /**
   * @brief Get of annex
   * @return annex
   */
  std::string GetAnnex() const {
    return annex_;
  }
  /**
   * @brief Set to annex
   * @param[in] annex    setting value.
   */
  void SetAnnex(  // line separate
    const std::string& annex) {  // NOLINT
    this->annex_ = annex;
  }
  /**
   * @brief Get data type of annex
   * @return Data type of annex
   */
  static std::string GetAnnexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of annex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAnnexString(  // line separate
      const VerifySignatureTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.annex_);
  }
  /**
   * @brief Set json object to annex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAnnexString(  // line separate
      VerifySignatureTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.annex_, json_value);
  }

  /**
   * @brief Get of codeSeparatorPosition
   * @return codeSeparatorPosition
   */
  int64_t GetCodeSeparatorPosition() const {
    return code_separator_position_;
  }
  /**
   * @brief Set to codeSeparatorPosition
   * @param[in] code_separator_position    setting value.
   */
  void SetCodeSeparatorPosition(  // line separate
    const int64_t& code_separator_position) {  // NOLINT
    this->code_separator_position_ = code_separator_position;
  }
  /**
   * @brief Get data type of codeSeparatorPosition
   * @return Data type of codeSeparatorPosition
   */
  static std::string GetCodeSeparatorPositionFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of codeSeparatorPosition field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetCodeSeparatorPositionString(  // line separate
      const VerifySignatureTxInRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.code_separator_position_);
  }
  /**
   * @brief Set json object to codeSeparatorPosition field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetCodeSeparatorPositionString(  // line separate
      VerifySignatureTxInRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.code_separator_position_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const VerifySignatureTxInRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  VerifySignatureTxInRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using VerifySignatureTxInRequestMapTable =
    cfd::core::JsonTableMap<VerifySignatureTxInRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const VerifySignatureTxInRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static VerifySignatureTxInRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(signature) value
   */
  std::string signature_ = "";
  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
  /**
   * @brief JsonAPI(redeemScript) value
   */
  std::string redeem_script_ = "";
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "p2wpkh";
  /**
   * @brief JsonAPI(sighashType) value
   */
  std::string sighash_type_ = "all";
  /**
   * @brief JsonAPI(sighashAnyoneCanPay) value
   */
  bool sighash_anyone_can_pay_ = false;
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(confidentialValueCommitment) value
   */
  std::string confidential_value_commitment_ = "";
  /**
   * @brief JsonAPI(annex) value
   */
  std::string annex_ = "";
  /**
   * @brief JsonAPI(codeSeparatorPosition) value
   */
  int64_t code_separator_position_ = -1;
};

// ------------------------------------------------------------------------
// VerifySignTxInUtxoData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (VerifySignTxInUtxoData) class
 */
class VerifySignTxInUtxoData
  : public cfd::core::JsonClassBase<VerifySignTxInUtxoData> {
 public:
  VerifySignTxInUtxoData() {
    CollectFieldName();
  }
  virtual ~VerifySignTxInUtxoData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const VerifySignTxInUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      VerifySignTxInUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const VerifySignTxInUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      VerifySignTxInUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const VerifySignTxInUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      VerifySignTxInUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const VerifySignTxInUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      VerifySignTxInUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of descriptor
   * @return descriptor
   */
  std::string GetDescriptor() const {
    return descriptor_;
  }
  /**
   * @brief Set to descriptor
   * @param[in] descriptor    setting value.
   */
  void SetDescriptor(  // line separate
    const std::string& descriptor) {  // NOLINT
    this->descriptor_ = descriptor;
  }
  /**
   * @brief Get data type of descriptor
   * @return Data type of descriptor
   */
  static std::string GetDescriptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of descriptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDescriptorString(  // line separate
      const VerifySignTxInUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.descriptor_);
  }
  /**
   * @brief Set json object to descriptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDescriptorString(  // line separate
      VerifySignTxInUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.descriptor_, json_value);
  }

  /**
   * @brief Get of lockingScript
   * @return lockingScript
   */
  std::string GetLockingScript() const {
    return locking_script_;
  }
  /**
   * @brief Set to lockingScript
   * @param[in] locking_script    setting value.
   */
  void SetLockingScript(  // line separate
    const std::string& locking_script) {  // NOLINT
    this->locking_script_ = locking_script;
  }
  /**
   * @brief Get data type of lockingScript
   * @return Data type of lockingScript
   */
  static std::string GetLockingScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of lockingScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLockingScriptString(  // line separate
      const VerifySignTxInUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locking_script_);
  }
  /**
   * @brief Set json object to lockingScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLockingScriptString(  // line separate
      VerifySignTxInUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locking_script_, json_value);
  }

  /**
   * @brief Get of confidentialValueCommitment
   * @return confidentialValueCommitment
   */
  std::string GetConfidentialValueCommitment() const {
    return confidential_value_commitment_;
  }
  /**
   * @brief Set to confidentialValueCommitment
   * @param[in] confidential_value_commitment    setting value.
   */
  void SetConfidentialValueCommitment(  // line separate
    const std::string& confidential_value_commitment) {  // NOLINT
    this->confidential_value_commitment_ = confidential_value_commitment;
  }
  /**
   * @brief Get data type of confidentialValueCommitment
   * @return Data type of confidentialValueCommitment
   */
  static std::string GetConfidentialValueCommitmentFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of confidentialValueCommitment field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetConfidentialValueCommitmentString(  // line separate
      const VerifySignTxInUtxoData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.confidential_value_commitment_);
  }
  /**
   * @brief Set json object to confidentialValueCommitment field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetConfidentialValueCommitmentString(  // line separate
      VerifySignTxInUtxoData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.confidential_value_commitment_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const VerifySignTxInUtxoDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  VerifySignTxInUtxoDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using VerifySignTxInUtxoDataMapTable =
    cfd::core::JsonTableMap<VerifySignTxInUtxoData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const VerifySignTxInUtxoDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static VerifySignTxInUtxoDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(descriptor) value
   */
  std::string descriptor_ = "";
  /**
   * @brief JsonAPI(lockingScript) value
   */
  std::string locking_script_ = "";
  /**
   * @brief JsonAPI(confidentialValueCommitment) value
   */
  std::string confidential_value_commitment_ = "";
};

// ------------------------------------------------------------------------
// AdaptEcdsaAdaptorRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AdaptEcdsaAdaptorRequest) class
 */
class AdaptEcdsaAdaptorRequest
  : public cfd::core::JsonClassBase<AdaptEcdsaAdaptorRequest> {
 public:
  AdaptEcdsaAdaptorRequest() {
    CollectFieldName();
  }
  virtual ~AdaptEcdsaAdaptorRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of adaptorSignature
   * @return adaptorSignature
   */
  std::string GetAdaptorSignature() const {
    return adaptor_signature_;
  }
  /**
   * @brief Set to adaptorSignature
   * @param[in] adaptor_signature    setting value.
   */
  void SetAdaptorSignature(  // line separate
    const std::string& adaptor_signature) {  // NOLINT
    this->adaptor_signature_ = adaptor_signature;
  }
  /**
   * @brief Get data type of adaptorSignature
   * @return Data type of adaptorSignature
   */
  static std::string GetAdaptorSignatureFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of adaptorSignature field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAdaptorSignatureString(  // line separate
      const AdaptEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.adaptor_signature_);
  }
  /**
   * @brief Set json object to adaptorSignature field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAdaptorSignatureString(  // line separate
      AdaptEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.adaptor_signature_, json_value);
  }

  /**
   * @brief Get of secret
   * @return secret
   */
  std::string GetSecret() const {
    return secret_;
  }
  /**
   * @brief Set to secret
   * @param[in] secret    setting value.
   */
  void SetSecret(  // line separate
    const std::string& secret) {  // NOLINT
    this->secret_ = secret;
  }
  /**
   * @brief Get data type of secret
   * @return Data type of secret
   */
  static std::string GetSecretFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of secret field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSecretString(  // line separate
      const AdaptEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.secret_);
  }
  /**
   * @brief Set json object to secret field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSecretString(  // line separate
      AdaptEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.secret_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AdaptEcdsaAdaptorRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AdaptEcdsaAdaptorRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AdaptEcdsaAdaptorRequestMapTable =
    cfd::core::JsonTableMap<AdaptEcdsaAdaptorRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AdaptEcdsaAdaptorRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AdaptEcdsaAdaptorRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(adaptorSignature) value
   */
  std::string adaptor_signature_ = "";
  /**
   * @brief JsonAPI(secret) value
   */
  std::string secret_ = "";
};

// ------------------------------------------------------------------------
// SignatureDataResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SignatureDataResponse) class
 */
class SignatureDataResponse
  : public cfd::core::JsonClassBase<SignatureDataResponse> {
 public:
  SignatureDataResponse() {
    CollectFieldName();
  }
  virtual ~SignatureDataResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of signature
   * @return signature
   */
  std::string GetSignature() const {
    return signature_;
  }
  /**
   * @brief Set to signature
   * @param[in] signature    setting value.
   */
  void SetSignature(  // line separate
    const std::string& signature) {  // NOLINT
    this->signature_ = signature;
  }
  /**
   * @brief Get data type of signature
   * @return Data type of signature
   */
  static std::string GetSignatureFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of signature field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSignatureString(  // line separate
      const SignatureDataResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.signature_);
  }
  /**
   * @brief Set json object to signature field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSignatureString(  // line separate
      SignatureDataResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.signature_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SignatureDataResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SignatureDataResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SignatureDataResponseMapTable =
    cfd::core::JsonTableMap<SignatureDataResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SignatureDataResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SignatureDataResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(signature) value
   */
  std::string signature_ = "";
};

// ------------------------------------------------------------------------
// AddMultisigSignRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AddMultisigSignRequest) class
 */
class AddMultisigSignRequest
  : public cfd::core::JsonClassBase<AddMultisigSignRequest> {
 public:
  AddMultisigSignRequest() {
    CollectFieldName();
  }
  virtual ~AddMultisigSignRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const AddMultisigSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      AddMultisigSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const AddMultisigSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      AddMultisigSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of txin.
   * @return txin
   */
  AddMultisigSignTxInRequest& GetTxin() {  // NOLINT
    return txin_;
  }
  /**
   * @brief Set to txin.
   * @param[in] txin    setting value.
   */
  void SetTxin(  // line separate
      const AddMultisigSignTxInRequest& txin) {  // NOLINT
    this->txin_ = txin;
  }
  /**
   * @brief Get data type of txin.
   * @return Data type of txin.
   */
  static std::string GetTxinFieldType() {
    return "AddMultisigSignTxInRequest";  // NOLINT
  }
  /**
   * @brief Get json string of txin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinString(  // line separate
      const AddMultisigSignRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txin_.Serialize();
  }
  /**
   * @brief Set json object to txin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinString(  // line separate
      AddMultisigSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AddMultisigSignRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AddMultisigSignRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AddMultisigSignRequestMapTable =
    cfd::core::JsonTableMap<AddMultisigSignRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AddMultisigSignRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AddMultisigSignRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(txin) value
   */
  AddMultisigSignTxInRequest txin_;  // NOLINT
};

// ------------------------------------------------------------------------
// RawTransactionResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (RawTransactionResponse) class
 */
class RawTransactionResponse
  : public cfd::core::JsonClassBase<RawTransactionResponse> {
 public:
  RawTransactionResponse() {
    CollectFieldName();
  }
  virtual ~RawTransactionResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const RawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      RawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const RawTransactionResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  RawTransactionResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using RawTransactionResponseMapTable =
    cfd::core::JsonTableMap<RawTransactionResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const RawTransactionResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static RawTransactionResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
};

// ------------------------------------------------------------------------
// AddPsbtDataRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AddPsbtDataRequest) class
 */
class AddPsbtDataRequest
  : public cfd::core::JsonClassBase<AddPsbtDataRequest> {
 public:
  AddPsbtDataRequest() {
    CollectFieldName();
  }
  virtual ~AddPsbtDataRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of psbt
   * @return psbt
   */
  std::string GetPsbt() const {
    return psbt_;
  }
  /**
   * @brief Set to psbt
   * @param[in] psbt    setting value.
   */
  void SetPsbt(  // line separate
    const std::string& psbt) {  // NOLINT
    this->psbt_ = psbt;
  }
  /**
   * @brief Get data type of psbt
   * @return Data type of psbt
   */
  static std::string GetPsbtFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of psbt field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPsbtString(  // line separate
      const AddPsbtDataRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.psbt_);
  }
  /**
   * @brief Set json object to psbt field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPsbtString(  // line separate
      AddPsbtDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.psbt_, json_value);
  }

  /**
   * @brief Get of inputs.
   * @return inputs
   */
  JsonObjectVector<PsbtAddInputRequest, PsbtAddInputRequestStruct>& GetInputs() {  // NOLINT
    return inputs_;
  }
  /**
   * @brief Set to inputs.
   * @param[in] inputs    setting value.
   */
  void SetInputs(  // line separate
      const JsonObjectVector<PsbtAddInputRequest, PsbtAddInputRequestStruct>& inputs) {  // NOLINT
    this->inputs_ = inputs;
  }
  /**
   * @brief Get data type of inputs.
   * @return Data type of inputs.
   */
  static std::string GetInputsFieldType() {
    return "JsonObjectVector<PsbtAddInputRequest, PsbtAddInputRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of inputs field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetInputsString(  // line separate
      const AddPsbtDataRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.inputs_.Serialize();
  }
  /**
   * @brief Set json object to inputs field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetInputsString(  // line separate
      AddPsbtDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.inputs_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of outputs.
   * @return outputs
   */
  JsonObjectVector<PsbtAddOutputRequest, PsbtAddOutputRequestStruct>& GetOutputs() {  // NOLINT
    return outputs_;
  }
  /**
   * @brief Set to outputs.
   * @param[in] outputs    setting value.
   */
  void SetOutputs(  // line separate
      const JsonObjectVector<PsbtAddOutputRequest, PsbtAddOutputRequestStruct>& outputs) {  // NOLINT
    this->outputs_ = outputs;
  }
  /**
   * @brief Get data type of outputs.
   * @return Data type of outputs.
   */
  static std::string GetOutputsFieldType() {
    return "JsonObjectVector<PsbtAddOutputRequest, PsbtAddOutputRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of outputs field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetOutputsString(  // line separate
      const AddPsbtDataRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.outputs_.Serialize();
  }
  /**
   * @brief Set json object to outputs field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetOutputsString(  // line separate
      AddPsbtDataRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.outputs_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AddPsbtDataRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AddPsbtDataRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AddPsbtDataRequestMapTable =
    cfd::core::JsonTableMap<AddPsbtDataRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AddPsbtDataRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AddPsbtDataRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(psbt) value
   */
  std::string psbt_ = "";
  /**
   * @brief JsonAPI(inputs) value
   */
  JsonObjectVector<PsbtAddInputRequest, PsbtAddInputRequestStruct> inputs_;  // NOLINT
  /**
   * @brief JsonAPI(outputs) value
   */
  JsonObjectVector<PsbtAddOutputRequest, PsbtAddOutputRequestStruct> outputs_;  // NOLINT
};

// ------------------------------------------------------------------------
// PsbtOutputData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtOutputData) class
 */
class PsbtOutputData
  : public cfd::core::JsonClassBase<PsbtOutputData> {
 public:
  PsbtOutputData() {
    CollectFieldName();
  }
  virtual ~PsbtOutputData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of psbt
   * @return psbt
   */
  std::string GetPsbt() const {
    return psbt_;
  }
  /**
   * @brief Set to psbt
   * @param[in] psbt    setting value.
   */
  void SetPsbt(  // line separate
    const std::string& psbt) {  // NOLINT
    this->psbt_ = psbt;
  }
  /**
   * @brief Get data type of psbt
   * @return Data type of psbt
   */
  static std::string GetPsbtFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of psbt field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPsbtString(  // line separate
      const PsbtOutputData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.psbt_);
  }
  /**
   * @brief Set json object to psbt field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPsbtString(  // line separate
      PsbtOutputData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.psbt_, json_value);
  }

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const PsbtOutputData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      PsbtOutputData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtOutputDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtOutputDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtOutputDataMapTable =
    cfd::core::JsonTableMap<PsbtOutputData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtOutputDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtOutputDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(psbt) value
   */
  std::string psbt_ = "";
  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
};

// ------------------------------------------------------------------------
// AddPubkeyHashSignRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AddPubkeyHashSignRequest) class
 */
class AddPubkeyHashSignRequest
  : public cfd::core::JsonClassBase<AddPubkeyHashSignRequest> {
 public:
  AddPubkeyHashSignRequest() {
    CollectFieldName();
  }
  virtual ~AddPubkeyHashSignRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const AddPubkeyHashSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      AddPubkeyHashSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const AddPubkeyHashSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      AddPubkeyHashSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of txin.
   * @return txin
   */
  AddPubkeyHashSignTxInRequest& GetTxin() {  // NOLINT
    return txin_;
  }
  /**
   * @brief Set to txin.
   * @param[in] txin    setting value.
   */
  void SetTxin(  // line separate
      const AddPubkeyHashSignTxInRequest& txin) {  // NOLINT
    this->txin_ = txin;
  }
  /**
   * @brief Get data type of txin.
   * @return Data type of txin.
   */
  static std::string GetTxinFieldType() {
    return "AddPubkeyHashSignTxInRequest";  // NOLINT
  }
  /**
   * @brief Get json string of txin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinString(  // line separate
      const AddPubkeyHashSignRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txin_.Serialize();
  }
  /**
   * @brief Set json object to txin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinString(  // line separate
      AddPubkeyHashSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AddPubkeyHashSignRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AddPubkeyHashSignRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AddPubkeyHashSignRequestMapTable =
    cfd::core::JsonTableMap<AddPubkeyHashSignRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AddPubkeyHashSignRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AddPubkeyHashSignRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(txin) value
   */
  AddPubkeyHashSignTxInRequest txin_;  // NOLINT
};

// ------------------------------------------------------------------------
// AddRawTransactionRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AddRawTransactionRequest) class
 */
class AddRawTransactionRequest
  : public cfd::core::JsonClassBase<AddRawTransactionRequest> {
 public:
  AddRawTransactionRequest() {
    CollectFieldName();
  }
  virtual ~AddRawTransactionRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const AddRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      AddRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of txins.
   * @return txins
   */
  JsonObjectVector<TxInRequest, TxInRequestStruct>& GetTxins() {  // NOLINT
    return txins_;
  }
  /**
   * @brief Set to txins.
   * @param[in] txins    setting value.
   */
  void SetTxins(  // line separate
      const JsonObjectVector<TxInRequest, TxInRequestStruct>& txins) {  // NOLINT
    this->txins_ = txins;
  }
  /**
   * @brief Get data type of txins.
   * @return Data type of txins.
   */
  static std::string GetTxinsFieldType() {
    return "JsonObjectVector<TxInRequest, TxInRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txins field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinsString(  // line separate
      const AddRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txins_.Serialize();
  }
  /**
   * @brief Set json object to txins field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinsString(  // line separate
      AddRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txins_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of txouts.
   * @return txouts
   */
  JsonObjectVector<TxOutRequest, TxOutRequestStruct>& GetTxouts() {  // NOLINT
    return txouts_;
  }
  /**
   * @brief Set to txouts.
   * @param[in] txouts    setting value.
   */
  void SetTxouts(  // line separate
      const JsonObjectVector<TxOutRequest, TxOutRequestStruct>& txouts) {  // NOLINT
    this->txouts_ = txouts;
  }
  /**
   * @brief Get data type of txouts.
   * @return Data type of txouts.
   */
  static std::string GetTxoutsFieldType() {
    return "JsonObjectVector<TxOutRequest, TxOutRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txouts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxoutsString(  // line separate
      const AddRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txouts_.Serialize();
  }
  /**
   * @brief Set json object to txouts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxoutsString(  // line separate
      AddRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txouts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AddRawTransactionRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AddRawTransactionRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AddRawTransactionRequestMapTable =
    cfd::core::JsonTableMap<AddRawTransactionRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AddRawTransactionRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AddRawTransactionRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(txins) value
   */
  JsonObjectVector<TxInRequest, TxInRequestStruct> txins_;  // NOLINT
  /**
   * @brief JsonAPI(txouts) value
   */
  JsonObjectVector<TxOutRequest, TxOutRequestStruct> txouts_;  // NOLINT
};

// ------------------------------------------------------------------------
// AddScriptHashSignRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AddScriptHashSignRequest) class
 */
class AddScriptHashSignRequest
  : public cfd::core::JsonClassBase<AddScriptHashSignRequest> {
 public:
  AddScriptHashSignRequest() {
    CollectFieldName();
  }
  virtual ~AddScriptHashSignRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const AddScriptHashSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      AddScriptHashSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const AddScriptHashSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      AddScriptHashSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of txin.
   * @return txin
   */
  AddScriptHashSignTxInRequest& GetTxin() {  // NOLINT
    return txin_;
  }
  /**
   * @brief Set to txin.
   * @param[in] txin    setting value.
   */
  void SetTxin(  // line separate
      const AddScriptHashSignTxInRequest& txin) {  // NOLINT
    this->txin_ = txin;
  }
  /**
   * @brief Get data type of txin.
   * @return Data type of txin.
   */
  static std::string GetTxinFieldType() {
    return "AddScriptHashSignTxInRequest";  // NOLINT
  }
  /**
   * @brief Get json string of txin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinString(  // line separate
      const AddScriptHashSignRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txin_.Serialize();
  }
  /**
   * @brief Set json object to txin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinString(  // line separate
      AddScriptHashSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AddScriptHashSignRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AddScriptHashSignRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AddScriptHashSignRequestMapTable =
    cfd::core::JsonTableMap<AddScriptHashSignRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AddScriptHashSignRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AddScriptHashSignRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(txin) value
   */
  AddScriptHashSignTxInRequest txin_;  // NOLINT
};

// ------------------------------------------------------------------------
// AddSignRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AddSignRequest) class
 */
class AddSignRequest
  : public cfd::core::JsonClassBase<AddSignRequest> {
 public:
  AddSignRequest() {
    CollectFieldName();
  }
  virtual ~AddSignRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const AddSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      AddSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const AddSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      AddSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of txin.
   * @return txin
   */
  AddSignTxInRequest& GetTxin() {  // NOLINT
    return txin_;
  }
  /**
   * @brief Set to txin.
   * @param[in] txin    setting value.
   */
  void SetTxin(  // line separate
      const AddSignTxInRequest& txin) {  // NOLINT
    this->txin_ = txin;
  }
  /**
   * @brief Get data type of txin.
   * @return Data type of txin.
   */
  static std::string GetTxinFieldType() {
    return "AddSignTxInRequest";  // NOLINT
  }
  /**
   * @brief Get json string of txin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinString(  // line separate
      const AddSignRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txin_.Serialize();
  }
  /**
   * @brief Set json object to txin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinString(  // line separate
      AddSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AddSignRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AddSignRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AddSignRequestMapTable =
    cfd::core::JsonTableMap<AddSignRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AddSignRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AddSignRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(txin) value
   */
  AddSignTxInRequest txin_;  // NOLINT
};

// ------------------------------------------------------------------------
// AddTaprootSchnorrSignRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AddTaprootSchnorrSignRequest) class
 */
class AddTaprootSchnorrSignRequest
  : public cfd::core::JsonClassBase<AddTaprootSchnorrSignRequest> {
 public:
  AddTaprootSchnorrSignRequest() {
    CollectFieldName();
  }
  virtual ~AddTaprootSchnorrSignRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const AddTaprootSchnorrSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      AddTaprootSchnorrSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const AddTaprootSchnorrSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      AddTaprootSchnorrSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of txin.
   * @return txin
   */
  AddTaprootSchnorrSignTxInRequest& GetTxin() {  // NOLINT
    return txin_;
  }
  /**
   * @brief Set to txin.
   * @param[in] txin    setting value.
   */
  void SetTxin(  // line separate
      const AddTaprootSchnorrSignTxInRequest& txin) {  // NOLINT
    this->txin_ = txin;
  }
  /**
   * @brief Get data type of txin.
   * @return Data type of txin.
   */
  static std::string GetTxinFieldType() {
    return "AddTaprootSchnorrSignTxInRequest";  // NOLINT
  }
  /**
   * @brief Get json string of txin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinString(  // line separate
      const AddTaprootSchnorrSignRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txin_.Serialize();
  }
  /**
   * @brief Set json object to txin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinString(  // line separate
      AddTaprootSchnorrSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AddTaprootSchnorrSignRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AddTaprootSchnorrSignRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AddTaprootSchnorrSignRequestMapTable =
    cfd::core::JsonTableMap<AddTaprootSchnorrSignRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AddTaprootSchnorrSignRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AddTaprootSchnorrSignRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(txin) value
   */
  AddTaprootSchnorrSignTxInRequest txin_;  // NOLINT
};

// ------------------------------------------------------------------------
// AddTapscriptSignRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AddTapscriptSignRequest) class
 */
class AddTapscriptSignRequest
  : public cfd::core::JsonClassBase<AddTapscriptSignRequest> {
 public:
  AddTapscriptSignRequest() {
    CollectFieldName();
  }
  virtual ~AddTapscriptSignRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const AddTapscriptSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      AddTapscriptSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const AddTapscriptSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      AddTapscriptSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of txin.
   * @return txin
   */
  AddTapscriptSignTxInRequest& GetTxin() {  // NOLINT
    return txin_;
  }
  /**
   * @brief Set to txin.
   * @param[in] txin    setting value.
   */
  void SetTxin(  // line separate
      const AddTapscriptSignTxInRequest& txin) {  // NOLINT
    this->txin_ = txin;
  }
  /**
   * @brief Get data type of txin.
   * @return Data type of txin.
   */
  static std::string GetTxinFieldType() {
    return "AddTapscriptSignTxInRequest";  // NOLINT
  }
  /**
   * @brief Get json string of txin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinString(  // line separate
      const AddTapscriptSignRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txin_.Serialize();
  }
  /**
   * @brief Set json object to txin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinString(  // line separate
      AddTapscriptSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AddTapscriptSignRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AddTapscriptSignRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AddTapscriptSignRequestMapTable =
    cfd::core::JsonTableMap<AddTapscriptSignRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AddTapscriptSignRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AddTapscriptSignRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(txin) value
   */
  AddTapscriptSignTxInRequest txin_;  // NOLINT
};

// ------------------------------------------------------------------------
// AnalyzeTapScriptTreeRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AnalyzeTapScriptTreeRequest) class
 */
class AnalyzeTapScriptTreeRequest
  : public cfd::core::JsonClassBase<AnalyzeTapScriptTreeRequest> {
 public:
  AnalyzeTapScriptTreeRequest() {
    CollectFieldName();
  }
  virtual ~AnalyzeTapScriptTreeRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of treeString
   * @return treeString
   */
  std::string GetTreeString() const {
    return tree_string_;
  }
  /**
   * @brief Set to treeString
   * @param[in] tree_string    setting value.
   */
  void SetTreeString(  // line separate
    const std::string& tree_string) {  // NOLINT
    this->tree_string_ = tree_string;
  }
  /**
   * @brief Get data type of treeString
   * @return Data type of treeString
   */
  static std::string GetTreeStringFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of treeString field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTreeStringString(  // line separate
      const AnalyzeTapScriptTreeRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tree_string_);
  }
  /**
   * @brief Set json object to treeString field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTreeStringString(  // line separate
      AnalyzeTapScriptTreeRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tree_string_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AnalyzeTapScriptTreeRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AnalyzeTapScriptTreeRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AnalyzeTapScriptTreeRequestMapTable =
    cfd::core::JsonTableMap<AnalyzeTapScriptTreeRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AnalyzeTapScriptTreeRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AnalyzeTapScriptTreeRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(treeString) value
   */
  std::string tree_string_ = "";
};

// ------------------------------------------------------------------------
// AnalyzeTapScriptTreeInfo
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AnalyzeTapScriptTreeInfo) class
 */
class AnalyzeTapScriptTreeInfo
  : public cfd::core::JsonClassBase<AnalyzeTapScriptTreeInfo> {
 public:
  AnalyzeTapScriptTreeInfo() {
    CollectFieldName();
  }
  virtual ~AnalyzeTapScriptTreeInfo() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of branches.
   * @return branches
   */
  JsonObjectVector<TapScriptTreeItem, TapScriptTreeItemStruct>& GetBranches() {  // NOLINT
    return branches_;
  }
  /**
   * @brief Set to branches.
   * @param[in] branches    setting value.
   */
  void SetBranches(  // line separate
      const JsonObjectVector<TapScriptTreeItem, TapScriptTreeItemStruct>& branches) {  // NOLINT
    this->branches_ = branches;
  }
  /**
   * @brief Get data type of branches.
   * @return Data type of branches.
   */
  static std::string GetBranchesFieldType() {
    return "JsonObjectVector<TapScriptTreeItem, TapScriptTreeItemStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of branches field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetBranchesString(  // line separate
      const AnalyzeTapScriptTreeInfo& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.branches_.Serialize();
  }
  /**
   * @brief Set json object to branches field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetBranchesString(  // line separate
      AnalyzeTapScriptTreeInfo& obj,  // NOLINT
      const UniValue& json_value) {
    obj.branches_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AnalyzeTapScriptTreeInfoStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AnalyzeTapScriptTreeInfoStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AnalyzeTapScriptTreeInfoMapTable =
    cfd::core::JsonTableMap<AnalyzeTapScriptTreeInfo>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AnalyzeTapScriptTreeInfoMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AnalyzeTapScriptTreeInfoMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(branches) value
   */
  JsonObjectVector<TapScriptTreeItem, TapScriptTreeItemStruct> branches_;  // NOLINT
};

// ------------------------------------------------------------------------
// AppendDescriptorChecksumRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (AppendDescriptorChecksumRequest) class
 */
class AppendDescriptorChecksumRequest
  : public cfd::core::JsonClassBase<AppendDescriptorChecksumRequest> {
 public:
  AppendDescriptorChecksumRequest() {
    CollectFieldName();
  }
  virtual ~AppendDescriptorChecksumRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of descriptor
   * @return descriptor
   */
  std::string GetDescriptor() const {
    return descriptor_;
  }
  /**
   * @brief Set to descriptor
   * @param[in] descriptor    setting value.
   */
  void SetDescriptor(  // line separate
    const std::string& descriptor) {  // NOLINT
    this->descriptor_ = descriptor;
  }
  /**
   * @brief Get data type of descriptor
   * @return Data type of descriptor
   */
  static std::string GetDescriptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of descriptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDescriptorString(  // line separate
      const AppendDescriptorChecksumRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.descriptor_);
  }
  /**
   * @brief Set json object to descriptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDescriptorString(  // line separate
      AppendDescriptorChecksumRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.descriptor_, json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const AppendDescriptorChecksumRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      AppendDescriptorChecksumRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const AppendDescriptorChecksumRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  AppendDescriptorChecksumRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using AppendDescriptorChecksumRequestMapTable =
    cfd::core::JsonTableMap<AppendDescriptorChecksumRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const AppendDescriptorChecksumRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static AppendDescriptorChecksumRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(descriptor) value
   */
  std::string descriptor_ = "";
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
};

// ------------------------------------------------------------------------
// OutputDescriptorResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (OutputDescriptorResponse) class
 */
class OutputDescriptorResponse
  : public cfd::core::JsonClassBase<OutputDescriptorResponse> {
 public:
  OutputDescriptorResponse() {
    CollectFieldName();
  }
  virtual ~OutputDescriptorResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of descriptor
   * @return descriptor
   */
  std::string GetDescriptor() const {
    return descriptor_;
  }
  /**
   * @brief Set to descriptor
   * @param[in] descriptor    setting value.
   */
  void SetDescriptor(  // line separate
    const std::string& descriptor) {  // NOLINT
    this->descriptor_ = descriptor;
  }
  /**
   * @brief Get data type of descriptor
   * @return Data type of descriptor
   */
  static std::string GetDescriptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of descriptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDescriptorString(  // line separate
      const OutputDescriptorResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.descriptor_);
  }
  /**
   * @brief Set json object to descriptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDescriptorString(  // line separate
      OutputDescriptorResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.descriptor_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const OutputDescriptorResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  OutputDescriptorResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using OutputDescriptorResponseMapTable =
    cfd::core::JsonTableMap<OutputDescriptorResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const OutputDescriptorResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static OutputDescriptorResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(descriptor) value
   */
  std::string descriptor_ = "";
};

// ------------------------------------------------------------------------
// BlindRawTransactionRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (BlindRawTransactionRequest) class
 */
class BlindRawTransactionRequest
  : public cfd::core::JsonClassBase<BlindRawTransactionRequest> {
 public:
  BlindRawTransactionRequest() {
    CollectFieldName();
  }
  virtual ~BlindRawTransactionRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const BlindRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      BlindRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of txins.
   * @return txins
   */
  JsonObjectVector<BlindTxInRequest, BlindTxInRequestStruct>& GetTxins() {  // NOLINT
    return txins_;
  }
  /**
   * @brief Set to txins.
   * @param[in] txins    setting value.
   */
  void SetTxins(  // line separate
      const JsonObjectVector<BlindTxInRequest, BlindTxInRequestStruct>& txins) {  // NOLINT
    this->txins_ = txins;
  }
  /**
   * @brief Get data type of txins.
   * @return Data type of txins.
   */
  static std::string GetTxinsFieldType() {
    return "JsonObjectVector<BlindTxInRequest, BlindTxInRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txins field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinsString(  // line separate
      const BlindRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txins_.Serialize();
  }
  /**
   * @brief Set json object to txins field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinsString(  // line separate
      BlindRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txins_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of txouts.
   * @return txouts
   */
  JsonObjectVector<BlindTxOutRequest, BlindTxOutRequestStruct>& GetTxouts() {  // NOLINT
    return txouts_;
  }
  /**
   * @brief Set to txouts.
   * @param[in] txouts    setting value.
   */
  void SetTxouts(  // line separate
      const JsonObjectVector<BlindTxOutRequest, BlindTxOutRequestStruct>& txouts) {  // NOLINT
    this->txouts_ = txouts;
  }
  /**
   * @brief Get data type of txouts.
   * @return Data type of txouts.
   */
  static std::string GetTxoutsFieldType() {
    return "JsonObjectVector<BlindTxOutRequest, BlindTxOutRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txouts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxoutsString(  // line separate
      const BlindRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txouts_.Serialize();
  }
  /**
   * @brief Set json object to txouts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxoutsString(  // line separate
      BlindRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txouts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of txoutConfidentialAddresses.
   * @return txoutConfidentialAddresses
   */
  JsonValueVector<std::string>& GetTxoutConfidentialAddresses() {  // NOLINT
    return txout_confidential_addresses_;
  }
  /**
   * @brief Set to txoutConfidentialAddresses.
   * @param[in] txout_confidential_addresses    setting value.
   */
  void SetTxoutConfidentialAddresses(  // line separate
      const JsonValueVector<std::string>& txout_confidential_addresses) {  // NOLINT
    this->txout_confidential_addresses_ = txout_confidential_addresses;
  }
  /**
   * @brief Get data type of txoutConfidentialAddresses.
   * @return Data type of txoutConfidentialAddresses.
   */
  static std::string GetTxoutConfidentialAddressesFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of txoutConfidentialAddresses field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxoutConfidentialAddressesString(  // line separate
      const BlindRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txout_confidential_addresses_.Serialize();
  }
  /**
   * @brief Set json object to txoutConfidentialAddresses field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxoutConfidentialAddressesString(  // line separate
      BlindRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txout_confidential_addresses_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of issuances.
   * @return issuances
   */
  JsonObjectVector<BlindIssuanceRequest, BlindIssuanceRequestStruct>& GetIssuances() {  // NOLINT
    return issuances_;
  }
  /**
   * @brief Set to issuances.
   * @param[in] issuances    setting value.
   */
  void SetIssuances(  // line separate
      const JsonObjectVector<BlindIssuanceRequest, BlindIssuanceRequestStruct>& issuances) {  // NOLINT
    this->issuances_ = issuances;
  }
  /**
   * @brief Get data type of issuances.
   * @return Data type of issuances.
   */
  static std::string GetIssuancesFieldType() {
    return "JsonObjectVector<BlindIssuanceRequest, BlindIssuanceRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of issuances field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetIssuancesString(  // line separate
      const BlindRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.issuances_.Serialize();
  }
  /**
   * @brief Set json object to issuances field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetIssuancesString(  // line separate
      BlindRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.issuances_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of minimumRangeValue
   * @return minimumRangeValue
   */
  int64_t GetMinimumRangeValue() const {
    return minimum_range_value_;
  }
  /**
   * @brief Set to minimumRangeValue
   * @param[in] minimum_range_value    setting value.
   */
  void SetMinimumRangeValue(  // line separate
    const int64_t& minimum_range_value) {  // NOLINT
    this->minimum_range_value_ = minimum_range_value;
  }
  /**
   * @brief Get data type of minimumRangeValue
   * @return Data type of minimumRangeValue
   */
  static std::string GetMinimumRangeValueFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of minimumRangeValue field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMinimumRangeValueString(  // line separate
      const BlindRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.minimum_range_value_);
  }
  /**
   * @brief Set json object to minimumRangeValue field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMinimumRangeValueString(  // line separate
      BlindRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.minimum_range_value_, json_value);
  }

  /**
   * @brief Get of exponent
   * @return exponent
   */
  int GetExponent() const {
    return exponent_;
  }
  /**
   * @brief Set to exponent
   * @param[in] exponent    setting value.
   */
  void SetExponent(  // line separate
    const int& exponent) {  // NOLINT
    this->exponent_ = exponent;
  }
  /**
   * @brief Get data type of exponent
   * @return Data type of exponent
   */
  static std::string GetExponentFieldType() {
    return "int";
  }
  /**
   * @brief Get json string of exponent field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExponentString(  // line separate
      const BlindRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.exponent_);
  }
  /**
   * @brief Set json object to exponent field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExponentString(  // line separate
      BlindRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.exponent_, json_value);
  }

  /**
   * @brief Get of minimumBits
   * @return minimumBits
   */
  int GetMinimumBits() const {
    return minimum_bits_;
  }
  /**
   * @brief Set to minimumBits
   * @param[in] minimum_bits    setting value.
   */
  void SetMinimumBits(  // line separate
    const int& minimum_bits) {  // NOLINT
    this->minimum_bits_ = minimum_bits;
  }
  /**
   * @brief Get data type of minimumBits
   * @return Data type of minimumBits
   */
  static std::string GetMinimumBitsFieldType() {
    return "int";
  }
  /**
   * @brief Get json string of minimumBits field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMinimumBitsString(  // line separate
      const BlindRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.minimum_bits_);
  }
  /**
   * @brief Set json object to minimumBits field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMinimumBitsString(  // line separate
      BlindRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.minimum_bits_, json_value);
  }

  /**
   * @brief Get of collectBlinder
   * @return collectBlinder
   */
  bool GetCollectBlinder() const {
    return collect_blinder_;
  }
  /**
   * @brief Set to collectBlinder
   * @param[in] collect_blinder    setting value.
   */
  void SetCollectBlinder(  // line separate
    const bool& collect_blinder) {  // NOLINT
    this->collect_blinder_ = collect_blinder;
  }
  /**
   * @brief Get data type of collectBlinder
   * @return Data type of collectBlinder
   */
  static std::string GetCollectBlinderFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of collectBlinder field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetCollectBlinderString(  // line separate
      const BlindRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.collect_blinder_);
  }
  /**
   * @brief Set json object to collectBlinder field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetCollectBlinderString(  // line separate
      BlindRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.collect_blinder_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const BlindRawTransactionRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  BlindRawTransactionRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using BlindRawTransactionRequestMapTable =
    cfd::core::JsonTableMap<BlindRawTransactionRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const BlindRawTransactionRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static BlindRawTransactionRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(txins) value
   */
  JsonObjectVector<BlindTxInRequest, BlindTxInRequestStruct> txins_;  // NOLINT
  /**
   * @brief JsonAPI(txouts) value
   */
  JsonObjectVector<BlindTxOutRequest, BlindTxOutRequestStruct> txouts_;  // NOLINT
  /**
   * @brief JsonAPI(txoutConfidentialAddresses) value
   */
  JsonValueVector<std::string> txout_confidential_addresses_;  // NOLINT
  /**
   * @brief JsonAPI(issuances) value
   */
  JsonObjectVector<BlindIssuanceRequest, BlindIssuanceRequestStruct> issuances_;  // NOLINT
  /**
   * @brief JsonAPI(minimumRangeValue) value
   */
  int64_t minimum_range_value_ = 1;
  /**
   * @brief JsonAPI(exponent) value
   */
  int exponent_ = 0;
  /**
   * @brief JsonAPI(minimumBits) value
   */
  int minimum_bits_ = 52;
  /**
   * @brief JsonAPI(collectBlinder) value
   */
  bool collect_blinder_ = false;
};

// ------------------------------------------------------------------------
// BlindTransactionResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (BlindTransactionResponse) class
 */
class BlindTransactionResponse
  : public cfd::core::JsonClassBase<BlindTransactionResponse> {
 public:
  BlindTransactionResponse() {
    CollectFieldName();
  }
  virtual ~BlindTransactionResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const BlindTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      BlindTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of blinders.
   * @return blinders
   */
  JsonObjectVector<UnblindOutput, UnblindOutputStruct>& GetBlinders() {  // NOLINT
    return blinders_;
  }
  /**
   * @brief Set to blinders.
   * @param[in] blinders    setting value.
   */
  void SetBlinders(  // line separate
      const JsonObjectVector<UnblindOutput, UnblindOutputStruct>& blinders) {  // NOLINT
    this->blinders_ = blinders;
  }
  /**
   * @brief Get data type of blinders.
   * @return Data type of blinders.
   */
  static std::string GetBlindersFieldType() {
    return "JsonObjectVector<UnblindOutput, UnblindOutputStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of blinders field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetBlindersString(  // line separate
      const BlindTransactionResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.blinders_.Serialize();
  }
  /**
   * @brief Set json object to blinders field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetBlindersString(  // line separate
      BlindTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.blinders_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of issuanceBlinders.
   * @return issuanceBlinders
   */
  JsonObjectVector<UnblindIssuanceOutput, UnblindIssuanceOutputStruct>& GetIssuanceBlinders() {  // NOLINT
    return issuance_blinders_;
  }
  /**
   * @brief Set to issuanceBlinders.
   * @param[in] issuance_blinders    setting value.
   */
  void SetIssuanceBlinders(  // line separate
      const JsonObjectVector<UnblindIssuanceOutput, UnblindIssuanceOutputStruct>& issuance_blinders) {  // NOLINT
    this->issuance_blinders_ = issuance_blinders;
  }
  /**
   * @brief Get data type of issuanceBlinders.
   * @return Data type of issuanceBlinders.
   */
  static std::string GetIssuanceBlindersFieldType() {
    return "JsonObjectVector<UnblindIssuanceOutput, UnblindIssuanceOutputStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of issuanceBlinders field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetIssuanceBlindersString(  // line separate
      const BlindTransactionResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.issuance_blinders_.Serialize();
  }
  /**
   * @brief Set json object to issuanceBlinders field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetIssuanceBlindersString(  // line separate
      BlindTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.issuance_blinders_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const BlindTransactionResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  BlindTransactionResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using BlindTransactionResponseMapTable =
    cfd::core::JsonTableMap<BlindTransactionResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const BlindTransactionResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static BlindTransactionResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(blinders) value
   */
  JsonObjectVector<UnblindOutput, UnblindOutputStruct> blinders_;  // NOLINT
  /**
   * @brief JsonAPI(issuanceBlinders) value
   */
  JsonObjectVector<UnblindIssuanceOutput, UnblindIssuanceOutputStruct> issuance_blinders_;  // NOLINT
};

// ------------------------------------------------------------------------
// CalculateEcSignatureRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CalculateEcSignatureRequest) class
 */
class CalculateEcSignatureRequest
  : public cfd::core::JsonClassBase<CalculateEcSignatureRequest> {
 public:
  CalculateEcSignatureRequest() {
    CollectFieldName();
  }
  virtual ~CalculateEcSignatureRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of sighash
   * @return sighash
   */
  std::string GetSighash() const {
    return sighash_;
  }
  /**
   * @brief Set to sighash
   * @param[in] sighash    setting value.
   */
  void SetSighash(  // line separate
    const std::string& sighash) {  // NOLINT
    this->sighash_ = sighash;
  }
  /**
   * @brief Get data type of sighash
   * @return Data type of sighash
   */
  static std::string GetSighashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashString(  // line separate
      const CalculateEcSignatureRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_);
  }
  /**
   * @brief Set json object to sighash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashString(  // line separate
      CalculateEcSignatureRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_, json_value);
  }

  /**
   * @brief Get of privkeyData.
   * @return privkeyData
   */
  PrivkeyData& GetPrivkeyData() {  // NOLINT
    return privkey_data_;
  }
  /**
   * @brief Set to privkeyData.
   * @param[in] privkey_data    setting value.
   */
  void SetPrivkeyData(  // line separate
      const PrivkeyData& privkey_data) {  // NOLINT
    this->privkey_data_ = privkey_data;
  }
  /**
   * @brief Get data type of privkeyData.
   * @return Data type of privkeyData.
   */
  static std::string GetPrivkeyDataFieldType() {
    return "PrivkeyData";  // NOLINT
  }
  /**
   * @brief Get json string of privkeyData field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetPrivkeyDataString(  // line separate
      const CalculateEcSignatureRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.privkey_data_.Serialize();
  }
  /**
   * @brief Set json object to privkeyData field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetPrivkeyDataString(  // line separate
      CalculateEcSignatureRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.privkey_data_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of isGrindR
   * @return isGrindR
   */
  bool GetIsGrindR() const {
    return is_grind_r_;
  }
  /**
   * @brief Set to isGrindR
   * @param[in] is_grind_r    setting value.
   */
  void SetIsGrindR(  // line separate
    const bool& is_grind_r) {  // NOLINT
    this->is_grind_r_ = is_grind_r;
  }
  /**
   * @brief Get data type of isGrindR
   * @return Data type of isGrindR
   */
  static std::string GetIsGrindRFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isGrindR field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsGrindRString(  // line separate
      const CalculateEcSignatureRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_grind_r_);
  }
  /**
   * @brief Set json object to isGrindR field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsGrindRString(  // line separate
      CalculateEcSignatureRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_grind_r_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CalculateEcSignatureRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CalculateEcSignatureRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CalculateEcSignatureRequestMapTable =
    cfd::core::JsonTableMap<CalculateEcSignatureRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CalculateEcSignatureRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CalculateEcSignatureRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(sighash) value
   */
  std::string sighash_ = "";
  /**
   * @brief JsonAPI(privkeyData) value
   */
  PrivkeyData privkey_data_;  // NOLINT
  /**
   * @brief JsonAPI(isGrindR) value
   */
  bool is_grind_r_ = true;
};

// ------------------------------------------------------------------------
// CheckTweakedSchnorrPubkeyRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CheckTweakedSchnorrPubkeyRequest) class
 */
class CheckTweakedSchnorrPubkeyRequest
  : public cfd::core::JsonClassBase<CheckTweakedSchnorrPubkeyRequest> {
 public:
  CheckTweakedSchnorrPubkeyRequest() {
    CollectFieldName();
  }
  virtual ~CheckTweakedSchnorrPubkeyRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const CheckTweakedSchnorrPubkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      CheckTweakedSchnorrPubkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Get of parity
   * @return parity
   */
  bool GetParity() const {
    return parity_;
  }
  /**
   * @brief Set to parity
   * @param[in] parity    setting value.
   */
  void SetParity(  // line separate
    const bool& parity) {  // NOLINT
    this->parity_ = parity;
  }
  /**
   * @brief Get data type of parity
   * @return Data type of parity
   */
  static std::string GetParityFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of parity field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetParityString(  // line separate
      const CheckTweakedSchnorrPubkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.parity_);
  }
  /**
   * @brief Set json object to parity field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetParityString(  // line separate
      CheckTweakedSchnorrPubkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.parity_, json_value);
  }

  /**
   * @brief Get of basePubkey
   * @return basePubkey
   */
  std::string GetBasePubkey() const {
    return base_pubkey_;
  }
  /**
   * @brief Set to basePubkey
   * @param[in] base_pubkey    setting value.
   */
  void SetBasePubkey(  // line separate
    const std::string& base_pubkey) {  // NOLINT
    this->base_pubkey_ = base_pubkey;
  }
  /**
   * @brief Get data type of basePubkey
   * @return Data type of basePubkey
   */
  static std::string GetBasePubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of basePubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBasePubkeyString(  // line separate
      const CheckTweakedSchnorrPubkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.base_pubkey_);
  }
  /**
   * @brief Set json object to basePubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBasePubkeyString(  // line separate
      CheckTweakedSchnorrPubkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.base_pubkey_, json_value);
  }

  /**
   * @brief Get of tweak
   * @return tweak
   */
  std::string GetTweak() const {
    return tweak_;
  }
  /**
   * @brief Set to tweak
   * @param[in] tweak    setting value.
   */
  void SetTweak(  // line separate
    const std::string& tweak) {  // NOLINT
    this->tweak_ = tweak;
  }
  /**
   * @brief Get data type of tweak
   * @return Data type of tweak
   */
  static std::string GetTweakFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tweak field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTweakString(  // line separate
      const CheckTweakedSchnorrPubkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tweak_);
  }
  /**
   * @brief Set json object to tweak field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTweakString(  // line separate
      CheckTweakedSchnorrPubkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tweak_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CheckTweakedSchnorrPubkeyRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CheckTweakedSchnorrPubkeyRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CheckTweakedSchnorrPubkeyRequestMapTable =
    cfd::core::JsonTableMap<CheckTweakedSchnorrPubkeyRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CheckTweakedSchnorrPubkeyRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CheckTweakedSchnorrPubkeyRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
  /**
   * @brief JsonAPI(parity) value
   */
  bool parity_ = false;
  /**
   * @brief JsonAPI(basePubkey) value
   */
  std::string base_pubkey_ = "";
  /**
   * @brief JsonAPI(tweak) value
   */
  std::string tweak_ = "";
};

// ------------------------------------------------------------------------
// VerifySignatureResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (VerifySignatureResponse) class
 */
class VerifySignatureResponse
  : public cfd::core::JsonClassBase<VerifySignatureResponse> {
 public:
  VerifySignatureResponse() {
    CollectFieldName();
  }
  virtual ~VerifySignatureResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of success
   * @return success
   */
  bool GetSuccess() const {
    return success_;
  }
  /**
   * @brief Set to success
   * @param[in] success    setting value.
   */
  void SetSuccess(  // line separate
    const bool& success) {  // NOLINT
    this->success_ = success;
  }
  /**
   * @brief Get data type of success
   * @return Data type of success
   */
  static std::string GetSuccessFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of success field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSuccessString(  // line separate
      const VerifySignatureResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.success_);
  }
  /**
   * @brief Set json object to success field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSuccessString(  // line separate
      VerifySignatureResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.success_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const VerifySignatureResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  VerifySignatureResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using VerifySignatureResponseMapTable =
    cfd::core::JsonTableMap<VerifySignatureResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const VerifySignatureResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static VerifySignatureResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(success) value
   */
  bool success_ = true;
};

// ------------------------------------------------------------------------
// PsbtList
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PsbtList) class
 */
class PsbtList
  : public cfd::core::JsonClassBase<PsbtList> {
 public:
  PsbtList() {
    CollectFieldName();
  }
  virtual ~PsbtList() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of psbts.
   * @return psbts
   */
  JsonValueVector<std::string>& GetPsbts() {  // NOLINT
    return psbts_;
  }
  /**
   * @brief Set to psbts.
   * @param[in] psbts    setting value.
   */
  void SetPsbts(  // line separate
      const JsonValueVector<std::string>& psbts) {  // NOLINT
    this->psbts_ = psbts;
  }
  /**
   * @brief Get data type of psbts.
   * @return Data type of psbts.
   */
  static std::string GetPsbtsFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of psbts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetPsbtsString(  // line separate
      const PsbtList& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.psbts_.Serialize();
  }
  /**
   * @brief Set json object to psbts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetPsbtsString(  // line separate
      PsbtList& obj,  // NOLINT
      const UniValue& json_value) {
    obj.psbts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PsbtListStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PsbtListStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PsbtListMapTable =
    cfd::core::JsonTableMap<PsbtList>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PsbtListMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PsbtListMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(psbts) value
   */
  JsonValueVector<std::string> psbts_;  // NOLINT
};

// ------------------------------------------------------------------------
// PubkeyListData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PubkeyListData) class
 */
class PubkeyListData
  : public cfd::core::JsonClassBase<PubkeyListData> {
 public:
  PubkeyListData() {
    CollectFieldName();
  }
  virtual ~PubkeyListData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of pubkeys.
   * @return pubkeys
   */
  JsonValueVector<std::string>& GetPubkeys() {  // NOLINT
    return pubkeys_;
  }
  /**
   * @brief Set to pubkeys.
   * @param[in] pubkeys    setting value.
   */
  void SetPubkeys(  // line separate
      const JsonValueVector<std::string>& pubkeys) {  // NOLINT
    this->pubkeys_ = pubkeys;
  }
  /**
   * @brief Get data type of pubkeys.
   * @return Data type of pubkeys.
   */
  static std::string GetPubkeysFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of pubkeys field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetPubkeysString(  // line separate
      const PubkeyListData& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.pubkeys_.Serialize();
  }
  /**
   * @brief Set json object to pubkeys field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetPubkeysString(  // line separate
      PubkeyListData& obj,  // NOLINT
      const UniValue& json_value) {
    obj.pubkeys_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PubkeyListDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PubkeyListDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PubkeyListDataMapTable =
    cfd::core::JsonTableMap<PubkeyListData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PubkeyListDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PubkeyListDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(pubkeys) value
   */
  JsonValueVector<std::string> pubkeys_;  // NOLINT
};

// ------------------------------------------------------------------------
// PubkeyData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PubkeyData) class
 */
class PubkeyData
  : public cfd::core::JsonClassBase<PubkeyData> {
 public:
  PubkeyData() {
    CollectFieldName();
  }
  virtual ~PubkeyData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const PubkeyData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      PubkeyData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PubkeyDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PubkeyDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PubkeyDataMapTable =
    cfd::core::JsonTableMap<PubkeyData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PubkeyDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PubkeyDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
};

// ------------------------------------------------------------------------
// ComputeSigPointRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ComputeSigPointRequest) class
 */
class ComputeSigPointRequest
  : public cfd::core::JsonClassBase<ComputeSigPointRequest> {
 public:
  ComputeSigPointRequest() {
    CollectFieldName();
  }
  virtual ~ComputeSigPointRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of message
   * @return message
   */
  std::string GetMessage() const {
    return message_;
  }
  /**
   * @brief Set to message
   * @param[in] message    setting value.
   */
  void SetMessage(  // line separate
    const std::string& message) {  // NOLINT
    this->message_ = message;
  }
  /**
   * @brief Get data type of message
   * @return Data type of message
   */
  static std::string GetMessageFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of message field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMessageString(  // line separate
      const ComputeSigPointRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.message_);
  }
  /**
   * @brief Set json object to message field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMessageString(  // line separate
      ComputeSigPointRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.message_, json_value);
  }

  /**
   * @brief Get of isHashed
   * @return isHashed
   */
  bool GetIsHashed() const {
    return is_hashed_;
  }
  /**
   * @brief Set to isHashed
   * @param[in] is_hashed    setting value.
   */
  void SetIsHashed(  // line separate
    const bool& is_hashed) {  // NOLINT
    this->is_hashed_ = is_hashed;
  }
  /**
   * @brief Get data type of isHashed
   * @return Data type of isHashed
   */
  static std::string GetIsHashedFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isHashed field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsHashedString(  // line separate
      const ComputeSigPointRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_hashed_);
  }
  /**
   * @brief Set json object to isHashed field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsHashedString(  // line separate
      ComputeSigPointRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_hashed_, json_value);
  }

  /**
   * @brief Get of nonce
   * @return nonce
   */
  std::string GetNonce() const {
    return nonce_;
  }
  /**
   * @brief Set to nonce
   * @param[in] nonce    setting value.
   */
  void SetNonce(  // line separate
    const std::string& nonce) {  // NOLINT
    this->nonce_ = nonce;
  }
  /**
   * @brief Get data type of nonce
   * @return Data type of nonce
   */
  static std::string GetNonceFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of nonce field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNonceString(  // line separate
      const ComputeSigPointRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.nonce_);
  }
  /**
   * @brief Set json object to nonce field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNonceString(  // line separate
      ComputeSigPointRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.nonce_, json_value);
  }

  /**
   * @brief Get of schnorrPubkey
   * @return schnorrPubkey
   */
  std::string GetSchnorrPubkey() const {
    return schnorr_pubkey_;
  }
  /**
   * @brief Set to schnorrPubkey
   * @param[in] schnorr_pubkey    setting value.
   */
  void SetSchnorrPubkey(  // line separate
    const std::string& schnorr_pubkey) {  // NOLINT
    this->schnorr_pubkey_ = schnorr_pubkey;
  }
  /**
   * @brief Get data type of schnorrPubkey
   * @return Data type of schnorrPubkey
   */
  static std::string GetSchnorrPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of schnorrPubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSchnorrPubkeyString(  // line separate
      const ComputeSigPointRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.schnorr_pubkey_);
  }
  /**
   * @brief Set json object to schnorrPubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSchnorrPubkeyString(  // line separate
      ComputeSigPointRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.schnorr_pubkey_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ComputeSigPointRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ComputeSigPointRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ComputeSigPointRequestMapTable =
    cfd::core::JsonTableMap<ComputeSigPointRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ComputeSigPointRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ComputeSigPointRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(message) value
   */
  std::string message_ = "";
  /**
   * @brief JsonAPI(isHashed) value
   */
  bool is_hashed_ = true;
  /**
   * @brief JsonAPI(nonce) value
   */
  std::string nonce_ = "";
  /**
   * @brief JsonAPI(schnorrPubkey) value
   */
  std::string schnorr_pubkey_ = "";
};

// ------------------------------------------------------------------------
// ConvertAesRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ConvertAesRequest) class
 */
class ConvertAesRequest
  : public cfd::core::JsonClassBase<ConvertAesRequest> {
 public:
  ConvertAesRequest() {
    CollectFieldName();
  }
  virtual ~ConvertAesRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of isEncrypt
   * @return isEncrypt
   */
  bool GetIsEncrypt() const {
    return is_encrypt_;
  }
  /**
   * @brief Set to isEncrypt
   * @param[in] is_encrypt    setting value.
   */
  void SetIsEncrypt(  // line separate
    const bool& is_encrypt) {  // NOLINT
    this->is_encrypt_ = is_encrypt;
  }
  /**
   * @brief Get data type of isEncrypt
   * @return Data type of isEncrypt
   */
  static std::string GetIsEncryptFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isEncrypt field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsEncryptString(  // line separate
      const ConvertAesRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_encrypt_);
  }
  /**
   * @brief Set json object to isEncrypt field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsEncryptString(  // line separate
      ConvertAesRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_encrypt_, json_value);
  }

  /**
   * @brief Get of mode
   * @return mode
   */
  std::string GetMode() const {
    return mode_;
  }
  /**
   * @brief Set to mode
   * @param[in] mode    setting value.
   */
  void SetMode(  // line separate
    const std::string& mode) {  // NOLINT
    this->mode_ = mode;
  }
  /**
   * @brief Get data type of mode
   * @return Data type of mode
   */
  static std::string GetModeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of mode field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetModeString(  // line separate
      const ConvertAesRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.mode_);
  }
  /**
   * @brief Set json object to mode field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetModeString(  // line separate
      ConvertAesRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.mode_, json_value);
  }

  /**
   * @brief Get of key
   * @return key
   */
  std::string GetKey() const {
    return key_;
  }
  /**
   * @brief Set to key
   * @param[in] key    setting value.
   */
  void SetKey(  // line separate
    const std::string& key) {  // NOLINT
    this->key_ = key;
  }
  /**
   * @brief Get data type of key
   * @return Data type of key
   */
  static std::string GetKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of key field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetKeyString(  // line separate
      const ConvertAesRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.key_);
  }
  /**
   * @brief Set json object to key field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetKeyString(  // line separate
      ConvertAesRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.key_, json_value);
  }

  /**
   * @brief Get of iv
   * @return iv
   */
  std::string GetIv() const {
    return iv_;
  }
  /**
   * @brief Set to iv
   * @param[in] iv    setting value.
   */
  void SetIv(  // line separate
    const std::string& iv) {  // NOLINT
    this->iv_ = iv;
  }
  /**
   * @brief Get data type of iv
   * @return Data type of iv
   */
  static std::string GetIvFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of iv field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIvString(  // line separate
      const ConvertAesRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.iv_);
  }
  /**
   * @brief Set json object to iv field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIvString(  // line separate
      ConvertAesRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.iv_, json_value);
  }

  /**
   * @brief Get of data
   * @return data
   */
  std::string GetData() const {
    return data_;
  }
  /**
   * @brief Set to data
   * @param[in] data    setting value.
   */
  void SetData(  // line separate
    const std::string& data) {  // NOLINT
    this->data_ = data;
  }
  /**
   * @brief Get data type of data
   * @return Data type of data
   */
  static std::string GetDataFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of data field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDataString(  // line separate
      const ConvertAesRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.data_);
  }
  /**
   * @brief Set json object to data field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDataString(  // line separate
      ConvertAesRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.data_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ConvertAesRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ConvertAesRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ConvertAesRequestMapTable =
    cfd::core::JsonTableMap<ConvertAesRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ConvertAesRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ConvertAesRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(isEncrypt) value
   */
  bool is_encrypt_ = true;
  /**
   * @brief JsonAPI(mode) value
   */
  std::string mode_ = "cbc";
  /**
   * @brief JsonAPI(key) value
   */
  std::string key_ = "";
  /**
   * @brief JsonAPI(iv) value
   */
  std::string iv_ = "";
  /**
   * @brief JsonAPI(data) value
   */
  std::string data_ = "";
};

// ------------------------------------------------------------------------
// ConvertAesResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ConvertAesResponse) class
 */
class ConvertAesResponse
  : public cfd::core::JsonClassBase<ConvertAesResponse> {
 public:
  ConvertAesResponse() {
    CollectFieldName();
  }
  virtual ~ConvertAesResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const ConvertAesResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      ConvertAesResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ConvertAesResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ConvertAesResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ConvertAesResponseMapTable =
    cfd::core::JsonTableMap<ConvertAesResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ConvertAesResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ConvertAesResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
};

// ------------------------------------------------------------------------
// ConvertEntropyToMnemonicRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ConvertEntropyToMnemonicRequest) class
 */
class ConvertEntropyToMnemonicRequest
  : public cfd::core::JsonClassBase<ConvertEntropyToMnemonicRequest> {
 public:
  ConvertEntropyToMnemonicRequest() {
    CollectFieldName();
  }
  virtual ~ConvertEntropyToMnemonicRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of entropy
   * @return entropy
   */
  std::string GetEntropy() const {
    return entropy_;
  }
  /**
   * @brief Set to entropy
   * @param[in] entropy    setting value.
   */
  void SetEntropy(  // line separate
    const std::string& entropy) {  // NOLINT
    this->entropy_ = entropy;
  }
  /**
   * @brief Get data type of entropy
   * @return Data type of entropy
   */
  static std::string GetEntropyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of entropy field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetEntropyString(  // line separate
      const ConvertEntropyToMnemonicRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.entropy_);
  }
  /**
   * @brief Set json object to entropy field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetEntropyString(  // line separate
      ConvertEntropyToMnemonicRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.entropy_, json_value);
  }

  /**
   * @brief Get of language
   * @return language
   */
  std::string GetLanguage() const {
    return language_;
  }
  /**
   * @brief Set to language
   * @param[in] language    setting value.
   */
  void SetLanguage(  // line separate
    const std::string& language) {  // NOLINT
    this->language_ = language;
  }
  /**
   * @brief Get data type of language
   * @return Data type of language
   */
  static std::string GetLanguageFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of language field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLanguageString(  // line separate
      const ConvertEntropyToMnemonicRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.language_);
  }
  /**
   * @brief Set json object to language field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLanguageString(  // line separate
      ConvertEntropyToMnemonicRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.language_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ConvertEntropyToMnemonicRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ConvertEntropyToMnemonicRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ConvertEntropyToMnemonicRequestMapTable =
    cfd::core::JsonTableMap<ConvertEntropyToMnemonicRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ConvertEntropyToMnemonicRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ConvertEntropyToMnemonicRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(entropy) value
   */
  std::string entropy_ = "";
  /**
   * @brief JsonAPI(language) value
   */
  std::string language_ = "en";
};

// ------------------------------------------------------------------------
// ConvertEntropyToMnemonicResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ConvertEntropyToMnemonicResponse) class
 */
class ConvertEntropyToMnemonicResponse
  : public cfd::core::JsonClassBase<ConvertEntropyToMnemonicResponse> {
 public:
  ConvertEntropyToMnemonicResponse() {
    CollectFieldName();
  }
  virtual ~ConvertEntropyToMnemonicResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of mnemonic.
   * @return mnemonic
   */
  JsonValueVector<std::string>& GetMnemonic() {  // NOLINT
    return mnemonic_;
  }
  /**
   * @brief Set to mnemonic.
   * @param[in] mnemonic    setting value.
   */
  void SetMnemonic(  // line separate
      const JsonValueVector<std::string>& mnemonic) {  // NOLINT
    this->mnemonic_ = mnemonic;
  }
  /**
   * @brief Get data type of mnemonic.
   * @return Data type of mnemonic.
   */
  static std::string GetMnemonicFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of mnemonic field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetMnemonicString(  // line separate
      const ConvertEntropyToMnemonicResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.mnemonic_.Serialize();
  }
  /**
   * @brief Set json object to mnemonic field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetMnemonicString(  // line separate
      ConvertEntropyToMnemonicResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.mnemonic_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ConvertEntropyToMnemonicResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ConvertEntropyToMnemonicResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ConvertEntropyToMnemonicResponseMapTable =
    cfd::core::JsonTableMap<ConvertEntropyToMnemonicResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ConvertEntropyToMnemonicResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ConvertEntropyToMnemonicResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(mnemonic) value
   */
  JsonValueVector<std::string> mnemonic_;  // NOLINT
};

// ------------------------------------------------------------------------
// ConvertMnemonicToSeedRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ConvertMnemonicToSeedRequest) class
 */
class ConvertMnemonicToSeedRequest
  : public cfd::core::JsonClassBase<ConvertMnemonicToSeedRequest> {
 public:
  ConvertMnemonicToSeedRequest() {
    CollectFieldName();
  }
  virtual ~ConvertMnemonicToSeedRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of mnemonic.
   * @return mnemonic
   */
  JsonValueVector<std::string>& GetMnemonic() {  // NOLINT
    return mnemonic_;
  }
  /**
   * @brief Set to mnemonic.
   * @param[in] mnemonic    setting value.
   */
  void SetMnemonic(  // line separate
      const JsonValueVector<std::string>& mnemonic) {  // NOLINT
    this->mnemonic_ = mnemonic;
  }
  /**
   * @brief Get data type of mnemonic.
   * @return Data type of mnemonic.
   */
  static std::string GetMnemonicFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of mnemonic field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetMnemonicString(  // line separate
      const ConvertMnemonicToSeedRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.mnemonic_.Serialize();
  }
  /**
   * @brief Set json object to mnemonic field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetMnemonicString(  // line separate
      ConvertMnemonicToSeedRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.mnemonic_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of passphrase
   * @return passphrase
   */
  std::string GetPassphrase() const {
    return passphrase_;
  }
  /**
   * @brief Set to passphrase
   * @param[in] passphrase    setting value.
   */
  void SetPassphrase(  // line separate
    const std::string& passphrase) {  // NOLINT
    this->passphrase_ = passphrase;
  }
  /**
   * @brief Get data type of passphrase
   * @return Data type of passphrase
   */
  static std::string GetPassphraseFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of passphrase field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPassphraseString(  // line separate
      const ConvertMnemonicToSeedRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.passphrase_);
  }
  /**
   * @brief Set json object to passphrase field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPassphraseString(  // line separate
      ConvertMnemonicToSeedRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.passphrase_, json_value);
  }

  /**
   * @brief Get of strictCheck
   * @return strictCheck
   */
  bool GetStrictCheck() const {
    return strict_check_;
  }
  /**
   * @brief Set to strictCheck
   * @param[in] strict_check    setting value.
   */
  void SetStrictCheck(  // line separate
    const bool& strict_check) {  // NOLINT
    this->strict_check_ = strict_check;
  }
  /**
   * @brief Get data type of strictCheck
   * @return Data type of strictCheck
   */
  static std::string GetStrictCheckFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of strictCheck field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetStrictCheckString(  // line separate
      const ConvertMnemonicToSeedRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.strict_check_);
  }
  /**
   * @brief Set json object to strictCheck field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetStrictCheckString(  // line separate
      ConvertMnemonicToSeedRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.strict_check_, json_value);
  }

  /**
   * @brief Get of language
   * @return language
   */
  std::string GetLanguage() const {
    return language_;
  }
  /**
   * @brief Set to language
   * @param[in] language    setting value.
   */
  void SetLanguage(  // line separate
    const std::string& language) {  // NOLINT
    this->language_ = language;
  }
  /**
   * @brief Get data type of language
   * @return Data type of language
   */
  static std::string GetLanguageFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of language field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLanguageString(  // line separate
      const ConvertMnemonicToSeedRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.language_);
  }
  /**
   * @brief Set json object to language field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLanguageString(  // line separate
      ConvertMnemonicToSeedRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.language_, json_value);
  }

  /**
   * @brief Get of useIdeographicSpace
   * @return useIdeographicSpace
   */
  bool GetUseIdeographicSpace() const {
    return use_ideographic_space_;
  }
  /**
   * @brief Set to useIdeographicSpace
   * @param[in] use_ideographic_space    setting value.
   */
  void SetUseIdeographicSpace(  // line separate
    const bool& use_ideographic_space) {  // NOLINT
    this->use_ideographic_space_ = use_ideographic_space;
  }
  /**
   * @brief Get data type of useIdeographicSpace
   * @return Data type of useIdeographicSpace
   */
  static std::string GetUseIdeographicSpaceFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of useIdeographicSpace field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetUseIdeographicSpaceString(  // line separate
      const ConvertMnemonicToSeedRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.use_ideographic_space_);
  }
  /**
   * @brief Set json object to useIdeographicSpace field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetUseIdeographicSpaceString(  // line separate
      ConvertMnemonicToSeedRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.use_ideographic_space_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ConvertMnemonicToSeedRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ConvertMnemonicToSeedRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ConvertMnemonicToSeedRequestMapTable =
    cfd::core::JsonTableMap<ConvertMnemonicToSeedRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ConvertMnemonicToSeedRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ConvertMnemonicToSeedRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(mnemonic) value
   */
  JsonValueVector<std::string> mnemonic_;  // NOLINT
  /**
   * @brief JsonAPI(passphrase) value
   */
  std::string passphrase_ = "";
  /**
   * @brief JsonAPI(strictCheck) value
   */
  bool strict_check_ = false;
  /**
   * @brief JsonAPI(language) value
   */
  std::string language_ = "";
  /**
   * @brief JsonAPI(useIdeographicSpace) value
   */
  bool use_ideographic_space_ = false;
};

// ------------------------------------------------------------------------
// ConvertMnemonicToSeedResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ConvertMnemonicToSeedResponse) class
 */
class ConvertMnemonicToSeedResponse
  : public cfd::core::JsonClassBase<ConvertMnemonicToSeedResponse> {
 public:
  ConvertMnemonicToSeedResponse() {
    CollectFieldName();
  }
  virtual ~ConvertMnemonicToSeedResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of seed
   * @return seed
   */
  std::string GetSeed() const {
    return seed_;
  }
  /**
   * @brief Set to seed
   * @param[in] seed    setting value.
   */
  void SetSeed(  // line separate
    const std::string& seed) {  // NOLINT
    this->seed_ = seed;
  }
  /**
   * @brief Get data type of seed
   * @return Data type of seed
   */
  static std::string GetSeedFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of seed field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSeedString(  // line separate
      const ConvertMnemonicToSeedResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.seed_);
  }
  /**
   * @brief Set json object to seed field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSeedString(  // line separate
      ConvertMnemonicToSeedResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.seed_, json_value);
  }

  /**
   * @brief Get of entropy
   * @return entropy
   */
  std::string GetEntropy() const {
    return entropy_;
  }
  /**
   * @brief Set to entropy
   * @param[in] entropy    setting value.
   */
  void SetEntropy(  // line separate
    const std::string& entropy) {  // NOLINT
    this->entropy_ = entropy;
  }
  /**
   * @brief Get data type of entropy
   * @return Data type of entropy
   */
  static std::string GetEntropyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of entropy field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetEntropyString(  // line separate
      const ConvertMnemonicToSeedResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.entropy_);
  }
  /**
   * @brief Set json object to entropy field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetEntropyString(  // line separate
      ConvertMnemonicToSeedResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.entropy_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ConvertMnemonicToSeedResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ConvertMnemonicToSeedResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ConvertMnemonicToSeedResponseMapTable =
    cfd::core::JsonTableMap<ConvertMnemonicToSeedResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ConvertMnemonicToSeedResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ConvertMnemonicToSeedResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(seed) value
   */
  std::string seed_ = "";
  /**
   * @brief JsonAPI(entropy) value
   */
  std::string entropy_ = "";
};

// ------------------------------------------------------------------------
// ConvertToPsbtRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ConvertToPsbtRequest) class
 */
class ConvertToPsbtRequest
  : public cfd::core::JsonClassBase<ConvertToPsbtRequest> {
 public:
  ConvertToPsbtRequest() {
    CollectFieldName();
  }
  virtual ~ConvertToPsbtRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const ConvertToPsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      ConvertToPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of permitSigData
   * @return permitSigData
   */
  bool GetPermitSigData() const {
    return permit_sig_data_;
  }
  /**
   * @brief Set to permitSigData
   * @param[in] permit_sig_data    setting value.
   */
  void SetPermitSigData(  // line separate
    const bool& permit_sig_data) {  // NOLINT
    this->permit_sig_data_ = permit_sig_data;
  }
  /**
   * @brief Get data type of permitSigData
   * @return Data type of permitSigData
   */
  static std::string GetPermitSigDataFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of permitSigData field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPermitSigDataString(  // line separate
      const ConvertToPsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.permit_sig_data_);
  }
  /**
   * @brief Set json object to permitSigData field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPermitSigDataString(  // line separate
      ConvertToPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.permit_sig_data_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ConvertToPsbtRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ConvertToPsbtRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ConvertToPsbtRequestMapTable =
    cfd::core::JsonTableMap<ConvertToPsbtRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ConvertToPsbtRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ConvertToPsbtRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(permitSigData) value
   */
  bool permit_sig_data_ = false;
};

// ------------------------------------------------------------------------
// CreateAddressRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateAddressRequest) class
 */
class CreateAddressRequest
  : public cfd::core::JsonClassBase<CreateAddressRequest> {
 public:
  CreateAddressRequest() {
    CollectFieldName();
  }
  virtual ~CreateAddressRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const CreateAddressRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      CreateAddressRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of keyData.
   * @return keyData
   */
  HashKeyData& GetKeyData() {  // NOLINT
    return key_data_;
  }
  /**
   * @brief Set to keyData.
   * @param[in] key_data    setting value.
   */
  void SetKeyData(  // line separate
      const HashKeyData& key_data) {  // NOLINT
    this->key_data_ = key_data;
  }
  /**
   * @brief Get data type of keyData.
   * @return Data type of keyData.
   */
  static std::string GetKeyDataFieldType() {
    return "HashKeyData";  // NOLINT
  }
  /**
   * @brief Get json string of keyData field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetKeyDataString(  // line separate
      const CreateAddressRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.key_data_.Serialize();
  }
  /**
   * @brief Set json object to keyData field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetKeyDataString(  // line separate
      CreateAddressRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.key_data_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const CreateAddressRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      CreateAddressRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const CreateAddressRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      CreateAddressRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateAddressRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateAddressRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateAddressRequestMapTable =
    cfd::core::JsonTableMap<CreateAddressRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateAddressRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateAddressRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(keyData) value
   */
  HashKeyData key_data_;  // NOLINT
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "p2wpkh";
};

// ------------------------------------------------------------------------
// CreateAddressResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateAddressResponse) class
 */
class CreateAddressResponse
  : public cfd::core::JsonClassBase<CreateAddressResponse> {
 public:
  CreateAddressResponse() {
    CollectFieldName();
  }
  virtual ~CreateAddressResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const CreateAddressResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      CreateAddressResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Get of lockingScript
   * @return lockingScript
   */
  std::string GetLockingScript() const {
    return locking_script_;
  }
  /**
   * @brief Set to lockingScript
   * @param[in] locking_script    setting value.
   */
  void SetLockingScript(  // line separate
    const std::string& locking_script) {  // NOLINT
    this->locking_script_ = locking_script;
  }
  /**
   * @brief Get data type of lockingScript
   * @return Data type of lockingScript
   */
  static std::string GetLockingScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of lockingScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLockingScriptString(  // line separate
      const CreateAddressResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locking_script_);
  }
  /**
   * @brief Set json object to lockingScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLockingScriptString(  // line separate
      CreateAddressResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locking_script_, json_value);
  }

  /**
   * @brief Get of redeemScript
   * @return redeemScript
   */
  std::string GetRedeemScript() const {
    return redeem_script_;
  }
  /**
   * @brief Set to redeemScript
   * @param[in] redeem_script    setting value.
   */
  void SetRedeemScript(  // line separate
    const std::string& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeemScript
   * @return Data type of redeemScript
   */
  static std::string GetRedeemScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of redeemScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRedeemScriptString(  // line separate
      const CreateAddressResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.redeem_script_);
  }
  /**
   * @brief Set json object to redeemScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRedeemScriptString(  // line separate
      CreateAddressResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.redeem_script_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateAddressResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateAddressResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateAddressResponseMapTable =
    cfd::core::JsonTableMap<CreateAddressResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateAddressResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateAddressResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
  /**
   * @brief JsonAPI(lockingScript) value
   */
  std::string locking_script_ = "";
  /**
   * @brief JsonAPI(redeemScript) value
   */
  std::string redeem_script_ = "";
};

// ------------------------------------------------------------------------
// CreateDescriptorRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateDescriptorRequest) class
 */
class CreateDescriptorRequest
  : public cfd::core::JsonClassBase<CreateDescriptorRequest> {
 public:
  CreateDescriptorRequest() {
    CollectFieldName();
  }
  virtual ~CreateDescriptorRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of scriptType
   * @return scriptType
   */
  std::string GetScriptType() const {
    return script_type_;
  }
  /**
   * @brief Set to scriptType
   * @param[in] script_type    setting value.
   */
  void SetScriptType(  // line separate
    const std::string& script_type) {  // NOLINT
    this->script_type_ = script_type;
  }
  /**
   * @brief Get data type of scriptType
   * @return Data type of scriptType
   */
  static std::string GetScriptTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of scriptType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetScriptTypeString(  // line separate
      const CreateDescriptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.script_type_);
  }
  /**
   * @brief Set json object to scriptType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetScriptTypeString(  // line separate
      CreateDescriptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.script_type_, json_value);
  }

  /**
   * @brief Get of keyInfoList.
   * @return keyInfoList
   */
  JsonObjectVector<CreateDescriptorKeyRequest, CreateDescriptorKeyRequestStruct>& GetKeyInfoList() {  // NOLINT
    return key_info_list_;
  }
  /**
   * @brief Set to keyInfoList.
   * @param[in] key_info_list    setting value.
   */
  void SetKeyInfoList(  // line separate
      const JsonObjectVector<CreateDescriptorKeyRequest, CreateDescriptorKeyRequestStruct>& key_info_list) {  // NOLINT
    this->key_info_list_ = key_info_list;
  }
  /**
   * @brief Get data type of keyInfoList.
   * @return Data type of keyInfoList.
   */
  static std::string GetKeyInfoListFieldType() {
    return "JsonObjectVector<CreateDescriptorKeyRequest, CreateDescriptorKeyRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of keyInfoList field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetKeyInfoListString(  // line separate
      const CreateDescriptorRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.key_info_list_.Serialize();
  }
  /**
   * @brief Set json object to keyInfoList field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetKeyInfoListString(  // line separate
      CreateDescriptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.key_info_list_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of requireNum
   * @return requireNum
   */
  uint32_t GetRequireNum() const {
    return require_num_;
  }
  /**
   * @brief Set to requireNum
   * @param[in] require_num    setting value.
   */
  void SetRequireNum(  // line separate
    const uint32_t& require_num) {  // NOLINT
    this->require_num_ = require_num;
  }
  /**
   * @brief Get data type of requireNum
   * @return Data type of requireNum
   */
  static std::string GetRequireNumFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of requireNum field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRequireNumString(  // line separate
      const CreateDescriptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.require_num_);
  }
  /**
   * @brief Set json object to requireNum field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRequireNumString(  // line separate
      CreateDescriptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.require_num_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateDescriptorRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateDescriptorRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateDescriptorRequestMapTable =
    cfd::core::JsonTableMap<CreateDescriptorRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateDescriptorRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateDescriptorRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(scriptType) value
   */
  std::string script_type_ = "";
  /**
   * @brief JsonAPI(keyInfoList) value
   */
  JsonObjectVector<CreateDescriptorKeyRequest, CreateDescriptorKeyRequestStruct> key_info_list_;  // NOLINT
  /**
   * @brief JsonAPI(requireNum) value
   */
  uint32_t require_num_ = 0;
};

// ------------------------------------------------------------------------
// CreateExtkeyRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateExtkeyRequest) class
 */
class CreateExtkeyRequest
  : public cfd::core::JsonClassBase<CreateExtkeyRequest> {
 public:
  CreateExtkeyRequest() {
    CollectFieldName();
  }
  virtual ~CreateExtkeyRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const CreateExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      CreateExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of extkeyType
   * @return extkeyType
   */
  std::string GetExtkeyType() const {
    return extkey_type_;
  }
  /**
   * @brief Set to extkeyType
   * @param[in] extkey_type    setting value.
   */
  void SetExtkeyType(  // line separate
    const std::string& extkey_type) {  // NOLINT
    this->extkey_type_ = extkey_type;
  }
  /**
   * @brief Get data type of extkeyType
   * @return Data type of extkeyType
   */
  static std::string GetExtkeyTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of extkeyType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExtkeyTypeString(  // line separate
      const CreateExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.extkey_type_);
  }
  /**
   * @brief Set json object to extkeyType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExtkeyTypeString(  // line separate
      CreateExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.extkey_type_, json_value);
  }

  /**
   * @brief Get of parentKey
   * @return parentKey
   */
  std::string GetParentKey() const {
    return parent_key_;
  }
  /**
   * @brief Set to parentKey
   * @param[in] parent_key    setting value.
   */
  void SetParentKey(  // line separate
    const std::string& parent_key) {  // NOLINT
    this->parent_key_ = parent_key;
  }
  /**
   * @brief Get data type of parentKey
   * @return Data type of parentKey
   */
  static std::string GetParentKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of parentKey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetParentKeyString(  // line separate
      const CreateExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.parent_key_);
  }
  /**
   * @brief Set json object to parentKey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetParentKeyString(  // line separate
      CreateExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.parent_key_, json_value);
  }

  /**
   * @brief Get of parentFingerprint
   * @return parentFingerprint
   */
  std::string GetParentFingerprint() const {
    return parent_fingerprint_;
  }
  /**
   * @brief Set to parentFingerprint
   * @param[in] parent_fingerprint    setting value.
   */
  void SetParentFingerprint(  // line separate
    const std::string& parent_fingerprint) {  // NOLINT
    this->parent_fingerprint_ = parent_fingerprint;
  }
  /**
   * @brief Get data type of parentFingerprint
   * @return Data type of parentFingerprint
   */
  static std::string GetParentFingerprintFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of parentFingerprint field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetParentFingerprintString(  // line separate
      const CreateExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.parent_fingerprint_);
  }
  /**
   * @brief Set json object to parentFingerprint field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetParentFingerprintString(  // line separate
      CreateExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.parent_fingerprint_, json_value);
  }

  /**
   * @brief Get of key
   * @return key
   */
  std::string GetKey() const {
    return key_;
  }
  /**
   * @brief Set to key
   * @param[in] key    setting value.
   */
  void SetKey(  // line separate
    const std::string& key) {  // NOLINT
    this->key_ = key;
  }
  /**
   * @brief Get data type of key
   * @return Data type of key
   */
  static std::string GetKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of key field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetKeyString(  // line separate
      const CreateExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.key_);
  }
  /**
   * @brief Set json object to key field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetKeyString(  // line separate
      CreateExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.key_, json_value);
  }

  /**
   * @brief Get of depth
   * @return depth
   */
  uint8_t GetDepth() const {
    return depth_;
  }
  /**
   * @brief Set to depth
   * @param[in] depth    setting value.
   */
  void SetDepth(  // line separate
    const uint8_t& depth) {  // NOLINT
    this->depth_ = depth;
  }
  /**
   * @brief Get data type of depth
   * @return Data type of depth
   */
  static std::string GetDepthFieldType() {
    return "uint8_t";
  }
  /**
   * @brief Get json string of depth field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDepthString(  // line separate
      const CreateExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.depth_);
  }
  /**
   * @brief Set json object to depth field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDepthString(  // line separate
      CreateExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.depth_, json_value);
  }

  /**
   * @brief Get of chainCode
   * @return chainCode
   */
  std::string GetChainCode() const {
    return chain_code_;
  }
  /**
   * @brief Set to chainCode
   * @param[in] chain_code    setting value.
   */
  void SetChainCode(  // line separate
    const std::string& chain_code) {  // NOLINT
    this->chain_code_ = chain_code;
  }
  /**
   * @brief Get data type of chainCode
   * @return Data type of chainCode
   */
  static std::string GetChainCodeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of chainCode field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetChainCodeString(  // line separate
      const CreateExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.chain_code_);
  }
  /**
   * @brief Set json object to chainCode field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetChainCodeString(  // line separate
      CreateExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.chain_code_, json_value);
  }

  /**
   * @brief Get of childNumber
   * @return childNumber
   */
  uint32_t GetChildNumber() const {
    return child_number_;
  }
  /**
   * @brief Set to childNumber
   * @param[in] child_number    setting value.
   */
  void SetChildNumber(  // line separate
    const uint32_t& child_number) {  // NOLINT
    this->child_number_ = child_number;
  }
  /**
   * @brief Get data type of childNumber
   * @return Data type of childNumber
   */
  static std::string GetChildNumberFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of childNumber field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetChildNumberString(  // line separate
      const CreateExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.child_number_);
  }
  /**
   * @brief Set json object to childNumber field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetChildNumberString(  // line separate
      CreateExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.child_number_, json_value);
  }

  /**
   * @brief Get of hardened
   * @return hardened
   */
  bool GetHardened() const {
    return hardened_;
  }
  /**
   * @brief Set to hardened
   * @param[in] hardened    setting value.
   */
  void SetHardened(  // line separate
    const bool& hardened) {  // NOLINT
    this->hardened_ = hardened;
  }
  /**
   * @brief Get data type of hardened
   * @return Data type of hardened
   */
  static std::string GetHardenedFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of hardened field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHardenedString(  // line separate
      const CreateExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hardened_);
  }
  /**
   * @brief Set json object to hardened field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHardenedString(  // line separate
      CreateExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hardened_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateExtkeyRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateExtkeyRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateExtkeyRequestMapTable =
    cfd::core::JsonTableMap<CreateExtkeyRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateExtkeyRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateExtkeyRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(extkeyType) value
   */
  std::string extkey_type_ = "extPubkey";
  /**
   * @brief JsonAPI(parentKey) value
   */
  std::string parent_key_ = "";
  /**
   * @brief JsonAPI(parentFingerprint) value
   */
  std::string parent_fingerprint_ = "";
  /**
   * @brief JsonAPI(key) value
   */
  std::string key_ = "";
  /**
   * @brief JsonAPI(depth) value
   */
  uint8_t depth_ = 0;
  /**
   * @brief JsonAPI(chainCode) value
   */
  std::string chain_code_ = "";
  /**
   * @brief JsonAPI(childNumber) value
   */
  uint32_t child_number_ = 0;
  /**
   * @brief JsonAPI(hardened) value
   */
  bool hardened_ = false;
};

// ------------------------------------------------------------------------
// CreateExtkeyResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateExtkeyResponse) class
 */
class CreateExtkeyResponse
  : public cfd::core::JsonClassBase<CreateExtkeyResponse> {
 public:
  CreateExtkeyResponse() {
    CollectFieldName();
  }
  virtual ~CreateExtkeyResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of extkey
   * @return extkey
   */
  std::string GetExtkey() const {
    return extkey_;
  }
  /**
   * @brief Set to extkey
   * @param[in] extkey    setting value.
   */
  void SetExtkey(  // line separate
    const std::string& extkey) {  // NOLINT
    this->extkey_ = extkey;
  }
  /**
   * @brief Get data type of extkey
   * @return Data type of extkey
   */
  static std::string GetExtkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of extkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExtkeyString(  // line separate
      const CreateExtkeyResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.extkey_);
  }
  /**
   * @brief Set json object to extkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExtkeyString(  // line separate
      CreateExtkeyResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.extkey_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateExtkeyResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateExtkeyResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateExtkeyResponseMapTable =
    cfd::core::JsonTableMap<CreateExtkeyResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateExtkeyResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateExtkeyResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(extkey) value
   */
  std::string extkey_ = "";
};

// ------------------------------------------------------------------------
// CreateExtkeyFromParentRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateExtkeyFromParentRequest) class
 */
class CreateExtkeyFromParentRequest
  : public cfd::core::JsonClassBase<CreateExtkeyFromParentRequest> {
 public:
  CreateExtkeyFromParentRequest() {
    CollectFieldName();
  }
  virtual ~CreateExtkeyFromParentRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of extkey
   * @return extkey
   */
  std::string GetExtkey() const {
    return extkey_;
  }
  /**
   * @brief Set to extkey
   * @param[in] extkey    setting value.
   */
  void SetExtkey(  // line separate
    const std::string& extkey) {  // NOLINT
    this->extkey_ = extkey;
  }
  /**
   * @brief Get data type of extkey
   * @return Data type of extkey
   */
  static std::string GetExtkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of extkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExtkeyString(  // line separate
      const CreateExtkeyFromParentRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.extkey_);
  }
  /**
   * @brief Set json object to extkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExtkeyString(  // line separate
      CreateExtkeyFromParentRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.extkey_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const CreateExtkeyFromParentRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      CreateExtkeyFromParentRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of extkeyType
   * @return extkeyType
   */
  std::string GetExtkeyType() const {
    return extkey_type_;
  }
  /**
   * @brief Set to extkeyType
   * @param[in] extkey_type    setting value.
   */
  void SetExtkeyType(  // line separate
    const std::string& extkey_type) {  // NOLINT
    this->extkey_type_ = extkey_type;
  }
  /**
   * @brief Get data type of extkeyType
   * @return Data type of extkeyType
   */
  static std::string GetExtkeyTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of extkeyType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExtkeyTypeString(  // line separate
      const CreateExtkeyFromParentRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.extkey_type_);
  }
  /**
   * @brief Set json object to extkeyType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExtkeyTypeString(  // line separate
      CreateExtkeyFromParentRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.extkey_type_, json_value);
  }

  /**
   * @brief Get of childNumber
   * @return childNumber
   */
  uint32_t GetChildNumber() const {
    return child_number_;
  }
  /**
   * @brief Set to childNumber
   * @param[in] child_number    setting value.
   */
  void SetChildNumber(  // line separate
    const uint32_t& child_number) {  // NOLINT
    this->child_number_ = child_number;
  }
  /**
   * @brief Get data type of childNumber
   * @return Data type of childNumber
   */
  static std::string GetChildNumberFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of childNumber field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetChildNumberString(  // line separate
      const CreateExtkeyFromParentRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.child_number_);
  }
  /**
   * @brief Set json object to childNumber field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetChildNumberString(  // line separate
      CreateExtkeyFromParentRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.child_number_, json_value);
  }

  /**
   * @brief Get of hardened
   * @return hardened
   */
  bool GetHardened() const {
    return hardened_;
  }
  /**
   * @brief Set to hardened
   * @param[in] hardened    setting value.
   */
  void SetHardened(  // line separate
    const bool& hardened) {  // NOLINT
    this->hardened_ = hardened;
  }
  /**
   * @brief Get data type of hardened
   * @return Data type of hardened
   */
  static std::string GetHardenedFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of hardened field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHardenedString(  // line separate
      const CreateExtkeyFromParentRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hardened_);
  }
  /**
   * @brief Set json object to hardened field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHardenedString(  // line separate
      CreateExtkeyFromParentRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hardened_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateExtkeyFromParentRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateExtkeyFromParentRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateExtkeyFromParentRequestMapTable =
    cfd::core::JsonTableMap<CreateExtkeyFromParentRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateExtkeyFromParentRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateExtkeyFromParentRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(extkey) value
   */
  std::string extkey_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(extkeyType) value
   */
  std::string extkey_type_ = "";
  /**
   * @brief JsonAPI(childNumber) value
   */
  uint32_t child_number_ = 0;
  /**
   * @brief JsonAPI(hardened) value
   */
  bool hardened_ = false;
};

// ------------------------------------------------------------------------
// CreateExtkeyFromParentKeyRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateExtkeyFromParentKeyRequest) class
 */
class CreateExtkeyFromParentKeyRequest
  : public cfd::core::JsonClassBase<CreateExtkeyFromParentKeyRequest> {
 public:
  CreateExtkeyFromParentKeyRequest() {
    CollectFieldName();
  }
  virtual ~CreateExtkeyFromParentKeyRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const CreateExtkeyFromParentKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      CreateExtkeyFromParentKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of extkeyType
   * @return extkeyType
   */
  std::string GetExtkeyType() const {
    return extkey_type_;
  }
  /**
   * @brief Set to extkeyType
   * @param[in] extkey_type    setting value.
   */
  void SetExtkeyType(  // line separate
    const std::string& extkey_type) {  // NOLINT
    this->extkey_type_ = extkey_type;
  }
  /**
   * @brief Get data type of extkeyType
   * @return Data type of extkeyType
   */
  static std::string GetExtkeyTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of extkeyType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExtkeyTypeString(  // line separate
      const CreateExtkeyFromParentKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.extkey_type_);
  }
  /**
   * @brief Set json object to extkeyType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExtkeyTypeString(  // line separate
      CreateExtkeyFromParentKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.extkey_type_, json_value);
  }

  /**
   * @brief Get of parentKey
   * @return parentKey
   */
  std::string GetParentKey() const {
    return parent_key_;
  }
  /**
   * @brief Set to parentKey
   * @param[in] parent_key    setting value.
   */
  void SetParentKey(  // line separate
    const std::string& parent_key) {  // NOLINT
    this->parent_key_ = parent_key;
  }
  /**
   * @brief Get data type of parentKey
   * @return Data type of parentKey
   */
  static std::string GetParentKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of parentKey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetParentKeyString(  // line separate
      const CreateExtkeyFromParentKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.parent_key_);
  }
  /**
   * @brief Set json object to parentKey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetParentKeyString(  // line separate
      CreateExtkeyFromParentKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.parent_key_, json_value);
  }

  /**
   * @brief Get of parentDepth
   * @return parentDepth
   */
  uint8_t GetParentDepth() const {
    return parent_depth_;
  }
  /**
   * @brief Set to parentDepth
   * @param[in] parent_depth    setting value.
   */
  void SetParentDepth(  // line separate
    const uint8_t& parent_depth) {  // NOLINT
    this->parent_depth_ = parent_depth;
  }
  /**
   * @brief Get data type of parentDepth
   * @return Data type of parentDepth
   */
  static std::string GetParentDepthFieldType() {
    return "uint8_t";
  }
  /**
   * @brief Get json string of parentDepth field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetParentDepthString(  // line separate
      const CreateExtkeyFromParentKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.parent_depth_);
  }
  /**
   * @brief Set json object to parentDepth field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetParentDepthString(  // line separate
      CreateExtkeyFromParentKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.parent_depth_, json_value);
  }

  /**
   * @brief Get of parentChainCode
   * @return parentChainCode
   */
  std::string GetParentChainCode() const {
    return parent_chain_code_;
  }
  /**
   * @brief Set to parentChainCode
   * @param[in] parent_chain_code    setting value.
   */
  void SetParentChainCode(  // line separate
    const std::string& parent_chain_code) {  // NOLINT
    this->parent_chain_code_ = parent_chain_code;
  }
  /**
   * @brief Get data type of parentChainCode
   * @return Data type of parentChainCode
   */
  static std::string GetParentChainCodeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of parentChainCode field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetParentChainCodeString(  // line separate
      const CreateExtkeyFromParentKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.parent_chain_code_);
  }
  /**
   * @brief Set json object to parentChainCode field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetParentChainCodeString(  // line separate
      CreateExtkeyFromParentKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.parent_chain_code_, json_value);
  }

  /**
   * @brief Get of childNumber
   * @return childNumber
   */
  uint32_t GetChildNumber() const {
    return child_number_;
  }
  /**
   * @brief Set to childNumber
   * @param[in] child_number    setting value.
   */
  void SetChildNumber(  // line separate
    const uint32_t& child_number) {  // NOLINT
    this->child_number_ = child_number;
  }
  /**
   * @brief Get data type of childNumber
   * @return Data type of childNumber
   */
  static std::string GetChildNumberFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of childNumber field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetChildNumberString(  // line separate
      const CreateExtkeyFromParentKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.child_number_);
  }
  /**
   * @brief Set json object to childNumber field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetChildNumberString(  // line separate
      CreateExtkeyFromParentKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.child_number_, json_value);
  }

  /**
   * @brief Get of hardened
   * @return hardened
   */
  bool GetHardened() const {
    return hardened_;
  }
  /**
   * @brief Set to hardened
   * @param[in] hardened    setting value.
   */
  void SetHardened(  // line separate
    const bool& hardened) {  // NOLINT
    this->hardened_ = hardened;
  }
  /**
   * @brief Get data type of hardened
   * @return Data type of hardened
   */
  static std::string GetHardenedFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of hardened field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHardenedString(  // line separate
      const CreateExtkeyFromParentKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hardened_);
  }
  /**
   * @brief Set json object to hardened field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHardenedString(  // line separate
      CreateExtkeyFromParentKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hardened_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateExtkeyFromParentKeyRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateExtkeyFromParentKeyRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateExtkeyFromParentKeyRequestMapTable =
    cfd::core::JsonTableMap<CreateExtkeyFromParentKeyRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateExtkeyFromParentKeyRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateExtkeyFromParentKeyRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(extkeyType) value
   */
  std::string extkey_type_ = "extPubkey";
  /**
   * @brief JsonAPI(parentKey) value
   */
  std::string parent_key_ = "";
  /**
   * @brief JsonAPI(parentDepth) value
   */
  uint8_t parent_depth_ = 0;
  /**
   * @brief JsonAPI(parentChainCode) value
   */
  std::string parent_chain_code_ = "";
  /**
   * @brief JsonAPI(childNumber) value
   */
  uint32_t child_number_ = 0;
  /**
   * @brief JsonAPI(hardened) value
   */
  bool hardened_ = false;
};

// ------------------------------------------------------------------------
// CreateExtkeyFromParentPathRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateExtkeyFromParentPathRequest) class
 */
class CreateExtkeyFromParentPathRequest
  : public cfd::core::JsonClassBase<CreateExtkeyFromParentPathRequest> {
 public:
  CreateExtkeyFromParentPathRequest() {
    CollectFieldName();
  }
  virtual ~CreateExtkeyFromParentPathRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of extkey
   * @return extkey
   */
  std::string GetExtkey() const {
    return extkey_;
  }
  /**
   * @brief Set to extkey
   * @param[in] extkey    setting value.
   */
  void SetExtkey(  // line separate
    const std::string& extkey) {  // NOLINT
    this->extkey_ = extkey;
  }
  /**
   * @brief Get data type of extkey
   * @return Data type of extkey
   */
  static std::string GetExtkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of extkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExtkeyString(  // line separate
      const CreateExtkeyFromParentPathRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.extkey_);
  }
  /**
   * @brief Set json object to extkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExtkeyString(  // line separate
      CreateExtkeyFromParentPathRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.extkey_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const CreateExtkeyFromParentPathRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      CreateExtkeyFromParentPathRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of extkeyType
   * @return extkeyType
   */
  std::string GetExtkeyType() const {
    return extkey_type_;
  }
  /**
   * @brief Set to extkeyType
   * @param[in] extkey_type    setting value.
   */
  void SetExtkeyType(  // line separate
    const std::string& extkey_type) {  // NOLINT
    this->extkey_type_ = extkey_type;
  }
  /**
   * @brief Get data type of extkeyType
   * @return Data type of extkeyType
   */
  static std::string GetExtkeyTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of extkeyType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExtkeyTypeString(  // line separate
      const CreateExtkeyFromParentPathRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.extkey_type_);
  }
  /**
   * @brief Set json object to extkeyType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExtkeyTypeString(  // line separate
      CreateExtkeyFromParentPathRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.extkey_type_, json_value);
  }

  /**
   * @brief Get of childNumberArray.
   * @return childNumberArray
   */
  JsonValueVector<uint32_t>& GetChildNumberArray() {  // NOLINT
    return child_number_array_;
  }
  /**
   * @brief Set to childNumberArray.
   * @param[in] child_number_array    setting value.
   */
  void SetChildNumberArray(  // line separate
      const JsonValueVector<uint32_t>& child_number_array) {  // NOLINT
    this->child_number_array_ = child_number_array;
  }
  /**
   * @brief Get data type of childNumberArray.
   * @return Data type of childNumberArray.
   */
  static std::string GetChildNumberArrayFieldType() {
    return "JsonValueVector<uint32_t>";  // NOLINT
  }
  /**
   * @brief Get json string of childNumberArray field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetChildNumberArrayString(  // line separate
      const CreateExtkeyFromParentPathRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.child_number_array_.Serialize();
  }
  /**
   * @brief Set json object to childNumberArray field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetChildNumberArrayString(  // line separate
      CreateExtkeyFromParentPathRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.child_number_array_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of path
   * @return path
   */
  std::string GetPath() const {
    return path_;
  }
  /**
   * @brief Set to path
   * @param[in] path    setting value.
   */
  void SetPath(  // line separate
    const std::string& path) {  // NOLINT
    this->path_ = path;
  }
  /**
   * @brief Get data type of path
   * @return Data type of path
   */
  static std::string GetPathFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of path field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPathString(  // line separate
      const CreateExtkeyFromParentPathRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.path_);
  }
  /**
   * @brief Set json object to path field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPathString(  // line separate
      CreateExtkeyFromParentPathRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.path_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateExtkeyFromParentPathRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateExtkeyFromParentPathRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateExtkeyFromParentPathRequestMapTable =
    cfd::core::JsonTableMap<CreateExtkeyFromParentPathRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateExtkeyFromParentPathRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateExtkeyFromParentPathRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(extkey) value
   */
  std::string extkey_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(extkeyType) value
   */
  std::string extkey_type_ = "";
  /**
   * @brief JsonAPI(childNumberArray) value
   */
  JsonValueVector<uint32_t> child_number_array_;  // NOLINT
  /**
   * @brief JsonAPI(path) value
   */
  std::string path_ = "";
};

// ------------------------------------------------------------------------
// CreateExtkeyFromSeedRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateExtkeyFromSeedRequest) class
 */
class CreateExtkeyFromSeedRequest
  : public cfd::core::JsonClassBase<CreateExtkeyFromSeedRequest> {
 public:
  CreateExtkeyFromSeedRequest() {
    CollectFieldName();
  }
  virtual ~CreateExtkeyFromSeedRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of seed
   * @return seed
   */
  std::string GetSeed() const {
    return seed_;
  }
  /**
   * @brief Set to seed
   * @param[in] seed    setting value.
   */
  void SetSeed(  // line separate
    const std::string& seed) {  // NOLINT
    this->seed_ = seed;
  }
  /**
   * @brief Get data type of seed
   * @return Data type of seed
   */
  static std::string GetSeedFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of seed field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSeedString(  // line separate
      const CreateExtkeyFromSeedRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.seed_);
  }
  /**
   * @brief Set json object to seed field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSeedString(  // line separate
      CreateExtkeyFromSeedRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.seed_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const CreateExtkeyFromSeedRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      CreateExtkeyFromSeedRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of extkeyType
   * @return extkeyType
   */
  std::string GetExtkeyType() const {
    return extkey_type_;
  }
  /**
   * @brief Set to extkeyType
   * @param[in] extkey_type    setting value.
   */
  void SetExtkeyType(  // line separate
    const std::string& extkey_type) {  // NOLINT
    this->extkey_type_ = extkey_type;
  }
  /**
   * @brief Get data type of extkeyType
   * @return Data type of extkeyType
   */
  static std::string GetExtkeyTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of extkeyType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExtkeyTypeString(  // line separate
      const CreateExtkeyFromSeedRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.extkey_type_);
  }
  /**
   * @brief Set json object to extkeyType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExtkeyTypeString(  // line separate
      CreateExtkeyFromSeedRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.extkey_type_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateExtkeyFromSeedRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateExtkeyFromSeedRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateExtkeyFromSeedRequestMapTable =
    cfd::core::JsonTableMap<CreateExtkeyFromSeedRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateExtkeyFromSeedRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateExtkeyFromSeedRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(seed) value
   */
  std::string seed_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(extkeyType) value
   */
  std::string extkey_type_ = "extPrivkey";
};

// ------------------------------------------------------------------------
// CreateExtPubkeyRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateExtPubkeyRequest) class
 */
class CreateExtPubkeyRequest
  : public cfd::core::JsonClassBase<CreateExtPubkeyRequest> {
 public:
  CreateExtPubkeyRequest() {
    CollectFieldName();
  }
  virtual ~CreateExtPubkeyRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of extkey
   * @return extkey
   */
  std::string GetExtkey() const {
    return extkey_;
  }
  /**
   * @brief Set to extkey
   * @param[in] extkey    setting value.
   */
  void SetExtkey(  // line separate
    const std::string& extkey) {  // NOLINT
    this->extkey_ = extkey;
  }
  /**
   * @brief Get data type of extkey
   * @return Data type of extkey
   */
  static std::string GetExtkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of extkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExtkeyString(  // line separate
      const CreateExtPubkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.extkey_);
  }
  /**
   * @brief Set json object to extkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExtkeyString(  // line separate
      CreateExtPubkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.extkey_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const CreateExtPubkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      CreateExtPubkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateExtPubkeyRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateExtPubkeyRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateExtPubkeyRequestMapTable =
    cfd::core::JsonTableMap<CreateExtPubkeyRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateExtPubkeyRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateExtPubkeyRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(extkey) value
   */
  std::string extkey_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
};

// ------------------------------------------------------------------------
// CreateKeyPairRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateKeyPairRequest) class
 */
class CreateKeyPairRequest
  : public cfd::core::JsonClassBase<CreateKeyPairRequest> {
 public:
  CreateKeyPairRequest() {
    CollectFieldName();
  }
  virtual ~CreateKeyPairRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of wif
   * @return wif
   */
  bool GetWif() const {
    return wif_;
  }
  /**
   * @brief Set to wif
   * @param[in] wif    setting value.
   */
  void SetWif(  // line separate
    const bool& wif) {  // NOLINT
    this->wif_ = wif;
  }
  /**
   * @brief Get data type of wif
   * @return Data type of wif
   */
  static std::string GetWifFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of wif field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetWifString(  // line separate
      const CreateKeyPairRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.wif_);
  }
  /**
   * @brief Set json object to wif field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetWifString(  // line separate
      CreateKeyPairRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.wif_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const CreateKeyPairRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      CreateKeyPairRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of isCompressed
   * @return isCompressed
   */
  bool GetIsCompressed() const {
    return is_compressed_;
  }
  /**
   * @brief Set to isCompressed
   * @param[in] is_compressed    setting value.
   */
  void SetIsCompressed(  // line separate
    const bool& is_compressed) {  // NOLINT
    this->is_compressed_ = is_compressed;
  }
  /**
   * @brief Get data type of isCompressed
   * @return Data type of isCompressed
   */
  static std::string GetIsCompressedFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isCompressed field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsCompressedString(  // line separate
      const CreateKeyPairRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_compressed_);
  }
  /**
   * @brief Set json object to isCompressed field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsCompressedString(  // line separate
      CreateKeyPairRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_compressed_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateKeyPairRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateKeyPairRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateKeyPairRequestMapTable =
    cfd::core::JsonTableMap<CreateKeyPairRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateKeyPairRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateKeyPairRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(wif) value
   */
  bool wif_ = true;
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(isCompressed) value
   */
  bool is_compressed_ = true;
};

// ------------------------------------------------------------------------
// CreateKeyPairResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateKeyPairResponse) class
 */
class CreateKeyPairResponse
  : public cfd::core::JsonClassBase<CreateKeyPairResponse> {
 public:
  CreateKeyPairResponse() {
    CollectFieldName();
  }
  virtual ~CreateKeyPairResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of privkey
   * @return privkey
   */
  std::string GetPrivkey() const {
    return privkey_;
  }
  /**
   * @brief Set to privkey
   * @param[in] privkey    setting value.
   */
  void SetPrivkey(  // line separate
    const std::string& privkey) {  // NOLINT
    this->privkey_ = privkey;
  }
  /**
   * @brief Get data type of privkey
   * @return Data type of privkey
   */
  static std::string GetPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of privkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPrivkeyString(  // line separate
      const CreateKeyPairResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.privkey_);
  }
  /**
   * @brief Set json object to privkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPrivkeyString(  // line separate
      CreateKeyPairResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.privkey_, json_value);
  }

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const CreateKeyPairResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      CreateKeyPairResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateKeyPairResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateKeyPairResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateKeyPairResponseMapTable =
    cfd::core::JsonTableMap<CreateKeyPairResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateKeyPairResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateKeyPairResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(privkey) value
   */
  std::string privkey_ = "";
  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
};

// ------------------------------------------------------------------------
// CreateMultisigScriptSigRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateMultisigScriptSigRequest) class
 */
class CreateMultisigScriptSigRequest
  : public cfd::core::JsonClassBase<CreateMultisigScriptSigRequest> {
 public:
  CreateMultisigScriptSigRequest() {
    CollectFieldName();
  }
  virtual ~CreateMultisigScriptSigRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of signParams.
   * @return signParams
   */
  JsonObjectVector<PubkeySignData, PubkeySignDataStruct>& GetSignParams() {  // NOLINT
    return sign_params_;
  }
  /**
   * @brief Set to signParams.
   * @param[in] sign_params    setting value.
   */
  void SetSignParams(  // line separate
      const JsonObjectVector<PubkeySignData, PubkeySignDataStruct>& sign_params) {  // NOLINT
    this->sign_params_ = sign_params;
  }
  /**
   * @brief Get data type of signParams.
   * @return Data type of signParams.
   */
  static std::string GetSignParamsFieldType() {
    return "JsonObjectVector<PubkeySignData, PubkeySignDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of signParams field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetSignParamsString(  // line separate
      const CreateMultisigScriptSigRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.sign_params_.Serialize();
  }
  /**
   * @brief Set json object to signParams field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetSignParamsString(  // line separate
      CreateMultisigScriptSigRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.sign_params_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of redeemScript
   * @return redeemScript
   */
  std::string GetRedeemScript() const {
    return redeem_script_;
  }
  /**
   * @brief Set to redeemScript
   * @param[in] redeem_script    setting value.
   */
  void SetRedeemScript(  // line separate
    const std::string& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeemScript
   * @return Data type of redeemScript
   */
  static std::string GetRedeemScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of redeemScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRedeemScriptString(  // line separate
      const CreateMultisigScriptSigRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.redeem_script_);
  }
  /**
   * @brief Set json object to redeemScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRedeemScriptString(  // line separate
      CreateMultisigScriptSigRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.redeem_script_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateMultisigScriptSigRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateMultisigScriptSigRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateMultisigScriptSigRequestMapTable =
    cfd::core::JsonTableMap<CreateMultisigScriptSigRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateMultisigScriptSigRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateMultisigScriptSigRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(signParams) value
   */
  JsonObjectVector<PubkeySignData, PubkeySignDataStruct> sign_params_;  // NOLINT
  /**
   * @brief JsonAPI(redeemScript) value
   */
  std::string redeem_script_ = "";
};

// ------------------------------------------------------------------------
// ScriptDataResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ScriptDataResponse) class
 */
class ScriptDataResponse
  : public cfd::core::JsonClassBase<ScriptDataResponse> {
 public:
  ScriptDataResponse() {
    CollectFieldName();
  }
  virtual ~ScriptDataResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const ScriptDataResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      ScriptDataResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ScriptDataResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ScriptDataResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ScriptDataResponseMapTable =
    cfd::core::JsonTableMap<ScriptDataResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ScriptDataResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ScriptDataResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
};

// ------------------------------------------------------------------------
// CreateRawTransactionRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateRawTransactionRequest) class
 */
class CreateRawTransactionRequest
  : public cfd::core::JsonClassBase<CreateRawTransactionRequest> {
 public:
  CreateRawTransactionRequest() {
    CollectFieldName();
  }
  virtual ~CreateRawTransactionRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of version
   * @return version
   */
  uint32_t GetVersion() const {
    return version_;
  }
  /**
   * @brief Set to version
   * @param[in] version    setting value.
   */
  void SetVersion(  // line separate
    const uint32_t& version) {  // NOLINT
    this->version_ = version;
  }
  /**
   * @brief Get data type of version
   * @return Data type of version
   */
  static std::string GetVersionFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of version field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVersionString(  // line separate
      const CreateRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.version_);
  }
  /**
   * @brief Set json object to version field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVersionString(  // line separate
      CreateRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.version_, json_value);
  }

  /**
   * @brief Get of locktime
   * @return locktime
   */
  uint32_t GetLocktime() const {
    return locktime_;
  }
  /**
   * @brief Set to locktime
   * @param[in] locktime    setting value.
   */
  void SetLocktime(  // line separate
    const uint32_t& locktime) {  // NOLINT
    this->locktime_ = locktime;
  }
  /**
   * @brief Get data type of locktime
   * @return Data type of locktime
   */
  static std::string GetLocktimeFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of locktime field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLocktimeString(  // line separate
      const CreateRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locktime_);
  }
  /**
   * @brief Set json object to locktime field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLocktimeString(  // line separate
      CreateRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locktime_, json_value);
  }

  /**
   * @brief Get of txins.
   * @return txins
   */
  JsonObjectVector<TxInRequest, TxInRequestStruct>& GetTxins() {  // NOLINT
    return txins_;
  }
  /**
   * @brief Set to txins.
   * @param[in] txins    setting value.
   */
  void SetTxins(  // line separate
      const JsonObjectVector<TxInRequest, TxInRequestStruct>& txins) {  // NOLINT
    this->txins_ = txins;
  }
  /**
   * @brief Get data type of txins.
   * @return Data type of txins.
   */
  static std::string GetTxinsFieldType() {
    return "JsonObjectVector<TxInRequest, TxInRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txins field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinsString(  // line separate
      const CreateRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txins_.Serialize();
  }
  /**
   * @brief Set json object to txins field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinsString(  // line separate
      CreateRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txins_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of txouts.
   * @return txouts
   */
  JsonObjectVector<TxOutRequest, TxOutRequestStruct>& GetTxouts() {  // NOLINT
    return txouts_;
  }
  /**
   * @brief Set to txouts.
   * @param[in] txouts    setting value.
   */
  void SetTxouts(  // line separate
      const JsonObjectVector<TxOutRequest, TxOutRequestStruct>& txouts) {  // NOLINT
    this->txouts_ = txouts;
  }
  /**
   * @brief Get data type of txouts.
   * @return Data type of txouts.
   */
  static std::string GetTxoutsFieldType() {
    return "JsonObjectVector<TxOutRequest, TxOutRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txouts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxoutsString(  // line separate
      const CreateRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txouts_.Serialize();
  }
  /**
   * @brief Set json object to txouts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxoutsString(  // line separate
      CreateRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txouts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateRawTransactionRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateRawTransactionRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateRawTransactionRequestMapTable =
    cfd::core::JsonTableMap<CreateRawTransactionRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateRawTransactionRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateRawTransactionRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(version) value
   */
  uint32_t version_ = 2;
  /**
   * @brief JsonAPI(locktime) value
   */
  uint32_t locktime_ = 0;
  /**
   * @brief JsonAPI(txins) value
   */
  JsonObjectVector<TxInRequest, TxInRequestStruct> txins_;  // NOLINT
  /**
   * @brief JsonAPI(txouts) value
   */
  JsonObjectVector<TxOutRequest, TxOutRequestStruct> txouts_;  // NOLINT
};

// ------------------------------------------------------------------------
// CreateScriptRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateScriptRequest) class
 */
class CreateScriptRequest
  : public cfd::core::JsonClassBase<CreateScriptRequest> {
 public:
  CreateScriptRequest() {
    CollectFieldName();
  }
  virtual ~CreateScriptRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of items.
   * @return items
   */
  JsonValueVector<std::string>& GetItems() {  // NOLINT
    return items_;
  }
  /**
   * @brief Set to items.
   * @param[in] items    setting value.
   */
  void SetItems(  // line separate
      const JsonValueVector<std::string>& items) {  // NOLINT
    this->items_ = items;
  }
  /**
   * @brief Get data type of items.
   * @return Data type of items.
   */
  static std::string GetItemsFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of items field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetItemsString(  // line separate
      const CreateScriptRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.items_.Serialize();
  }
  /**
   * @brief Set json object to items field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetItemsString(  // line separate
      CreateScriptRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.items_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateScriptRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateScriptRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateScriptRequestMapTable =
    cfd::core::JsonTableMap<CreateScriptRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateScriptRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateScriptRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(items) value
   */
  JsonValueVector<std::string> items_;  // NOLINT
};

// ------------------------------------------------------------------------
// DecodeBase58Request
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodeBase58Request) class
 */
class DecodeBase58Request
  : public cfd::core::JsonClassBase<DecodeBase58Request> {
 public:
  DecodeBase58Request() {
    CollectFieldName();
  }
  virtual ~DecodeBase58Request() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of data
   * @return data
   */
  std::string GetData() const {
    return data_;
  }
  /**
   * @brief Set to data
   * @param[in] data    setting value.
   */
  void SetData(  // line separate
    const std::string& data) {  // NOLINT
    this->data_ = data;
  }
  /**
   * @brief Get data type of data
   * @return Data type of data
   */
  static std::string GetDataFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of data field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDataString(  // line separate
      const DecodeBase58Request& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.data_);
  }
  /**
   * @brief Set json object to data field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDataString(  // line separate
      DecodeBase58Request& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.data_, json_value);
  }

  /**
   * @brief Get of hasChecksum
   * @return hasChecksum
   */
  bool GetHasChecksum() const {
    return has_checksum_;
  }
  /**
   * @brief Set to hasChecksum
   * @param[in] has_checksum    setting value.
   */
  void SetHasChecksum(  // line separate
    const bool& has_checksum) {  // NOLINT
    this->has_checksum_ = has_checksum;
  }
  /**
   * @brief Get data type of hasChecksum
   * @return Data type of hasChecksum
   */
  static std::string GetHasChecksumFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of hasChecksum field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHasChecksumString(  // line separate
      const DecodeBase58Request& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.has_checksum_);
  }
  /**
   * @brief Set json object to hasChecksum field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHasChecksumString(  // line separate
      DecodeBase58Request& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.has_checksum_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodeBase58RequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodeBase58RequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodeBase58RequestMapTable =
    cfd::core::JsonTableMap<DecodeBase58Request>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodeBase58RequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodeBase58RequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(data) value
   */
  std::string data_ = "";
  /**
   * @brief JsonAPI(hasChecksum) value
   */
  bool has_checksum_ = true;
};

// ------------------------------------------------------------------------
// DecodeBase58Response
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodeBase58Response) class
 */
class DecodeBase58Response
  : public cfd::core::JsonClassBase<DecodeBase58Response> {
 public:
  DecodeBase58Response() {
    CollectFieldName();
  }
  virtual ~DecodeBase58Response() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const DecodeBase58Response& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      DecodeBase58Response& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodeBase58ResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodeBase58ResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodeBase58ResponseMapTable =
    cfd::core::JsonTableMap<DecodeBase58Response>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodeBase58ResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodeBase58ResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
};

// ------------------------------------------------------------------------
// Base64Data
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (Base64Data) class
 */
class Base64Data
  : public cfd::core::JsonClassBase<Base64Data> {
 public:
  Base64Data() {
    CollectFieldName();
  }
  virtual ~Base64Data() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of base64
   * @return base64
   */
  std::string GetBase64() const {
    return base64_;
  }
  /**
   * @brief Set to base64
   * @param[in] base64    setting value.
   */
  void SetBase64(  // line separate
    const std::string& base64) {  // NOLINT
    this->base64_ = base64;
  }
  /**
   * @brief Get data type of base64
   * @return Data type of base64
   */
  static std::string GetBase64FieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of base64 field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBase64String(  // line separate
      const Base64Data& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.base64_);
  }
  /**
   * @brief Set json object to base64 field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBase64String(  // line separate
      Base64Data& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.base64_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const Base64DataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  Base64DataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using Base64DataMapTable =
    cfd::core::JsonTableMap<Base64Data>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const Base64DataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static Base64DataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(base64) value
   */
  std::string base64_ = "";
};

// ------------------------------------------------------------------------
// HexData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (HexData) class
 */
class HexData
  : public cfd::core::JsonClassBase<HexData> {
 public:
  HexData() {
    CollectFieldName();
  }
  virtual ~HexData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const HexData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      HexData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const HexDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  HexDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using HexDataMapTable =
    cfd::core::JsonTableMap<HexData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const HexDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static HexDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
};

// ------------------------------------------------------------------------
// DecodeDerSignatureToRawRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodeDerSignatureToRawRequest) class
 */
class DecodeDerSignatureToRawRequest
  : public cfd::core::JsonClassBase<DecodeDerSignatureToRawRequest> {
 public:
  DecodeDerSignatureToRawRequest() {
    CollectFieldName();
  }
  virtual ~DecodeDerSignatureToRawRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of signature
   * @return signature
   */
  std::string GetSignature() const {
    return signature_;
  }
  /**
   * @brief Set to signature
   * @param[in] signature    setting value.
   */
  void SetSignature(  // line separate
    const std::string& signature) {  // NOLINT
    this->signature_ = signature;
  }
  /**
   * @brief Get data type of signature
   * @return Data type of signature
   */
  static std::string GetSignatureFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of signature field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSignatureString(  // line separate
      const DecodeDerSignatureToRawRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.signature_);
  }
  /**
   * @brief Set json object to signature field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSignatureString(  // line separate
      DecodeDerSignatureToRawRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.signature_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodeDerSignatureToRawRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodeDerSignatureToRawRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodeDerSignatureToRawRequestMapTable =
    cfd::core::JsonTableMap<DecodeDerSignatureToRawRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodeDerSignatureToRawRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodeDerSignatureToRawRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(signature) value
   */
  std::string signature_ = "";
};

// ------------------------------------------------------------------------
// DecodePsbtRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodePsbtRequest) class
 */
class DecodePsbtRequest
  : public cfd::core::JsonClassBase<DecodePsbtRequest> {
 public:
  DecodePsbtRequest() {
    CollectFieldName();
  }
  virtual ~DecodePsbtRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of psbt
   * @return psbt
   */
  std::string GetPsbt() const {
    return psbt_;
  }
  /**
   * @brief Set to psbt
   * @param[in] psbt    setting value.
   */
  void SetPsbt(  // line separate
    const std::string& psbt) {  // NOLINT
    this->psbt_ = psbt;
  }
  /**
   * @brief Get data type of psbt
   * @return Data type of psbt
   */
  static std::string GetPsbtFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of psbt field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPsbtString(  // line separate
      const DecodePsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.psbt_);
  }
  /**
   * @brief Set json object to psbt field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPsbtString(  // line separate
      DecodePsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.psbt_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const DecodePsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      DecodePsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of hasDetail
   * @return hasDetail
   */
  bool GetHasDetail() const {
    return has_detail_;
  }
  /**
   * @brief Set to hasDetail
   * @param[in] has_detail    setting value.
   */
  void SetHasDetail(  // line separate
    const bool& has_detail) {  // NOLINT
    this->has_detail_ = has_detail;
  }
  /**
   * @brief Get data type of hasDetail
   * @return Data type of hasDetail
   */
  static std::string GetHasDetailFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of hasDetail field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHasDetailString(  // line separate
      const DecodePsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.has_detail_);
  }
  /**
   * @brief Set json object to hasDetail field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHasDetailString(  // line separate
      DecodePsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.has_detail_, json_value);
  }

  /**
   * @brief Get of hasSimple
   * @return hasSimple
   */
  bool GetHasSimple() const {
    return has_simple_;
  }
  /**
   * @brief Set to hasSimple
   * @param[in] has_simple    setting value.
   */
  void SetHasSimple(  // line separate
    const bool& has_simple) {  // NOLINT
    this->has_simple_ = has_simple;
  }
  /**
   * @brief Get data type of hasSimple
   * @return Data type of hasSimple
   */
  static std::string GetHasSimpleFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of hasSimple field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHasSimpleString(  // line separate
      const DecodePsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.has_simple_);
  }
  /**
   * @brief Set json object to hasSimple field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHasSimpleString(  // line separate
      DecodePsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.has_simple_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodePsbtRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodePsbtRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodePsbtRequestMapTable =
    cfd::core::JsonTableMap<DecodePsbtRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodePsbtRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodePsbtRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(psbt) value
   */
  std::string psbt_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(hasDetail) value
   */
  bool has_detail_ = false;
  /**
   * @brief JsonAPI(hasSimple) value
   */
  bool has_simple_ = false;
};

// ------------------------------------------------------------------------
// DecodePsbtResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodePsbtResponse) class
 */
class DecodePsbtResponse
  : public cfd::core::JsonClassBase<DecodePsbtResponse> {
 public:
  DecodePsbtResponse() {
    CollectFieldName();
  }
  virtual ~DecodePsbtResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx.
   * @return tx
   */
  DecodeRawTransactionResponse& GetTx() {  // NOLINT
    return tx_;
  }
  /**
   * @brief Set to tx.
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
      const DecodeRawTransactionResponse& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx.
   * @return Data type of tx.
   */
  static std::string GetTxFieldType() {
    return "DecodeRawTransactionResponse";  // NOLINT
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxString(  // line separate
      const DecodePsbtResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.tx_.Serialize();
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxString(  // line separate
      DecodePsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.tx_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of tx_hex
   * @return tx_hex
   */
  std::string GetTx_hex() const {
    return tx_hex_;
  }
  /**
   * @brief Set to tx_hex
   * @param[in] tx_hex    setting value.
   */
  void SetTx_hex(  // line separate
    const std::string& tx_hex) {  // NOLINT
    this->tx_hex_ = tx_hex;
  }
  /**
   * @brief Get data type of tx_hex
   * @return Data type of tx_hex
   */
  static std::string GetTx_hexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx_hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTx_hexString(  // line separate
      const DecodePsbtResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_hex_);
  }
  /**
   * @brief Set json object to tx_hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTx_hexString(  // line separate
      DecodePsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_hex_, json_value);
  }

  /**
   * @brief Get of xpubs.
   * @return xpubs
   */
  JsonObjectVector<PsbtGlobalXpub, PsbtGlobalXpubStruct>& GetXpubs() {  // NOLINT
    return xpubs_;
  }
  /**
   * @brief Set to xpubs.
   * @param[in] xpubs    setting value.
   */
  void SetXpubs(  // line separate
      const JsonObjectVector<PsbtGlobalXpub, PsbtGlobalXpubStruct>& xpubs) {  // NOLINT
    this->xpubs_ = xpubs;
  }
  /**
   * @brief Get data type of xpubs.
   * @return Data type of xpubs.
   */
  static std::string GetXpubsFieldType() {
    return "JsonObjectVector<PsbtGlobalXpub, PsbtGlobalXpubStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of xpubs field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetXpubsString(  // line separate
      const DecodePsbtResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.xpubs_.Serialize();
  }
  /**
   * @brief Set json object to xpubs field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetXpubsString(  // line separate
      DecodePsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.xpubs_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of version
   * @return version
   */
  uint32_t GetVersion() const {
    return version_;
  }
  /**
   * @brief Set to version
   * @param[in] version    setting value.
   */
  void SetVersion(  // line separate
    const uint32_t& version) {  // NOLINT
    this->version_ = version;
  }
  /**
   * @brief Get data type of version
   * @return Data type of version
   */
  static std::string GetVersionFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of version field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVersionString(  // line separate
      const DecodePsbtResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.version_);
  }
  /**
   * @brief Set json object to version field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVersionString(  // line separate
      DecodePsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.version_, json_value);
  }

  /**
   * @brief Get of unknown.
   * @return unknown
   */
  JsonObjectVector<PsbtMapData, PsbtMapDataStruct>& GetUnknown() {  // NOLINT
    return unknown_;
  }
  /**
   * @brief Set to unknown.
   * @param[in] unknown    setting value.
   */
  void SetUnknown(  // line separate
      const JsonObjectVector<PsbtMapData, PsbtMapDataStruct>& unknown) {  // NOLINT
    this->unknown_ = unknown;
  }
  /**
   * @brief Get data type of unknown.
   * @return Data type of unknown.
   */
  static std::string GetUnknownFieldType() {
    return "JsonObjectVector<PsbtMapData, PsbtMapDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of unknown field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUnknownString(  // line separate
      const DecodePsbtResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.unknown_.Serialize();
  }
  /**
   * @brief Set json object to unknown field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUnknownString(  // line separate
      DecodePsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.unknown_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of inputs.
   * @return inputs
   */
  JsonObjectVector<DecodePsbtInput, DecodePsbtInputStruct>& GetInputs() {  // NOLINT
    return inputs_;
  }
  /**
   * @brief Set to inputs.
   * @param[in] inputs    setting value.
   */
  void SetInputs(  // line separate
      const JsonObjectVector<DecodePsbtInput, DecodePsbtInputStruct>& inputs) {  // NOLINT
    this->inputs_ = inputs;
  }
  /**
   * @brief Get data type of inputs.
   * @return Data type of inputs.
   */
  static std::string GetInputsFieldType() {
    return "JsonObjectVector<DecodePsbtInput, DecodePsbtInputStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of inputs field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetInputsString(  // line separate
      const DecodePsbtResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.inputs_.Serialize();
  }
  /**
   * @brief Set json object to inputs field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetInputsString(  // line separate
      DecodePsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.inputs_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of outputs.
   * @return outputs
   */
  JsonObjectVector<DecodePsbtOutput, DecodePsbtOutputStruct>& GetOutputs() {  // NOLINT
    return outputs_;
  }
  /**
   * @brief Set to outputs.
   * @param[in] outputs    setting value.
   */
  void SetOutputs(  // line separate
      const JsonObjectVector<DecodePsbtOutput, DecodePsbtOutputStruct>& outputs) {  // NOLINT
    this->outputs_ = outputs;
  }
  /**
   * @brief Get data type of outputs.
   * @return Data type of outputs.
   */
  static std::string GetOutputsFieldType() {
    return "JsonObjectVector<DecodePsbtOutput, DecodePsbtOutputStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of outputs field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetOutputsString(  // line separate
      const DecodePsbtResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.outputs_.Serialize();
  }
  /**
   * @brief Set json object to outputs field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetOutputsString(  // line separate
      DecodePsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.outputs_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of fee
   * @return fee
   */
  int64_t GetFee() const {
    return fee_;
  }
  /**
   * @brief Set to fee
   * @param[in] fee    setting value.
   */
  void SetFee(  // line separate
    const int64_t& fee) {  // NOLINT
    this->fee_ = fee;
  }
  /**
   * @brief Get data type of fee
   * @return Data type of fee
   */
  static std::string GetFeeFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of fee field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFeeString(  // line separate
      const DecodePsbtResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fee_);
  }
  /**
   * @brief Set json object to fee field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFeeString(  // line separate
      DecodePsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fee_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodePsbtResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodePsbtResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodePsbtResponseMapTable =
    cfd::core::JsonTableMap<DecodePsbtResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodePsbtResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodePsbtResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  DecodeRawTransactionResponse tx_;  // NOLINT
  /**
   * @brief JsonAPI(tx_hex) value
   */
  std::string tx_hex_ = "";
  /**
   * @brief JsonAPI(xpubs) value
   */
  JsonObjectVector<PsbtGlobalXpub, PsbtGlobalXpubStruct> xpubs_;  // NOLINT
  /**
   * @brief JsonAPI(version) value
   */
  uint32_t version_ = 0;
  /**
   * @brief JsonAPI(unknown) value
   */
  JsonObjectVector<PsbtMapData, PsbtMapDataStruct> unknown_;  // NOLINT
  /**
   * @brief JsonAPI(inputs) value
   */
  JsonObjectVector<DecodePsbtInput, DecodePsbtInputStruct> inputs_;  // NOLINT
  /**
   * @brief JsonAPI(outputs) value
   */
  JsonObjectVector<DecodePsbtOutput, DecodePsbtOutputStruct> outputs_;  // NOLINT
  /**
   * @brief JsonAPI(fee) value
   */
  int64_t fee_ = 0;
};

// ------------------------------------------------------------------------
// DecodeRawTransactionRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (DecodeRawTransactionRequest) class
 */
class DecodeRawTransactionRequest
  : public cfd::core::JsonClassBase<DecodeRawTransactionRequest> {
 public:
  DecodeRawTransactionRequest() {
    CollectFieldName();
  }
  virtual ~DecodeRawTransactionRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const DecodeRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      DecodeRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const DecodeRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      DecodeRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of iswitness
   * @return iswitness
   */
  bool GetIswitness() const {
    return iswitness_;
  }
  /**
   * @brief Set to iswitness
   * @param[in] iswitness    setting value.
   */
  void SetIswitness(  // line separate
    const bool& iswitness) {  // NOLINT
    this->iswitness_ = iswitness;
  }
  /**
   * @brief Get data type of iswitness
   * @return Data type of iswitness
   */
  static std::string GetIswitnessFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of iswitness field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIswitnessString(  // line separate
      const DecodeRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.iswitness_);
  }
  /**
   * @brief Set json object to iswitness field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIswitnessString(  // line separate
      DecodeRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.iswitness_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const DecodeRawTransactionRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  DecodeRawTransactionRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using DecodeRawTransactionRequestMapTable =
    cfd::core::JsonTableMap<DecodeRawTransactionRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const DecodeRawTransactionRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static DecodeRawTransactionRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(iswitness) value
   */
  bool iswitness_ = true;
};

// ------------------------------------------------------------------------
// ElementsAddRawTransactionRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsAddRawTransactionRequest) class
 */
class ElementsAddRawTransactionRequest
  : public cfd::core::JsonClassBase<ElementsAddRawTransactionRequest> {
 public:
  ElementsAddRawTransactionRequest() {
    CollectFieldName();
  }
  virtual ~ElementsAddRawTransactionRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const ElementsAddRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      ElementsAddRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of txins.
   * @return txins
   */
  JsonObjectVector<TxInRequest, TxInRequestStruct>& GetTxins() {  // NOLINT
    return txins_;
  }
  /**
   * @brief Set to txins.
   * @param[in] txins    setting value.
   */
  void SetTxins(  // line separate
      const JsonObjectVector<TxInRequest, TxInRequestStruct>& txins) {  // NOLINT
    this->txins_ = txins;
  }
  /**
   * @brief Get data type of txins.
   * @return Data type of txins.
   */
  static std::string GetTxinsFieldType() {
    return "JsonObjectVector<TxInRequest, TxInRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txins field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinsString(  // line separate
      const ElementsAddRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txins_.Serialize();
  }
  /**
   * @brief Set json object to txins field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinsString(  // line separate
      ElementsAddRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txins_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of peginTxins.
   * @return peginTxins
   */
  JsonObjectVector<ElementsPeginTxIn, ElementsPeginTxInStruct>& GetPeginTxins() {  // NOLINT
    return pegin_txins_;
  }
  /**
   * @brief Set to peginTxins.
   * @param[in] pegin_txins    setting value.
   */
  void SetPeginTxins(  // line separate
      const JsonObjectVector<ElementsPeginTxIn, ElementsPeginTxInStruct>& pegin_txins) {  // NOLINT
    this->pegin_txins_ = pegin_txins;
  }
  /**
   * @brief Get data type of peginTxins.
   * @return Data type of peginTxins.
   */
  static std::string GetPeginTxinsFieldType() {
    return "JsonObjectVector<ElementsPeginTxIn, ElementsPeginTxInStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of peginTxins field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetPeginTxinsString(  // line separate
      const ElementsAddRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.pegin_txins_.Serialize();
  }
  /**
   * @brief Set json object to peginTxins field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetPeginTxinsString(  // line separate
      ElementsAddRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.pegin_txins_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of txouts.
   * @return txouts
   */
  JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>& GetTxouts() {  // NOLINT
    return txouts_;
  }
  /**
   * @brief Set to txouts.
   * @param[in] txouts    setting value.
   */
  void SetTxouts(  // line separate
      const JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>& txouts) {  // NOLINT
    this->txouts_ = txouts;
  }
  /**
   * @brief Get data type of txouts.
   * @return Data type of txouts.
   */
  static std::string GetTxoutsFieldType() {
    return "JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txouts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxoutsString(  // line separate
      const ElementsAddRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txouts_.Serialize();
  }
  /**
   * @brief Set json object to txouts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxoutsString(  // line separate
      ElementsAddRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txouts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of destroyAmountTxouts.
   * @return destroyAmountTxouts
   */
  JsonObjectVector<ElementsDestroyAmount, ElementsDestroyAmountStruct>& GetDestroyAmountTxouts() {  // NOLINT
    return destroy_amount_txouts_;
  }
  /**
   * @brief Set to destroyAmountTxouts.
   * @param[in] destroy_amount_txouts    setting value.
   */
  void SetDestroyAmountTxouts(  // line separate
      const JsonObjectVector<ElementsDestroyAmount, ElementsDestroyAmountStruct>& destroy_amount_txouts) {  // NOLINT
    this->destroy_amount_txouts_ = destroy_amount_txouts;
  }
  /**
   * @brief Get data type of destroyAmountTxouts.
   * @return Data type of destroyAmountTxouts.
   */
  static std::string GetDestroyAmountTxoutsFieldType() {
    return "JsonObjectVector<ElementsDestroyAmount, ElementsDestroyAmountStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of destroyAmountTxouts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetDestroyAmountTxoutsString(  // line separate
      const ElementsAddRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.destroy_amount_txouts_.Serialize();
  }
  /**
   * @brief Set json object to destroyAmountTxouts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetDestroyAmountTxoutsString(  // line separate
      ElementsAddRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.destroy_amount_txouts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of pegoutTxouts.
   * @return pegoutTxouts
   */
  JsonObjectVector<ElementsPegoutTxOut, ElementsPegoutTxOutStruct>& GetPegoutTxouts() {  // NOLINT
    return pegout_txouts_;
  }
  /**
   * @brief Set to pegoutTxouts.
   * @param[in] pegout_txouts    setting value.
   */
  void SetPegoutTxouts(  // line separate
      const JsonObjectVector<ElementsPegoutTxOut, ElementsPegoutTxOutStruct>& pegout_txouts) {  // NOLINT
    this->pegout_txouts_ = pegout_txouts;
  }
  /**
   * @brief Get data type of pegoutTxouts.
   * @return Data type of pegoutTxouts.
   */
  static std::string GetPegoutTxoutsFieldType() {
    return "JsonObjectVector<ElementsPegoutTxOut, ElementsPegoutTxOutStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of pegoutTxouts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetPegoutTxoutsString(  // line separate
      const ElementsAddRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.pegout_txouts_.Serialize();
  }
  /**
   * @brief Set json object to pegoutTxouts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetPegoutTxoutsString(  // line separate
      ElementsAddRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.pegout_txouts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of fee.
   * @return fee
   */
  ElementsTxOutFee& GetFee() {  // NOLINT
    return fee_;
  }
  /**
   * @brief Set to fee.
   * @param[in] fee    setting value.
   */
  void SetFee(  // line separate
      const ElementsTxOutFee& fee) {  // NOLINT
    this->fee_ = fee;
  }
  /**
   * @brief Get data type of fee.
   * @return Data type of fee.
   */
  static std::string GetFeeFieldType() {
    return "ElementsTxOutFee";  // NOLINT
  }
  /**
   * @brief Get json string of fee field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetFeeString(  // line separate
      const ElementsAddRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.fee_.Serialize();
  }
  /**
   * @brief Set json object to fee field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetFeeString(  // line separate
      ElementsAddRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.fee_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of isRandomSortTxOut
   * @return isRandomSortTxOut
   */
  bool GetIsRandomSortTxOut() const {
    return is_random_sort_tx_out_;
  }
  /**
   * @brief Set to isRandomSortTxOut
   * @param[in] is_random_sort_tx_out    setting value.
   */
  void SetIsRandomSortTxOut(  // line separate
    const bool& is_random_sort_tx_out) {  // NOLINT
    this->is_random_sort_tx_out_ = is_random_sort_tx_out;
  }
  /**
   * @brief Get data type of isRandomSortTxOut
   * @return Data type of isRandomSortTxOut
   */
  static std::string GetIsRandomSortTxOutFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isRandomSortTxOut field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsRandomSortTxOutString(  // line separate
      const ElementsAddRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_random_sort_tx_out_);
  }
  /**
   * @brief Set json object to isRandomSortTxOut field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsRandomSortTxOutString(  // line separate
      ElementsAddRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_random_sort_tx_out_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsAddRawTransactionRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsAddRawTransactionRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsAddRawTransactionRequestMapTable =
    cfd::core::JsonTableMap<ElementsAddRawTransactionRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsAddRawTransactionRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsAddRawTransactionRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(txins) value
   */
  JsonObjectVector<TxInRequest, TxInRequestStruct> txins_;  // NOLINT
  /**
   * @brief JsonAPI(peginTxins) value
   */
  JsonObjectVector<ElementsPeginTxIn, ElementsPeginTxInStruct> pegin_txins_;  // NOLINT
  /**
   * @brief JsonAPI(txouts) value
   */
  JsonObjectVector<ElementsTxOut, ElementsTxOutStruct> txouts_;  // NOLINT
  /**
   * @brief JsonAPI(destroyAmountTxouts) value
   */
  JsonObjectVector<ElementsDestroyAmount, ElementsDestroyAmountStruct> destroy_amount_txouts_;  // NOLINT
  /**
   * @brief JsonAPI(pegoutTxouts) value
   */
  JsonObjectVector<ElementsPegoutTxOut, ElementsPegoutTxOutStruct> pegout_txouts_;  // NOLINT
  /**
   * @brief JsonAPI(fee) value
   */
  ElementsTxOutFee fee_;  // NOLINT
  /**
   * @brief JsonAPI(isRandomSortTxOut) value
   */
  bool is_random_sort_tx_out_ = false;
};

// ------------------------------------------------------------------------
// ElementsAddRawTransactionResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsAddRawTransactionResponse) class
 */
class ElementsAddRawTransactionResponse
  : public cfd::core::JsonClassBase<ElementsAddRawTransactionResponse> {
 public:
  ElementsAddRawTransactionResponse() {
    CollectFieldName();
  }
  virtual ~ElementsAddRawTransactionResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const ElementsAddRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      ElementsAddRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of btcAddresses.
   * @return btcAddresses
   */
  JsonValueVector<std::string>& GetBtcAddresses() {  // NOLINT
    return btc_addresses_;
  }
  /**
   * @brief Set to btcAddresses.
   * @param[in] btc_addresses    setting value.
   */
  void SetBtcAddresses(  // line separate
      const JsonValueVector<std::string>& btc_addresses) {  // NOLINT
    this->btc_addresses_ = btc_addresses;
  }
  /**
   * @brief Get data type of btcAddresses.
   * @return Data type of btcAddresses.
   */
  static std::string GetBtcAddressesFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of btcAddresses field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetBtcAddressesString(  // line separate
      const ElementsAddRawTransactionResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.btc_addresses_.Serialize();
  }
  /**
   * @brief Set json object to btcAddresses field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetBtcAddressesString(  // line separate
      ElementsAddRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.btc_addresses_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsAddRawTransactionResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsAddRawTransactionResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsAddRawTransactionResponseMapTable =
    cfd::core::JsonTableMap<ElementsAddRawTransactionResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsAddRawTransactionResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsAddRawTransactionResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(btcAddresses) value
   */
  JsonValueVector<std::string> btc_addresses_;  // NOLINT
};

// ------------------------------------------------------------------------
// CreateDestroyAmountRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateDestroyAmountRequest) class
 */
class CreateDestroyAmountRequest
  : public cfd::core::JsonClassBase<CreateDestroyAmountRequest> {
 public:
  CreateDestroyAmountRequest() {
    CollectFieldName();
  }
  virtual ~CreateDestroyAmountRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of version
   * @return version
   */
  uint32_t GetVersion() const {
    return version_;
  }
  /**
   * @brief Set to version
   * @param[in] version    setting value.
   */
  void SetVersion(  // line separate
    const uint32_t& version) {  // NOLINT
    this->version_ = version;
  }
  /**
   * @brief Get data type of version
   * @return Data type of version
   */
  static std::string GetVersionFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of version field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVersionString(  // line separate
      const CreateDestroyAmountRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.version_);
  }
  /**
   * @brief Set json object to version field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVersionString(  // line separate
      CreateDestroyAmountRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.version_, json_value);
  }

  /**
   * @brief Get of locktime
   * @return locktime
   */
  uint32_t GetLocktime() const {
    return locktime_;
  }
  /**
   * @brief Set to locktime
   * @param[in] locktime    setting value.
   */
  void SetLocktime(  // line separate
    const uint32_t& locktime) {  // NOLINT
    this->locktime_ = locktime;
  }
  /**
   * @brief Get data type of locktime
   * @return Data type of locktime
   */
  static std::string GetLocktimeFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of locktime field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLocktimeString(  // line separate
      const CreateDestroyAmountRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locktime_);
  }
  /**
   * @brief Set json object to locktime field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLocktimeString(  // line separate
      CreateDestroyAmountRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locktime_, json_value);
  }

  /**
   * @brief Get of txins.
   * @return txins
   */
  JsonObjectVector<TxInRequest, TxInRequestStruct>& GetTxins() {  // NOLINT
    return txins_;
  }
  /**
   * @brief Set to txins.
   * @param[in] txins    setting value.
   */
  void SetTxins(  // line separate
      const JsonObjectVector<TxInRequest, TxInRequestStruct>& txins) {  // NOLINT
    this->txins_ = txins;
  }
  /**
   * @brief Get data type of txins.
   * @return Data type of txins.
   */
  static std::string GetTxinsFieldType() {
    return "JsonObjectVector<TxInRequest, TxInRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txins field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinsString(  // line separate
      const CreateDestroyAmountRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txins_.Serialize();
  }
  /**
   * @brief Set json object to txins field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinsString(  // line separate
      CreateDestroyAmountRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txins_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of txouts.
   * @return txouts
   */
  JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>& GetTxouts() {  // NOLINT
    return txouts_;
  }
  /**
   * @brief Set to txouts.
   * @param[in] txouts    setting value.
   */
  void SetTxouts(  // line separate
      const JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>& txouts) {  // NOLINT
    this->txouts_ = txouts;
  }
  /**
   * @brief Get data type of txouts.
   * @return Data type of txouts.
   */
  static std::string GetTxoutsFieldType() {
    return "JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txouts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxoutsString(  // line separate
      const CreateDestroyAmountRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txouts_.Serialize();
  }
  /**
   * @brief Set json object to txouts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxoutsString(  // line separate
      CreateDestroyAmountRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txouts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of destroy.
   * @return destroy
   */
  ElementsDestroyAmount& GetDestroy() {  // NOLINT
    return destroy_;
  }
  /**
   * @brief Set to destroy.
   * @param[in] destroy    setting value.
   */
  void SetDestroy(  // line separate
      const ElementsDestroyAmount& destroy) {  // NOLINT
    this->destroy_ = destroy;
  }
  /**
   * @brief Get data type of destroy.
   * @return Data type of destroy.
   */
  static std::string GetDestroyFieldType() {
    return "ElementsDestroyAmount";  // NOLINT
  }
  /**
   * @brief Get json string of destroy field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetDestroyString(  // line separate
      const CreateDestroyAmountRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.destroy_.Serialize();
  }
  /**
   * @brief Set json object to destroy field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetDestroyString(  // line separate
      CreateDestroyAmountRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.destroy_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of fee.
   * @return fee
   */
  ElementsTxOutFee& GetFee() {  // NOLINT
    return fee_;
  }
  /**
   * @brief Set to fee.
   * @param[in] fee    setting value.
   */
  void SetFee(  // line separate
      const ElementsTxOutFee& fee) {  // NOLINT
    this->fee_ = fee;
  }
  /**
   * @brief Get data type of fee.
   * @return Data type of fee.
   */
  static std::string GetFeeFieldType() {
    return "ElementsTxOutFee";  // NOLINT
  }
  /**
   * @brief Get json string of fee field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetFeeString(  // line separate
      const CreateDestroyAmountRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.fee_.Serialize();
  }
  /**
   * @brief Set json object to fee field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetFeeString(  // line separate
      CreateDestroyAmountRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.fee_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateDestroyAmountRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateDestroyAmountRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateDestroyAmountRequestMapTable =
    cfd::core::JsonTableMap<CreateDestroyAmountRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateDestroyAmountRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateDestroyAmountRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(version) value
   */
  uint32_t version_ = 2;
  /**
   * @brief JsonAPI(locktime) value
   */
  uint32_t locktime_ = 0;
  /**
   * @brief JsonAPI(txins) value
   */
  JsonObjectVector<TxInRequest, TxInRequestStruct> txins_;  // NOLINT
  /**
   * @brief JsonAPI(txouts) value
   */
  JsonObjectVector<ElementsTxOut, ElementsTxOutStruct> txouts_;  // NOLINT
  /**
   * @brief JsonAPI(destroy) value
   */
  ElementsDestroyAmount destroy_;  // NOLINT
  /**
   * @brief JsonAPI(fee) value
   */
  ElementsTxOutFee fee_;  // NOLINT
};

// ------------------------------------------------------------------------
// CreatePegInAddressRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreatePegInAddressRequest) class
 */
class CreatePegInAddressRequest
  : public cfd::core::JsonClassBase<CreatePegInAddressRequest> {
 public:
  CreatePegInAddressRequest() {
    CollectFieldName();
  }
  virtual ~CreatePegInAddressRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of fedpegscript
   * @return fedpegscript
   */
  std::string GetFedpegscript() const {
    return fedpegscript_;
  }
  /**
   * @brief Set to fedpegscript
   * @param[in] fedpegscript    setting value.
   */
  void SetFedpegscript(  // line separate
    const std::string& fedpegscript) {  // NOLINT
    this->fedpegscript_ = fedpegscript;
  }
  /**
   * @brief Get data type of fedpegscript
   * @return Data type of fedpegscript
   */
  static std::string GetFedpegscriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of fedpegscript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFedpegscriptString(  // line separate
      const CreatePegInAddressRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fedpegscript_);
  }
  /**
   * @brief Set json object to fedpegscript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFedpegscriptString(  // line separate
      CreatePegInAddressRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fedpegscript_, json_value);
  }

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const CreatePegInAddressRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      CreatePegInAddressRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Get of redeemScript
   * @return redeemScript
   */
  std::string GetRedeemScript() const {
    return redeem_script_;
  }
  /**
   * @brief Set to redeemScript
   * @param[in] redeem_script    setting value.
   */
  void SetRedeemScript(  // line separate
    const std::string& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeemScript
   * @return Data type of redeemScript
   */
  static std::string GetRedeemScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of redeemScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRedeemScriptString(  // line separate
      const CreatePegInAddressRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.redeem_script_);
  }
  /**
   * @brief Set json object to redeemScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRedeemScriptString(  // line separate
      CreatePegInAddressRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.redeem_script_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const CreatePegInAddressRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      CreatePegInAddressRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const CreatePegInAddressRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      CreatePegInAddressRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreatePegInAddressRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreatePegInAddressRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreatePegInAddressRequestMapTable =
    cfd::core::JsonTableMap<CreatePegInAddressRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreatePegInAddressRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreatePegInAddressRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(fedpegscript) value
   */
  std::string fedpegscript_ = "";
  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
  /**
   * @brief JsonAPI(redeemScript) value
   */
  std::string redeem_script_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "p2sh-p2wsh";
};

// ------------------------------------------------------------------------
// CreatePegInAddressResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreatePegInAddressResponse) class
 */
class CreatePegInAddressResponse
  : public cfd::core::JsonClassBase<CreatePegInAddressResponse> {
 public:
  CreatePegInAddressResponse() {
    CollectFieldName();
  }
  virtual ~CreatePegInAddressResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of mainchainAddress
   * @return mainchainAddress
   */
  std::string GetMainchainAddress() const {
    return mainchain_address_;
  }
  /**
   * @brief Set to mainchainAddress
   * @param[in] mainchain_address    setting value.
   */
  void SetMainchainAddress(  // line separate
    const std::string& mainchain_address) {  // NOLINT
    this->mainchain_address_ = mainchain_address;
  }
  /**
   * @brief Get data type of mainchainAddress
   * @return Data type of mainchainAddress
   */
  static std::string GetMainchainAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of mainchainAddress field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMainchainAddressString(  // line separate
      const CreatePegInAddressResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.mainchain_address_);
  }
  /**
   * @brief Set json object to mainchainAddress field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMainchainAddressString(  // line separate
      CreatePegInAddressResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.mainchain_address_, json_value);
  }

  /**
   * @brief Get of claimScript
   * @return claimScript
   */
  std::string GetClaimScript() const {
    return claim_script_;
  }
  /**
   * @brief Set to claimScript
   * @param[in] claim_script    setting value.
   */
  void SetClaimScript(  // line separate
    const std::string& claim_script) {  // NOLINT
    this->claim_script_ = claim_script;
  }
  /**
   * @brief Get data type of claimScript
   * @return Data type of claimScript
   */
  static std::string GetClaimScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of claimScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetClaimScriptString(  // line separate
      const CreatePegInAddressResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.claim_script_);
  }
  /**
   * @brief Set json object to claimScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetClaimScriptString(  // line separate
      CreatePegInAddressResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.claim_script_, json_value);
  }

  /**
   * @brief Get of tweakFedpegscript
   * @return tweakFedpegscript
   */
  std::string GetTweakFedpegscript() const {
    return tweak_fedpegscript_;
  }
  /**
   * @brief Set to tweakFedpegscript
   * @param[in] tweak_fedpegscript    setting value.
   */
  void SetTweakFedpegscript(  // line separate
    const std::string& tweak_fedpegscript) {  // NOLINT
    this->tweak_fedpegscript_ = tweak_fedpegscript;
  }
  /**
   * @brief Get data type of tweakFedpegscript
   * @return Data type of tweakFedpegscript
   */
  static std::string GetTweakFedpegscriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tweakFedpegscript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTweakFedpegscriptString(  // line separate
      const CreatePegInAddressResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tweak_fedpegscript_);
  }
  /**
   * @brief Set json object to tweakFedpegscript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTweakFedpegscriptString(  // line separate
      CreatePegInAddressResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tweak_fedpegscript_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreatePegInAddressResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreatePegInAddressResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreatePegInAddressResponseMapTable =
    cfd::core::JsonTableMap<CreatePegInAddressResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreatePegInAddressResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreatePegInAddressResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(mainchainAddress) value
   */
  std::string mainchain_address_ = "";
  /**
   * @brief JsonAPI(claimScript) value
   */
  std::string claim_script_ = "";
  /**
   * @brief JsonAPI(tweakFedpegscript) value
   */
  std::string tweak_fedpegscript_ = "";
};

// ------------------------------------------------------------------------
// CreateRawPeginRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateRawPeginRequest) class
 */
class CreateRawPeginRequest
  : public cfd::core::JsonClassBase<CreateRawPeginRequest> {
 public:
  CreateRawPeginRequest() {
    CollectFieldName();
  }
  virtual ~CreateRawPeginRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of version
   * @return version
   */
  uint32_t GetVersion() const {
    return version_;
  }
  /**
   * @brief Set to version
   * @param[in] version    setting value.
   */
  void SetVersion(  // line separate
    const uint32_t& version) {  // NOLINT
    this->version_ = version;
  }
  /**
   * @brief Get data type of version
   * @return Data type of version
   */
  static std::string GetVersionFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of version field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVersionString(  // line separate
      const CreateRawPeginRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.version_);
  }
  /**
   * @brief Set json object to version field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVersionString(  // line separate
      CreateRawPeginRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.version_, json_value);
  }

  /**
   * @brief Get of locktime
   * @return locktime
   */
  uint32_t GetLocktime() const {
    return locktime_;
  }
  /**
   * @brief Set to locktime
   * @param[in] locktime    setting value.
   */
  void SetLocktime(  // line separate
    const uint32_t& locktime) {  // NOLINT
    this->locktime_ = locktime;
  }
  /**
   * @brief Get data type of locktime
   * @return Data type of locktime
   */
  static std::string GetLocktimeFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of locktime field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLocktimeString(  // line separate
      const CreateRawPeginRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locktime_);
  }
  /**
   * @brief Set json object to locktime field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLocktimeString(  // line separate
      CreateRawPeginRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locktime_, json_value);
  }

  /**
   * @brief Get of txins.
   * @return txins
   */
  JsonObjectVector<ElementsPeginTxIn, ElementsPeginTxInStruct>& GetTxins() {  // NOLINT
    return txins_;
  }
  /**
   * @brief Set to txins.
   * @param[in] txins    setting value.
   */
  void SetTxins(  // line separate
      const JsonObjectVector<ElementsPeginTxIn, ElementsPeginTxInStruct>& txins) {  // NOLINT
    this->txins_ = txins;
  }
  /**
   * @brief Get data type of txins.
   * @return Data type of txins.
   */
  static std::string GetTxinsFieldType() {
    return "JsonObjectVector<ElementsPeginTxIn, ElementsPeginTxInStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txins field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinsString(  // line separate
      const CreateRawPeginRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txins_.Serialize();
  }
  /**
   * @brief Set json object to txins field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinsString(  // line separate
      CreateRawPeginRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txins_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of txouts.
   * @return txouts
   */
  JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>& GetTxouts() {  // NOLINT
    return txouts_;
  }
  /**
   * @brief Set to txouts.
   * @param[in] txouts    setting value.
   */
  void SetTxouts(  // line separate
      const JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>& txouts) {  // NOLINT
    this->txouts_ = txouts;
  }
  /**
   * @brief Get data type of txouts.
   * @return Data type of txouts.
   */
  static std::string GetTxoutsFieldType() {
    return "JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txouts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxoutsString(  // line separate
      const CreateRawPeginRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txouts_.Serialize();
  }
  /**
   * @brief Set json object to txouts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxoutsString(  // line separate
      CreateRawPeginRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txouts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of fee.
   * @return fee
   */
  ElementsTxOutFee& GetFee() {  // NOLINT
    return fee_;
  }
  /**
   * @brief Set to fee.
   * @param[in] fee    setting value.
   */
  void SetFee(  // line separate
      const ElementsTxOutFee& fee) {  // NOLINT
    this->fee_ = fee;
  }
  /**
   * @brief Get data type of fee.
   * @return Data type of fee.
   */
  static std::string GetFeeFieldType() {
    return "ElementsTxOutFee";  // NOLINT
  }
  /**
   * @brief Get json string of fee field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetFeeString(  // line separate
      const CreateRawPeginRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.fee_.Serialize();
  }
  /**
   * @brief Set json object to fee field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetFeeString(  // line separate
      CreateRawPeginRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.fee_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of isRandomSortTxOut
   * @return isRandomSortTxOut
   */
  bool GetIsRandomSortTxOut() const {
    return is_random_sort_tx_out_;
  }
  /**
   * @brief Set to isRandomSortTxOut
   * @param[in] is_random_sort_tx_out    setting value.
   */
  void SetIsRandomSortTxOut(  // line separate
    const bool& is_random_sort_tx_out) {  // NOLINT
    this->is_random_sort_tx_out_ = is_random_sort_tx_out;
  }
  /**
   * @brief Get data type of isRandomSortTxOut
   * @return Data type of isRandomSortTxOut
   */
  static std::string GetIsRandomSortTxOutFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isRandomSortTxOut field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsRandomSortTxOutString(  // line separate
      const CreateRawPeginRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_random_sort_tx_out_);
  }
  /**
   * @brief Set json object to isRandomSortTxOut field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsRandomSortTxOutString(  // line separate
      CreateRawPeginRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_random_sort_tx_out_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateRawPeginRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateRawPeginRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateRawPeginRequestMapTable =
    cfd::core::JsonTableMap<CreateRawPeginRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateRawPeginRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateRawPeginRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(version) value
   */
  uint32_t version_ = 2;
  /**
   * @brief JsonAPI(locktime) value
   */
  uint32_t locktime_ = 0;
  /**
   * @brief JsonAPI(txins) value
   */
  JsonObjectVector<ElementsPeginTxIn, ElementsPeginTxInStruct> txins_;  // NOLINT
  /**
   * @brief JsonAPI(txouts) value
   */
  JsonObjectVector<ElementsTxOut, ElementsTxOutStruct> txouts_;  // NOLINT
  /**
   * @brief JsonAPI(fee) value
   */
  ElementsTxOutFee fee_;  // NOLINT
  /**
   * @brief JsonAPI(isRandomSortTxOut) value
   */
  bool is_random_sort_tx_out_ = false;
};

// ------------------------------------------------------------------------
// CreateRawPegoutRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateRawPegoutRequest) class
 */
class CreateRawPegoutRequest
  : public cfd::core::JsonClassBase<CreateRawPegoutRequest> {
 public:
  CreateRawPegoutRequest() {
    CollectFieldName();
  }
  virtual ~CreateRawPegoutRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of version
   * @return version
   */
  uint32_t GetVersion() const {
    return version_;
  }
  /**
   * @brief Set to version
   * @param[in] version    setting value.
   */
  void SetVersion(  // line separate
    const uint32_t& version) {  // NOLINT
    this->version_ = version;
  }
  /**
   * @brief Get data type of version
   * @return Data type of version
   */
  static std::string GetVersionFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of version field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVersionString(  // line separate
      const CreateRawPegoutRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.version_);
  }
  /**
   * @brief Set json object to version field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVersionString(  // line separate
      CreateRawPegoutRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.version_, json_value);
  }

  /**
   * @brief Get of locktime
   * @return locktime
   */
  uint32_t GetLocktime() const {
    return locktime_;
  }
  /**
   * @brief Set to locktime
   * @param[in] locktime    setting value.
   */
  void SetLocktime(  // line separate
    const uint32_t& locktime) {  // NOLINT
    this->locktime_ = locktime;
  }
  /**
   * @brief Get data type of locktime
   * @return Data type of locktime
   */
  static std::string GetLocktimeFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of locktime field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLocktimeString(  // line separate
      const CreateRawPegoutRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locktime_);
  }
  /**
   * @brief Set json object to locktime field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLocktimeString(  // line separate
      CreateRawPegoutRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locktime_, json_value);
  }

  /**
   * @brief Get of txins.
   * @return txins
   */
  JsonObjectVector<TxInRequest, TxInRequestStruct>& GetTxins() {  // NOLINT
    return txins_;
  }
  /**
   * @brief Set to txins.
   * @param[in] txins    setting value.
   */
  void SetTxins(  // line separate
      const JsonObjectVector<TxInRequest, TxInRequestStruct>& txins) {  // NOLINT
    this->txins_ = txins;
  }
  /**
   * @brief Get data type of txins.
   * @return Data type of txins.
   */
  static std::string GetTxinsFieldType() {
    return "JsonObjectVector<TxInRequest, TxInRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txins field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinsString(  // line separate
      const CreateRawPegoutRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txins_.Serialize();
  }
  /**
   * @brief Set json object to txins field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinsString(  // line separate
      CreateRawPegoutRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txins_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of txouts.
   * @return txouts
   */
  JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>& GetTxouts() {  // NOLINT
    return txouts_;
  }
  /**
   * @brief Set to txouts.
   * @param[in] txouts    setting value.
   */
  void SetTxouts(  // line separate
      const JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>& txouts) {  // NOLINT
    this->txouts_ = txouts;
  }
  /**
   * @brief Get data type of txouts.
   * @return Data type of txouts.
   */
  static std::string GetTxoutsFieldType() {
    return "JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txouts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxoutsString(  // line separate
      const CreateRawPegoutRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txouts_.Serialize();
  }
  /**
   * @brief Set json object to txouts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxoutsString(  // line separate
      CreateRawPegoutRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txouts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of pegout.
   * @return pegout
   */
  ElementsPegoutTxOut& GetPegout() {  // NOLINT
    return pegout_;
  }
  /**
   * @brief Set to pegout.
   * @param[in] pegout    setting value.
   */
  void SetPegout(  // line separate
      const ElementsPegoutTxOut& pegout) {  // NOLINT
    this->pegout_ = pegout;
  }
  /**
   * @brief Get data type of pegout.
   * @return Data type of pegout.
   */
  static std::string GetPegoutFieldType() {
    return "ElementsPegoutTxOut";  // NOLINT
  }
  /**
   * @brief Get json string of pegout field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetPegoutString(  // line separate
      const CreateRawPegoutRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.pegout_.Serialize();
  }
  /**
   * @brief Set json object to pegout field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetPegoutString(  // line separate
      CreateRawPegoutRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.pegout_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of fee.
   * @return fee
   */
  ElementsTxOutFee& GetFee() {  // NOLINT
    return fee_;
  }
  /**
   * @brief Set to fee.
   * @param[in] fee    setting value.
   */
  void SetFee(  // line separate
      const ElementsTxOutFee& fee) {  // NOLINT
    this->fee_ = fee;
  }
  /**
   * @brief Get data type of fee.
   * @return Data type of fee.
   */
  static std::string GetFeeFieldType() {
    return "ElementsTxOutFee";  // NOLINT
  }
  /**
   * @brief Get json string of fee field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetFeeString(  // line separate
      const CreateRawPegoutRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.fee_.Serialize();
  }
  /**
   * @brief Set json object to fee field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetFeeString(  // line separate
      CreateRawPegoutRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.fee_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateRawPegoutRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateRawPegoutRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateRawPegoutRequestMapTable =
    cfd::core::JsonTableMap<CreateRawPegoutRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateRawPegoutRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateRawPegoutRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(version) value
   */
  uint32_t version_ = 2;
  /**
   * @brief JsonAPI(locktime) value
   */
  uint32_t locktime_ = 0;
  /**
   * @brief JsonAPI(txins) value
   */
  JsonObjectVector<TxInRequest, TxInRequestStruct> txins_;  // NOLINT
  /**
   * @brief JsonAPI(txouts) value
   */
  JsonObjectVector<ElementsTxOut, ElementsTxOutStruct> txouts_;  // NOLINT
  /**
   * @brief JsonAPI(pegout) value
   */
  ElementsPegoutTxOut pegout_;  // NOLINT
  /**
   * @brief JsonAPI(fee) value
   */
  ElementsTxOutFee fee_;  // NOLINT
};

// ------------------------------------------------------------------------
// CreateRawPegoutResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateRawPegoutResponse) class
 */
class CreateRawPegoutResponse
  : public cfd::core::JsonClassBase<CreateRawPegoutResponse> {
 public:
  CreateRawPegoutResponse() {
    CollectFieldName();
  }
  virtual ~CreateRawPegoutResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const CreateRawPegoutResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      CreateRawPegoutResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of btcAddress
   * @return btcAddress
   */
  std::string GetBtcAddress() const {
    return btc_address_;
  }
  /**
   * @brief Set to btcAddress
   * @param[in] btc_address    setting value.
   */
  void SetBtcAddress(  // line separate
    const std::string& btc_address) {  // NOLINT
    this->btc_address_ = btc_address;
  }
  /**
   * @brief Get data type of btcAddress
   * @return Data type of btcAddress
   */
  static std::string GetBtcAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of btcAddress field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBtcAddressString(  // line separate
      const CreateRawPegoutResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.btc_address_);
  }
  /**
   * @brief Set json object to btcAddress field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBtcAddressString(  // line separate
      CreateRawPegoutResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.btc_address_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateRawPegoutResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateRawPegoutResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateRawPegoutResponseMapTable =
    cfd::core::JsonTableMap<CreateRawPegoutResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateRawPegoutResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateRawPegoutResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(btcAddress) value
   */
  std::string btc_address_ = "";
};

// ------------------------------------------------------------------------
// ElementsCreateRawTransactionRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsCreateRawTransactionRequest) class
 */
class ElementsCreateRawTransactionRequest
  : public cfd::core::JsonClassBase<ElementsCreateRawTransactionRequest> {
 public:
  ElementsCreateRawTransactionRequest() {
    CollectFieldName();
  }
  virtual ~ElementsCreateRawTransactionRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of version
   * @return version
   */
  uint32_t GetVersion() const {
    return version_;
  }
  /**
   * @brief Set to version
   * @param[in] version    setting value.
   */
  void SetVersion(  // line separate
    const uint32_t& version) {  // NOLINT
    this->version_ = version;
  }
  /**
   * @brief Get data type of version
   * @return Data type of version
   */
  static std::string GetVersionFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of version field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVersionString(  // line separate
      const ElementsCreateRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.version_);
  }
  /**
   * @brief Set json object to version field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVersionString(  // line separate
      ElementsCreateRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.version_, json_value);
  }

  /**
   * @brief Get of locktime
   * @return locktime
   */
  uint32_t GetLocktime() const {
    return locktime_;
  }
  /**
   * @brief Set to locktime
   * @param[in] locktime    setting value.
   */
  void SetLocktime(  // line separate
    const uint32_t& locktime) {  // NOLINT
    this->locktime_ = locktime;
  }
  /**
   * @brief Get data type of locktime
   * @return Data type of locktime
   */
  static std::string GetLocktimeFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of locktime field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLocktimeString(  // line separate
      const ElementsCreateRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locktime_);
  }
  /**
   * @brief Set json object to locktime field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLocktimeString(  // line separate
      ElementsCreateRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locktime_, json_value);
  }

  /**
   * @brief Get of txins.
   * @return txins
   */
  JsonObjectVector<TxInRequest, TxInRequestStruct>& GetTxins() {  // NOLINT
    return txins_;
  }
  /**
   * @brief Set to txins.
   * @param[in] txins    setting value.
   */
  void SetTxins(  // line separate
      const JsonObjectVector<TxInRequest, TxInRequestStruct>& txins) {  // NOLINT
    this->txins_ = txins;
  }
  /**
   * @brief Get data type of txins.
   * @return Data type of txins.
   */
  static std::string GetTxinsFieldType() {
    return "JsonObjectVector<TxInRequest, TxInRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txins field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinsString(  // line separate
      const ElementsCreateRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txins_.Serialize();
  }
  /**
   * @brief Set json object to txins field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinsString(  // line separate
      ElementsCreateRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txins_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of txouts.
   * @return txouts
   */
  JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>& GetTxouts() {  // NOLINT
    return txouts_;
  }
  /**
   * @brief Set to txouts.
   * @param[in] txouts    setting value.
   */
  void SetTxouts(  // line separate
      const JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>& txouts) {  // NOLINT
    this->txouts_ = txouts;
  }
  /**
   * @brief Get data type of txouts.
   * @return Data type of txouts.
   */
  static std::string GetTxoutsFieldType() {
    return "JsonObjectVector<ElementsTxOut, ElementsTxOutStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txouts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxoutsString(  // line separate
      const ElementsCreateRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txouts_.Serialize();
  }
  /**
   * @brief Set json object to txouts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxoutsString(  // line separate
      ElementsCreateRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txouts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of fee.
   * @return fee
   */
  ElementsTxOutFee& GetFee() {  // NOLINT
    return fee_;
  }
  /**
   * @brief Set to fee.
   * @param[in] fee    setting value.
   */
  void SetFee(  // line separate
      const ElementsTxOutFee& fee) {  // NOLINT
    this->fee_ = fee;
  }
  /**
   * @brief Get data type of fee.
   * @return Data type of fee.
   */
  static std::string GetFeeFieldType() {
    return "ElementsTxOutFee";  // NOLINT
  }
  /**
   * @brief Get json string of fee field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetFeeString(  // line separate
      const ElementsCreateRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.fee_.Serialize();
  }
  /**
   * @brief Set json object to fee field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetFeeString(  // line separate
      ElementsCreateRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.fee_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsCreateRawTransactionRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsCreateRawTransactionRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsCreateRawTransactionRequestMapTable =
    cfd::core::JsonTableMap<ElementsCreateRawTransactionRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsCreateRawTransactionRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsCreateRawTransactionRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(version) value
   */
  uint32_t version_ = 2;
  /**
   * @brief JsonAPI(locktime) value
   */
  uint32_t locktime_ = 0;
  /**
   * @brief JsonAPI(txins) value
   */
  JsonObjectVector<TxInRequest, TxInRequestStruct> txins_;  // NOLINT
  /**
   * @brief JsonAPI(txouts) value
   */
  JsonObjectVector<ElementsTxOut, ElementsTxOutStruct> txouts_;  // NOLINT
  /**
   * @brief JsonAPI(fee) value
   */
  ElementsTxOutFee fee_;  // NOLINT
};

// ------------------------------------------------------------------------
// ElementsDecodeRawTransactionRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsDecodeRawTransactionRequest) class
 */
class ElementsDecodeRawTransactionRequest
  : public cfd::core::JsonClassBase<ElementsDecodeRawTransactionRequest> {
 public:
  ElementsDecodeRawTransactionRequest() {
    CollectFieldName();
  }
  virtual ~ElementsDecodeRawTransactionRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const ElementsDecodeRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      ElementsDecodeRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const ElementsDecodeRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      ElementsDecodeRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of mainchainNetwork
   * @return mainchainNetwork
   */
  std::string GetMainchainNetwork() const {
    return mainchain_network_;
  }
  /**
   * @brief Set to mainchainNetwork
   * @param[in] mainchain_network    setting value.
   */
  void SetMainchainNetwork(  // line separate
    const std::string& mainchain_network) {  // NOLINT
    this->mainchain_network_ = mainchain_network;
  }
  /**
   * @brief Get data type of mainchainNetwork
   * @return Data type of mainchainNetwork
   */
  static std::string GetMainchainNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of mainchainNetwork field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMainchainNetworkString(  // line separate
      const ElementsDecodeRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.mainchain_network_);
  }
  /**
   * @brief Set json object to mainchainNetwork field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMainchainNetworkString(  // line separate
      ElementsDecodeRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.mainchain_network_, json_value);
  }

  /**
   * @brief Get of iswitness
   * @return iswitness
   */
  bool GetIswitness() const {
    return iswitness_;
  }
  /**
   * @brief Set to iswitness
   * @param[in] iswitness    setting value.
   */
  void SetIswitness(  // line separate
    const bool& iswitness) {  // NOLINT
    this->iswitness_ = iswitness;
  }
  /**
   * @brief Get data type of iswitness
   * @return Data type of iswitness
   */
  static std::string GetIswitnessFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of iswitness field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIswitnessString(  // line separate
      const ElementsDecodeRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.iswitness_);
  }
  /**
   * @brief Set json object to iswitness field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIswitnessString(  // line separate
      ElementsDecodeRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.iswitness_, json_value);
  }

  /**
   * @brief Get of fullDump
   * @return fullDump
   */
  bool GetFullDump() const {
    return full_dump_;
  }
  /**
   * @brief Set to fullDump
   * @param[in] full_dump    setting value.
   */
  void SetFullDump(  // line separate
    const bool& full_dump) {  // NOLINT
    this->full_dump_ = full_dump;
  }
  /**
   * @brief Get data type of fullDump
   * @return Data type of fullDump
   */
  static std::string GetFullDumpFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of fullDump field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFullDumpString(  // line separate
      const ElementsDecodeRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.full_dump_);
  }
  /**
   * @brief Set json object to fullDump field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFullDumpString(  // line separate
      ElementsDecodeRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.full_dump_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsDecodeRawTransactionRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsDecodeRawTransactionRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsDecodeRawTransactionRequestMapTable =
    cfd::core::JsonTableMap<ElementsDecodeRawTransactionRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsDecodeRawTransactionRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsDecodeRawTransactionRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "liquidv1";
  /**
   * @brief JsonAPI(mainchainNetwork) value
   */
  std::string mainchain_network_ = "";
  /**
   * @brief JsonAPI(iswitness) value
   */
  bool iswitness_ = true;
  /**
   * @brief JsonAPI(fullDump) value
   */
  bool full_dump_ = false;
};

// ------------------------------------------------------------------------
// ElementsDecodeRawTransactionResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ElementsDecodeRawTransactionResponse) class
 */
class ElementsDecodeRawTransactionResponse
  : public cfd::core::JsonClassBase<ElementsDecodeRawTransactionResponse> {
 public:
  ElementsDecodeRawTransactionResponse() {
    CollectFieldName();
  }
  virtual ~ElementsDecodeRawTransactionResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const ElementsDecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      ElementsDecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of hash
   * @return hash
   */
  std::string GetHash() const {
    return hash_;
  }
  /**
   * @brief Set to hash
   * @param[in] hash    setting value.
   */
  void SetHash(  // line separate
    const std::string& hash) {  // NOLINT
    this->hash_ = hash;
  }
  /**
   * @brief Get data type of hash
   * @return Data type of hash
   */
  static std::string GetHashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashString(  // line separate
      const ElementsDecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_);
  }
  /**
   * @brief Set json object to hash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashString(  // line separate
      ElementsDecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_, json_value);
  }

  /**
   * @brief Get of wtxid
   * @return wtxid
   */
  std::string GetWtxid() const {
    return wtxid_;
  }
  /**
   * @brief Set to wtxid
   * @param[in] wtxid    setting value.
   */
  void SetWtxid(  // line separate
    const std::string& wtxid) {  // NOLINT
    this->wtxid_ = wtxid;
  }
  /**
   * @brief Get data type of wtxid
   * @return Data type of wtxid
   */
  static std::string GetWtxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of wtxid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetWtxidString(  // line separate
      const ElementsDecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.wtxid_);
  }
  /**
   * @brief Set json object to wtxid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetWtxidString(  // line separate
      ElementsDecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.wtxid_, json_value);
  }

  /**
   * @brief Get of withash
   * @return withash
   */
  std::string GetWithash() const {
    return withash_;
  }
  /**
   * @brief Set to withash
   * @param[in] withash    setting value.
   */
  void SetWithash(  // line separate
    const std::string& withash) {  // NOLINT
    this->withash_ = withash;
  }
  /**
   * @brief Get data type of withash
   * @return Data type of withash
   */
  static std::string GetWithashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of withash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetWithashString(  // line separate
      const ElementsDecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.withash_);
  }
  /**
   * @brief Set json object to withash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetWithashString(  // line separate
      ElementsDecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.withash_, json_value);
  }

  /**
   * @brief Get of version
   * @return version
   */
  uint32_t GetVersion() const {
    return version_;
  }
  /**
   * @brief Set to version
   * @param[in] version    setting value.
   */
  void SetVersion(  // line separate
    const uint32_t& version) {  // NOLINT
    this->version_ = version;
  }
  /**
   * @brief Get data type of version
   * @return Data type of version
   */
  static std::string GetVersionFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of version field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVersionString(  // line separate
      const ElementsDecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.version_);
  }
  /**
   * @brief Set json object to version field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVersionString(  // line separate
      ElementsDecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.version_, json_value);
  }

  /**
   * @brief Get of size
   * @return size
   */
  uint32_t GetSize() const {
    return size_;
  }
  /**
   * @brief Set to size
   * @param[in] size    setting value.
   */
  void SetSize(  // line separate
    const uint32_t& size) {  // NOLINT
    this->size_ = size;
  }
  /**
   * @brief Get data type of size
   * @return Data type of size
   */
  static std::string GetSizeFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of size field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSizeString(  // line separate
      const ElementsDecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.size_);
  }
  /**
   * @brief Set json object to size field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSizeString(  // line separate
      ElementsDecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.size_, json_value);
  }

  /**
   * @brief Get of vsize
   * @return vsize
   */
  uint32_t GetVsize() const {
    return vsize_;
  }
  /**
   * @brief Set to vsize
   * @param[in] vsize    setting value.
   */
  void SetVsize(  // line separate
    const uint32_t& vsize) {  // NOLINT
    this->vsize_ = vsize;
  }
  /**
   * @brief Get data type of vsize
   * @return Data type of vsize
   */
  static std::string GetVsizeFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vsize field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVsizeString(  // line separate
      const ElementsDecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vsize_);
  }
  /**
   * @brief Set json object to vsize field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVsizeString(  // line separate
      ElementsDecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vsize_, json_value);
  }

  /**
   * @brief Get of weight
   * @return weight
   */
  uint32_t GetWeight() const {
    return weight_;
  }
  /**
   * @brief Set to weight
   * @param[in] weight    setting value.
   */
  void SetWeight(  // line separate
    const uint32_t& weight) {  // NOLINT
    this->weight_ = weight;
  }
  /**
   * @brief Get data type of weight
   * @return Data type of weight
   */
  static std::string GetWeightFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of weight field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetWeightString(  // line separate
      const ElementsDecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.weight_);
  }
  /**
   * @brief Set json object to weight field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetWeightString(  // line separate
      ElementsDecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.weight_, json_value);
  }

  /**
   * @brief Get of locktime
   * @return locktime
   */
  uint32_t GetLocktime() const {
    return locktime_;
  }
  /**
   * @brief Set to locktime
   * @param[in] locktime    setting value.
   */
  void SetLocktime(  // line separate
    const uint32_t& locktime) {  // NOLINT
    this->locktime_ = locktime;
  }
  /**
   * @brief Get data type of locktime
   * @return Data type of locktime
   */
  static std::string GetLocktimeFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of locktime field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLocktimeString(  // line separate
      const ElementsDecodeRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locktime_);
  }
  /**
   * @brief Set json object to locktime field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLocktimeString(  // line separate
      ElementsDecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locktime_, json_value);
  }

  /**
   * @brief Get of vin.
   * @return vin
   */
  JsonObjectVector<ElementsDecodeRawTransactionTxIn, ElementsDecodeRawTransactionTxInStruct>& GetVin() {  // NOLINT
    return vin_;
  }
  /**
   * @brief Set to vin.
   * @param[in] vin    setting value.
   */
  void SetVin(  // line separate
      const JsonObjectVector<ElementsDecodeRawTransactionTxIn, ElementsDecodeRawTransactionTxInStruct>& vin) {  // NOLINT
    this->vin_ = vin;
  }
  /**
   * @brief Get data type of vin.
   * @return Data type of vin.
   */
  static std::string GetVinFieldType() {
    return "JsonObjectVector<ElementsDecodeRawTransactionTxIn, ElementsDecodeRawTransactionTxInStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of vin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetVinString(  // line separate
      const ElementsDecodeRawTransactionResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.vin_.Serialize();
  }
  /**
   * @brief Set json object to vin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetVinString(  // line separate
      ElementsDecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.vin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of vout.
   * @return vout
   */
  JsonObjectVector<ElementsDecodeRawTransactionTxOut, ElementsDecodeRawTransactionTxOutStruct>& GetVout() {  // NOLINT
    return vout_;
  }
  /**
   * @brief Set to vout.
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
      const JsonObjectVector<ElementsDecodeRawTransactionTxOut, ElementsDecodeRawTransactionTxOutStruct>& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout.
   * @return Data type of vout.
   */
  static std::string GetVoutFieldType() {
    return "JsonObjectVector<ElementsDecodeRawTransactionTxOut, ElementsDecodeRawTransactionTxOutStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetVoutString(  // line separate
      const ElementsDecodeRawTransactionResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.vout_.Serialize();
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetVoutString(  // line separate
      ElementsDecodeRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.vout_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ElementsDecodeRawTransactionResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ElementsDecodeRawTransactionResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ElementsDecodeRawTransactionResponseMapTable =
    cfd::core::JsonTableMap<ElementsDecodeRawTransactionResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ElementsDecodeRawTransactionResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ElementsDecodeRawTransactionResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(hash) value
   */
  std::string hash_ = "";
  /**
   * @brief JsonAPI(wtxid) value
   */
  std::string wtxid_ = "";
  /**
   * @brief JsonAPI(withash) value
   */
  std::string withash_ = "";
  /**
   * @brief JsonAPI(version) value
   */
  uint32_t version_ = 0;
  /**
   * @brief JsonAPI(size) value
   */
  uint32_t size_ = 0;
  /**
   * @brief JsonAPI(vsize) value
   */
  uint32_t vsize_ = 0;
  /**
   * @brief JsonAPI(weight) value
   */
  uint32_t weight_ = 0;
  /**
   * @brief JsonAPI(locktime) value
   */
  uint32_t locktime_ = 0;
  /**
   * @brief JsonAPI(vin) value
   */
  JsonObjectVector<ElementsDecodeRawTransactionTxIn, ElementsDecodeRawTransactionTxInStruct> vin_;  // NOLINT
  /**
   * @brief JsonAPI(vout) value
   */
  JsonObjectVector<ElementsDecodeRawTransactionTxOut, ElementsDecodeRawTransactionTxOutStruct> vout_;  // NOLINT
};

// ------------------------------------------------------------------------
// GetConfidentialAddressRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetConfidentialAddressRequest) class
 */
class GetConfidentialAddressRequest
  : public cfd::core::JsonClassBase<GetConfidentialAddressRequest> {
 public:
  GetConfidentialAddressRequest() {
    CollectFieldName();
  }
  virtual ~GetConfidentialAddressRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of unblindedAddress
   * @return unblindedAddress
   */
  std::string GetUnblindedAddress() const {
    return unblinded_address_;
  }
  /**
   * @brief Set to unblindedAddress
   * @param[in] unblinded_address    setting value.
   */
  void SetUnblindedAddress(  // line separate
    const std::string& unblinded_address) {  // NOLINT
    this->unblinded_address_ = unblinded_address;
  }
  /**
   * @brief Get data type of unblindedAddress
   * @return Data type of unblindedAddress
   */
  static std::string GetUnblindedAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of unblindedAddress field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetUnblindedAddressString(  // line separate
      const GetConfidentialAddressRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.unblinded_address_);
  }
  /**
   * @brief Set json object to unblindedAddress field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetUnblindedAddressString(  // line separate
      GetConfidentialAddressRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.unblinded_address_, json_value);
  }

  /**
   * @brief Get of key
   * @return key
   */
  std::string GetKey() const {
    return key_;
  }
  /**
   * @brief Set to key
   * @param[in] key    setting value.
   */
  void SetKey(  // line separate
    const std::string& key) {  // NOLINT
    this->key_ = key;
  }
  /**
   * @brief Get data type of key
   * @return Data type of key
   */
  static std::string GetKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of key field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetKeyString(  // line separate
      const GetConfidentialAddressRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.key_);
  }
  /**
   * @brief Set json object to key field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetKeyString(  // line separate
      GetConfidentialAddressRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.key_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetConfidentialAddressRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetConfidentialAddressRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetConfidentialAddressRequestMapTable =
    cfd::core::JsonTableMap<GetConfidentialAddressRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetConfidentialAddressRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetConfidentialAddressRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(unblindedAddress) value
   */
  std::string unblinded_address_ = "";
  /**
   * @brief JsonAPI(key) value
   */
  std::string key_ = "";
};

// ------------------------------------------------------------------------
// GetConfidentialAddressResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetConfidentialAddressResponse) class
 */
class GetConfidentialAddressResponse
  : public cfd::core::JsonClassBase<GetConfidentialAddressResponse> {
 public:
  GetConfidentialAddressResponse() {
    CollectFieldName();
  }
  virtual ~GetConfidentialAddressResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of confidentialAddress
   * @return confidentialAddress
   */
  std::string GetConfidentialAddress() const {
    return confidential_address_;
  }
  /**
   * @brief Set to confidentialAddress
   * @param[in] confidential_address    setting value.
   */
  void SetConfidentialAddress(  // line separate
    const std::string& confidential_address) {  // NOLINT
    this->confidential_address_ = confidential_address;
  }
  /**
   * @brief Get data type of confidentialAddress
   * @return Data type of confidentialAddress
   */
  static std::string GetConfidentialAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of confidentialAddress field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetConfidentialAddressString(  // line separate
      const GetConfidentialAddressResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.confidential_address_);
  }
  /**
   * @brief Set json object to confidentialAddress field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetConfidentialAddressString(  // line separate
      GetConfidentialAddressResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.confidential_address_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetConfidentialAddressResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetConfidentialAddressResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetConfidentialAddressResponseMapTable =
    cfd::core::JsonTableMap<GetConfidentialAddressResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetConfidentialAddressResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetConfidentialAddressResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(confidentialAddress) value
   */
  std::string confidential_address_ = "";
};

// ------------------------------------------------------------------------
// GetUnblindedAddressRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetUnblindedAddressRequest) class
 */
class GetUnblindedAddressRequest
  : public cfd::core::JsonClassBase<GetUnblindedAddressRequest> {
 public:
  GetUnblindedAddressRequest() {
    CollectFieldName();
  }
  virtual ~GetUnblindedAddressRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of confidentialAddress
   * @return confidentialAddress
   */
  std::string GetConfidentialAddress() const {
    return confidential_address_;
  }
  /**
   * @brief Set to confidentialAddress
   * @param[in] confidential_address    setting value.
   */
  void SetConfidentialAddress(  // line separate
    const std::string& confidential_address) {  // NOLINT
    this->confidential_address_ = confidential_address;
  }
  /**
   * @brief Get data type of confidentialAddress
   * @return Data type of confidentialAddress
   */
  static std::string GetConfidentialAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of confidentialAddress field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetConfidentialAddressString(  // line separate
      const GetUnblindedAddressRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.confidential_address_);
  }
  /**
   * @brief Set json object to confidentialAddress field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetConfidentialAddressString(  // line separate
      GetUnblindedAddressRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.confidential_address_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetUnblindedAddressRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetUnblindedAddressRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetUnblindedAddressRequestMapTable =
    cfd::core::JsonTableMap<GetUnblindedAddressRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetUnblindedAddressRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetUnblindedAddressRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(confidentialAddress) value
   */
  std::string confidential_address_ = "";
};

// ------------------------------------------------------------------------
// GetUnblindedAddressResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetUnblindedAddressResponse) class
 */
class GetUnblindedAddressResponse
  : public cfd::core::JsonClassBase<GetUnblindedAddressResponse> {
 public:
  GetUnblindedAddressResponse() {
    CollectFieldName();
  }
  virtual ~GetUnblindedAddressResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of unblindedAddress
   * @return unblindedAddress
   */
  std::string GetUnblindedAddress() const {
    return unblinded_address_;
  }
  /**
   * @brief Set to unblindedAddress
   * @param[in] unblinded_address    setting value.
   */
  void SetUnblindedAddress(  // line separate
    const std::string& unblinded_address) {  // NOLINT
    this->unblinded_address_ = unblinded_address;
  }
  /**
   * @brief Get data type of unblindedAddress
   * @return Data type of unblindedAddress
   */
  static std::string GetUnblindedAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of unblindedAddress field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetUnblindedAddressString(  // line separate
      const GetUnblindedAddressResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.unblinded_address_);
  }
  /**
   * @brief Set json object to unblindedAddress field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetUnblindedAddressString(  // line separate
      GetUnblindedAddressResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.unblinded_address_, json_value);
  }

  /**
   * @brief Get of confidentialKey
   * @return confidentialKey
   */
  std::string GetConfidentialKey() const {
    return confidential_key_;
  }
  /**
   * @brief Set to confidentialKey
   * @param[in] confidential_key    setting value.
   */
  void SetConfidentialKey(  // line separate
    const std::string& confidential_key) {  // NOLINT
    this->confidential_key_ = confidential_key;
  }
  /**
   * @brief Get data type of confidentialKey
   * @return Data type of confidentialKey
   */
  static std::string GetConfidentialKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of confidentialKey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetConfidentialKeyString(  // line separate
      const GetUnblindedAddressResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.confidential_key_);
  }
  /**
   * @brief Set json object to confidentialKey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetConfidentialKeyString(  // line separate
      GetUnblindedAddressResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.confidential_key_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetUnblindedAddressResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetUnblindedAddressResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetUnblindedAddressResponseMapTable =
    cfd::core::JsonTableMap<GetUnblindedAddressResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetUnblindedAddressResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetUnblindedAddressResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(unblindedAddress) value
   */
  std::string unblinded_address_ = "";
  /**
   * @brief JsonAPI(confidentialKey) value
   */
  std::string confidential_key_ = "";
};

// ------------------------------------------------------------------------
// SetRawIssueAssetRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SetRawIssueAssetRequest) class
 */
class SetRawIssueAssetRequest
  : public cfd::core::JsonClassBase<SetRawIssueAssetRequest> {
 public:
  SetRawIssueAssetRequest() {
    CollectFieldName();
  }
  virtual ~SetRawIssueAssetRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const SetRawIssueAssetRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      SetRawIssueAssetRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of isRandomSortTxOut
   * @return isRandomSortTxOut
   */
  bool GetIsRandomSortTxOut() const {
    return is_random_sort_tx_out_;
  }
  /**
   * @brief Set to isRandomSortTxOut
   * @param[in] is_random_sort_tx_out    setting value.
   */
  void SetIsRandomSortTxOut(  // line separate
    const bool& is_random_sort_tx_out) {  // NOLINT
    this->is_random_sort_tx_out_ = is_random_sort_tx_out;
  }
  /**
   * @brief Get data type of isRandomSortTxOut
   * @return Data type of isRandomSortTxOut
   */
  static std::string GetIsRandomSortTxOutFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isRandomSortTxOut field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsRandomSortTxOutString(  // line separate
      const SetRawIssueAssetRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_random_sort_tx_out_);
  }
  /**
   * @brief Set json object to isRandomSortTxOut field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsRandomSortTxOutString(  // line separate
      SetRawIssueAssetRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_random_sort_tx_out_, json_value);
  }

  /**
   * @brief Get of issuances.
   * @return issuances
   */
  JsonObjectVector<IssuanceDataRequest, IssuanceDataRequestStruct>& GetIssuances() {  // NOLINT
    return issuances_;
  }
  /**
   * @brief Set to issuances.
   * @param[in] issuances    setting value.
   */
  void SetIssuances(  // line separate
      const JsonObjectVector<IssuanceDataRequest, IssuanceDataRequestStruct>& issuances) {  // NOLINT
    this->issuances_ = issuances;
  }
  /**
   * @brief Get data type of issuances.
   * @return Data type of issuances.
   */
  static std::string GetIssuancesFieldType() {
    return "JsonObjectVector<IssuanceDataRequest, IssuanceDataRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of issuances field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetIssuancesString(  // line separate
      const SetRawIssueAssetRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.issuances_.Serialize();
  }
  /**
   * @brief Set json object to issuances field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetIssuancesString(  // line separate
      SetRawIssueAssetRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.issuances_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SetRawIssueAssetRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SetRawIssueAssetRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SetRawIssueAssetRequestMapTable =
    cfd::core::JsonTableMap<SetRawIssueAssetRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SetRawIssueAssetRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SetRawIssueAssetRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(isRandomSortTxOut) value
   */
  bool is_random_sort_tx_out_ = false;
  /**
   * @brief JsonAPI(issuances) value
   */
  JsonObjectVector<IssuanceDataRequest, IssuanceDataRequestStruct> issuances_;  // NOLINT
};

// ------------------------------------------------------------------------
// SetRawIssueAssetResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SetRawIssueAssetResponse) class
 */
class SetRawIssueAssetResponse
  : public cfd::core::JsonClassBase<SetRawIssueAssetResponse> {
 public:
  SetRawIssueAssetResponse() {
    CollectFieldName();
  }
  virtual ~SetRawIssueAssetResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const SetRawIssueAssetResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      SetRawIssueAssetResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of issuances.
   * @return issuances
   */
  JsonObjectVector<IssuanceDataResponse, IssuanceDataResponseStruct>& GetIssuances() {  // NOLINT
    return issuances_;
  }
  /**
   * @brief Set to issuances.
   * @param[in] issuances    setting value.
   */
  void SetIssuances(  // line separate
      const JsonObjectVector<IssuanceDataResponse, IssuanceDataResponseStruct>& issuances) {  // NOLINT
    this->issuances_ = issuances;
  }
  /**
   * @brief Get data type of issuances.
   * @return Data type of issuances.
   */
  static std::string GetIssuancesFieldType() {
    return "JsonObjectVector<IssuanceDataResponse, IssuanceDataResponseStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of issuances field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetIssuancesString(  // line separate
      const SetRawIssueAssetResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.issuances_.Serialize();
  }
  /**
   * @brief Set json object to issuances field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetIssuancesString(  // line separate
      SetRawIssueAssetResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.issuances_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SetRawIssueAssetResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SetRawIssueAssetResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SetRawIssueAssetResponseMapTable =
    cfd::core::JsonTableMap<SetRawIssueAssetResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SetRawIssueAssetResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SetRawIssueAssetResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(issuances) value
   */
  JsonObjectVector<IssuanceDataResponse, IssuanceDataResponseStruct> issuances_;  // NOLINT
};

// ------------------------------------------------------------------------
// SetRawReissueAssetRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SetRawReissueAssetRequest) class
 */
class SetRawReissueAssetRequest
  : public cfd::core::JsonClassBase<SetRawReissueAssetRequest> {
 public:
  SetRawReissueAssetRequest() {
    CollectFieldName();
  }
  virtual ~SetRawReissueAssetRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const SetRawReissueAssetRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      SetRawReissueAssetRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of isRandomSortTxOut
   * @return isRandomSortTxOut
   */
  bool GetIsRandomSortTxOut() const {
    return is_random_sort_tx_out_;
  }
  /**
   * @brief Set to isRandomSortTxOut
   * @param[in] is_random_sort_tx_out    setting value.
   */
  void SetIsRandomSortTxOut(  // line separate
    const bool& is_random_sort_tx_out) {  // NOLINT
    this->is_random_sort_tx_out_ = is_random_sort_tx_out;
  }
  /**
   * @brief Get data type of isRandomSortTxOut
   * @return Data type of isRandomSortTxOut
   */
  static std::string GetIsRandomSortTxOutFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isRandomSortTxOut field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsRandomSortTxOutString(  // line separate
      const SetRawReissueAssetRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_random_sort_tx_out_);
  }
  /**
   * @brief Set json object to isRandomSortTxOut field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsRandomSortTxOutString(  // line separate
      SetRawReissueAssetRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_random_sort_tx_out_, json_value);
  }

  /**
   * @brief Get of issuances.
   * @return issuances
   */
  JsonObjectVector<ReissuanceDataRequest, ReissuanceDataRequestStruct>& GetIssuances() {  // NOLINT
    return issuances_;
  }
  /**
   * @brief Set to issuances.
   * @param[in] issuances    setting value.
   */
  void SetIssuances(  // line separate
      const JsonObjectVector<ReissuanceDataRequest, ReissuanceDataRequestStruct>& issuances) {  // NOLINT
    this->issuances_ = issuances;
  }
  /**
   * @brief Get data type of issuances.
   * @return Data type of issuances.
   */
  static std::string GetIssuancesFieldType() {
    return "JsonObjectVector<ReissuanceDataRequest, ReissuanceDataRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of issuances field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetIssuancesString(  // line separate
      const SetRawReissueAssetRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.issuances_.Serialize();
  }
  /**
   * @brief Set json object to issuances field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetIssuancesString(  // line separate
      SetRawReissueAssetRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.issuances_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SetRawReissueAssetRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SetRawReissueAssetRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SetRawReissueAssetRequestMapTable =
    cfd::core::JsonTableMap<SetRawReissueAssetRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SetRawReissueAssetRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SetRawReissueAssetRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(isRandomSortTxOut) value
   */
  bool is_random_sort_tx_out_ = false;
  /**
   * @brief JsonAPI(issuances) value
   */
  JsonObjectVector<ReissuanceDataRequest, ReissuanceDataRequestStruct> issuances_;  // NOLINT
};

// ------------------------------------------------------------------------
// SetRawReissueAssetResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SetRawReissueAssetResponse) class
 */
class SetRawReissueAssetResponse
  : public cfd::core::JsonClassBase<SetRawReissueAssetResponse> {
 public:
  SetRawReissueAssetResponse() {
    CollectFieldName();
  }
  virtual ~SetRawReissueAssetResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const SetRawReissueAssetResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      SetRawReissueAssetResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of issuances.
   * @return issuances
   */
  JsonObjectVector<IssuanceDataResponse, IssuanceDataResponseStruct>& GetIssuances() {  // NOLINT
    return issuances_;
  }
  /**
   * @brief Set to issuances.
   * @param[in] issuances    setting value.
   */
  void SetIssuances(  // line separate
      const JsonObjectVector<IssuanceDataResponse, IssuanceDataResponseStruct>& issuances) {  // NOLINT
    this->issuances_ = issuances;
  }
  /**
   * @brief Get data type of issuances.
   * @return Data type of issuances.
   */
  static std::string GetIssuancesFieldType() {
    return "JsonObjectVector<IssuanceDataResponse, IssuanceDataResponseStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of issuances field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetIssuancesString(  // line separate
      const SetRawReissueAssetResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.issuances_.Serialize();
  }
  /**
   * @brief Set json object to issuances field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetIssuancesString(  // line separate
      SetRawReissueAssetResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.issuances_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SetRawReissueAssetResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SetRawReissueAssetResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SetRawReissueAssetResponseMapTable =
    cfd::core::JsonTableMap<SetRawReissueAssetResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SetRawReissueAssetResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SetRawReissueAssetResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(issuances) value
   */
  JsonObjectVector<IssuanceDataResponse, IssuanceDataResponseStruct> issuances_;  // NOLINT
};

// ------------------------------------------------------------------------
// UnblindRawTransactionRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (UnblindRawTransactionRequest) class
 */
class UnblindRawTransactionRequest
  : public cfd::core::JsonClassBase<UnblindRawTransactionRequest> {
 public:
  UnblindRawTransactionRequest() {
    CollectFieldName();
  }
  virtual ~UnblindRawTransactionRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const UnblindRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      UnblindRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of txouts.
   * @return txouts
   */
  JsonObjectVector<UnblindTxOut, UnblindTxOutStruct>& GetTxouts() {  // NOLINT
    return txouts_;
  }
  /**
   * @brief Set to txouts.
   * @param[in] txouts    setting value.
   */
  void SetTxouts(  // line separate
      const JsonObjectVector<UnblindTxOut, UnblindTxOutStruct>& txouts) {  // NOLINT
    this->txouts_ = txouts;
  }
  /**
   * @brief Get data type of txouts.
   * @return Data type of txouts.
   */
  static std::string GetTxoutsFieldType() {
    return "JsonObjectVector<UnblindTxOut, UnblindTxOutStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txouts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxoutsString(  // line separate
      const UnblindRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txouts_.Serialize();
  }
  /**
   * @brief Set json object to txouts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxoutsString(  // line separate
      UnblindRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txouts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of issuances.
   * @return issuances
   */
  JsonObjectVector<UnblindIssuance, UnblindIssuanceStruct>& GetIssuances() {  // NOLINT
    return issuances_;
  }
  /**
   * @brief Set to issuances.
   * @param[in] issuances    setting value.
   */
  void SetIssuances(  // line separate
      const JsonObjectVector<UnblindIssuance, UnblindIssuanceStruct>& issuances) {  // NOLINT
    this->issuances_ = issuances;
  }
  /**
   * @brief Get data type of issuances.
   * @return Data type of issuances.
   */
  static std::string GetIssuancesFieldType() {
    return "JsonObjectVector<UnblindIssuance, UnblindIssuanceStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of issuances field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetIssuancesString(  // line separate
      const UnblindRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.issuances_.Serialize();
  }
  /**
   * @brief Set json object to issuances field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetIssuancesString(  // line separate
      UnblindRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.issuances_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const UnblindRawTransactionRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  UnblindRawTransactionRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using UnblindRawTransactionRequestMapTable =
    cfd::core::JsonTableMap<UnblindRawTransactionRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const UnblindRawTransactionRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static UnblindRawTransactionRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(txouts) value
   */
  JsonObjectVector<UnblindTxOut, UnblindTxOutStruct> txouts_;  // NOLINT
  /**
   * @brief JsonAPI(issuances) value
   */
  JsonObjectVector<UnblindIssuance, UnblindIssuanceStruct> issuances_;  // NOLINT
};

// ------------------------------------------------------------------------
// UnblindRawTransactionResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (UnblindRawTransactionResponse) class
 */
class UnblindRawTransactionResponse
  : public cfd::core::JsonClassBase<UnblindRawTransactionResponse> {
 public:
  UnblindRawTransactionResponse() {
    CollectFieldName();
  }
  virtual ~UnblindRawTransactionResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const UnblindRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      UnblindRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of outputs.
   * @return outputs
   */
  JsonObjectVector<UnblindOutput, UnblindOutputStruct>& GetOutputs() {  // NOLINT
    return outputs_;
  }
  /**
   * @brief Set to outputs.
   * @param[in] outputs    setting value.
   */
  void SetOutputs(  // line separate
      const JsonObjectVector<UnblindOutput, UnblindOutputStruct>& outputs) {  // NOLINT
    this->outputs_ = outputs;
  }
  /**
   * @brief Get data type of outputs.
   * @return Data type of outputs.
   */
  static std::string GetOutputsFieldType() {
    return "JsonObjectVector<UnblindOutput, UnblindOutputStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of outputs field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetOutputsString(  // line separate
      const UnblindRawTransactionResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.outputs_.Serialize();
  }
  /**
   * @brief Set json object to outputs field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetOutputsString(  // line separate
      UnblindRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.outputs_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of issuanceOutputs.
   * @return issuanceOutputs
   */
  JsonObjectVector<UnblindIssuanceOutput, UnblindIssuanceOutputStruct>& GetIssuanceOutputs() {  // NOLINT
    return issuance_outputs_;
  }
  /**
   * @brief Set to issuanceOutputs.
   * @param[in] issuance_outputs    setting value.
   */
  void SetIssuanceOutputs(  // line separate
      const JsonObjectVector<UnblindIssuanceOutput, UnblindIssuanceOutputStruct>& issuance_outputs) {  // NOLINT
    this->issuance_outputs_ = issuance_outputs;
  }
  /**
   * @brief Get data type of issuanceOutputs.
   * @return Data type of issuanceOutputs.
   */
  static std::string GetIssuanceOutputsFieldType() {
    return "JsonObjectVector<UnblindIssuanceOutput, UnblindIssuanceOutputStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of issuanceOutputs field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetIssuanceOutputsString(  // line separate
      const UnblindRawTransactionResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.issuance_outputs_.Serialize();
  }
  /**
   * @brief Set json object to issuanceOutputs field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetIssuanceOutputsString(  // line separate
      UnblindRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.issuance_outputs_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const UnblindRawTransactionResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  UnblindRawTransactionResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using UnblindRawTransactionResponseMapTable =
    cfd::core::JsonTableMap<UnblindRawTransactionResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const UnblindRawTransactionResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static UnblindRawTransactionResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(outputs) value
   */
  JsonObjectVector<UnblindOutput, UnblindOutputStruct> outputs_;  // NOLINT
  /**
   * @brief JsonAPI(issuanceOutputs) value
   */
  JsonObjectVector<UnblindIssuanceOutput, UnblindIssuanceOutputStruct> issuance_outputs_;  // NOLINT
};

// ------------------------------------------------------------------------
// EncodeBase58Request
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (EncodeBase58Request) class
 */
class EncodeBase58Request
  : public cfd::core::JsonClassBase<EncodeBase58Request> {
 public:
  EncodeBase58Request() {
    CollectFieldName();
  }
  virtual ~EncodeBase58Request() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const EncodeBase58Request& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      EncodeBase58Request& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of hasChecksum
   * @return hasChecksum
   */
  bool GetHasChecksum() const {
    return has_checksum_;
  }
  /**
   * @brief Set to hasChecksum
   * @param[in] has_checksum    setting value.
   */
  void SetHasChecksum(  // line separate
    const bool& has_checksum) {  // NOLINT
    this->has_checksum_ = has_checksum;
  }
  /**
   * @brief Get data type of hasChecksum
   * @return Data type of hasChecksum
   */
  static std::string GetHasChecksumFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of hasChecksum field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHasChecksumString(  // line separate
      const EncodeBase58Request& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.has_checksum_);
  }
  /**
   * @brief Set json object to hasChecksum field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHasChecksumString(  // line separate
      EncodeBase58Request& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.has_checksum_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const EncodeBase58RequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  EncodeBase58RequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using EncodeBase58RequestMapTable =
    cfd::core::JsonTableMap<EncodeBase58Request>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const EncodeBase58RequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static EncodeBase58RequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(hasChecksum) value
   */
  bool has_checksum_ = true;
};

// ------------------------------------------------------------------------
// EncodeBase58Response
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (EncodeBase58Response) class
 */
class EncodeBase58Response
  : public cfd::core::JsonClassBase<EncodeBase58Response> {
 public:
  EncodeBase58Response() {
    CollectFieldName();
  }
  virtual ~EncodeBase58Response() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of data
   * @return data
   */
  std::string GetData() const {
    return data_;
  }
  /**
   * @brief Set to data
   * @param[in] data    setting value.
   */
  void SetData(  // line separate
    const std::string& data) {  // NOLINT
    this->data_ = data;
  }
  /**
   * @brief Get data type of data
   * @return Data type of data
   */
  static std::string GetDataFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of data field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDataString(  // line separate
      const EncodeBase58Response& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.data_);
  }
  /**
   * @brief Set json object to data field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDataString(  // line separate
      EncodeBase58Response& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.data_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const EncodeBase58ResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  EncodeBase58ResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using EncodeBase58ResponseMapTable =
    cfd::core::JsonTableMap<EncodeBase58Response>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const EncodeBase58ResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static EncodeBase58ResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(data) value
   */
  std::string data_ = "";
};


// ------------------------------------------------------------------------
// EncodeSignatureByDerRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (EncodeSignatureByDerRequest) class
 */
class EncodeSignatureByDerRequest
  : public cfd::core::JsonClassBase<EncodeSignatureByDerRequest> {
 public:
  EncodeSignatureByDerRequest() {
    CollectFieldName();
  }
  virtual ~EncodeSignatureByDerRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of signature
   * @return signature
   */
  std::string GetSignature() const {
    return signature_;
  }
  /**
   * @brief Set to signature
   * @param[in] signature    setting value.
   */
  void SetSignature(  // line separate
    const std::string& signature) {  // NOLINT
    this->signature_ = signature;
  }
  /**
   * @brief Get data type of signature
   * @return Data type of signature
   */
  static std::string GetSignatureFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of signature field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSignatureString(  // line separate
      const EncodeSignatureByDerRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.signature_);
  }
  /**
   * @brief Set json object to signature field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSignatureString(  // line separate
      EncodeSignatureByDerRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.signature_, json_value);
  }

  /**
   * @brief Get of sighashType
   * @return sighashType
   */
  std::string GetSighashType() const {
    return sighash_type_;
  }
  /**
   * @brief Set to sighashType
   * @param[in] sighash_type    setting value.
   */
  void SetSighashType(  // line separate
    const std::string& sighash_type) {  // NOLINT
    this->sighash_type_ = sighash_type;
  }
  /**
   * @brief Get data type of sighashType
   * @return Data type of sighashType
   */
  static std::string GetSighashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashTypeString(  // line separate
      const EncodeSignatureByDerRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_type_);
  }
  /**
   * @brief Set json object to sighashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashTypeString(  // line separate
      EncodeSignatureByDerRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_type_, json_value);
  }

  /**
   * @brief Get of sighashAnyoneCanPay
   * @return sighashAnyoneCanPay
   */
  bool GetSighashAnyoneCanPay() const {
    return sighash_anyone_can_pay_;
  }
  /**
   * @brief Set to sighashAnyoneCanPay
   * @param[in] sighash_anyone_can_pay    setting value.
   */
  void SetSighashAnyoneCanPay(  // line separate
    const bool& sighash_anyone_can_pay) {  // NOLINT
    this->sighash_anyone_can_pay_ = sighash_anyone_can_pay;
  }
  /**
   * @brief Get data type of sighashAnyoneCanPay
   * @return Data type of sighashAnyoneCanPay
   */
  static std::string GetSighashAnyoneCanPayFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashAnyoneCanPayString(  // line separate
      const EncodeSignatureByDerRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_anyone_can_pay_);
  }
  /**
   * @brief Set json object to sighashAnyoneCanPay field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashAnyoneCanPayString(  // line separate
      EncodeSignatureByDerRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_anyone_can_pay_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const EncodeSignatureByDerRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  EncodeSignatureByDerRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using EncodeSignatureByDerRequestMapTable =
    cfd::core::JsonTableMap<EncodeSignatureByDerRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const EncodeSignatureByDerRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static EncodeSignatureByDerRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(signature) value
   */
  std::string signature_ = "";
  /**
   * @brief JsonAPI(sighashType) value
   */
  std::string sighash_type_ = "all";
  /**
   * @brief JsonAPI(sighashAnyoneCanPay) value
   */
  bool sighash_anyone_can_pay_ = false;
};

// ------------------------------------------------------------------------
// EncodeSignatureByDerResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (EncodeSignatureByDerResponse) class
 */
class EncodeSignatureByDerResponse
  : public cfd::core::JsonClassBase<EncodeSignatureByDerResponse> {
 public:
  EncodeSignatureByDerResponse() {
    CollectFieldName();
  }
  virtual ~EncodeSignatureByDerResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of signature
   * @return signature
   */
  std::string GetSignature() const {
    return signature_;
  }
  /**
   * @brief Set to signature
   * @param[in] signature    setting value.
   */
  void SetSignature(  // line separate
    const std::string& signature) {  // NOLINT
    this->signature_ = signature;
  }
  /**
   * @brief Get data type of signature
   * @return Data type of signature
   */
  static std::string GetSignatureFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of signature field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSignatureString(  // line separate
      const EncodeSignatureByDerResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.signature_);
  }
  /**
   * @brief Set json object to signature field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSignatureString(  // line separate
      EncodeSignatureByDerResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.signature_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const EncodeSignatureByDerResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  EncodeSignatureByDerResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using EncodeSignatureByDerResponseMapTable =
    cfd::core::JsonTableMap<EncodeSignatureByDerResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const EncodeSignatureByDerResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static EncodeSignatureByDerResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(signature) value
   */
  std::string signature_ = "";
};

// ------------------------------------------------------------------------
// InnerErrorResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (InnerErrorResponse) class
 */
class InnerErrorResponse
  : public cfd::core::JsonClassBase<InnerErrorResponse> {
 public:
  InnerErrorResponse() {
    CollectFieldName();
  }
  virtual ~InnerErrorResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of code
   * @return code
   */
  int GetCode() const {
    return code_;
  }
  /**
   * @brief Set to code
   * @param[in] code    setting value.
   */
  void SetCode(  // line separate
    const int& code) {  // NOLINT
    this->code_ = code;
  }
  /**
   * @brief Get data type of code
   * @return Data type of code
   */
  static std::string GetCodeFieldType() {
    return "int";
  }
  /**
   * @brief Get json string of code field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetCodeString(  // line separate
      const InnerErrorResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.code_);
  }
  /**
   * @brief Set json object to code field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetCodeString(  // line separate
      InnerErrorResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.code_, json_value);
  }

  /**
   * @brief Get of type
   * @return type
   */
  std::string GetType() const {
    return type_;
  }
  /**
   * @brief Set to type
   * @param[in] type    setting value.
   */
  void SetType(  // line separate
    const std::string& type) {  // NOLINT
    this->type_ = type;
  }
  /**
   * @brief Get data type of type
   * @return Data type of type
   */
  static std::string GetTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of type field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTypeString(  // line separate
      const InnerErrorResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.type_);
  }
  /**
   * @brief Set json object to type field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTypeString(  // line separate
      InnerErrorResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.type_, json_value);
  }

  /**
   * @brief Get of message
   * @return message
   */
  std::string GetMessage() const {
    return message_;
  }
  /**
   * @brief Set to message
   * @param[in] message    setting value.
   */
  void SetMessage(  // line separate
    const std::string& message) {  // NOLINT
    this->message_ = message;
  }
  /**
   * @brief Get data type of message
   * @return Data type of message
   */
  static std::string GetMessageFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of message field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMessageString(  // line separate
      const InnerErrorResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.message_);
  }
  /**
   * @brief Set json object to message field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMessageString(  // line separate
      InnerErrorResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.message_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const InnerErrorResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  InnerErrorResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using InnerErrorResponseMapTable =
    cfd::core::JsonTableMap<InnerErrorResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const InnerErrorResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static InnerErrorResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(code) value
   */
  int code_ = 0;
  /**
   * @brief JsonAPI(type) value
   */
  std::string type_ = "";
  /**
   * @brief JsonAPI(message) value
   */
  std::string message_ = "";
};

// ------------------------------------------------------------------------
// ErrorResponseBase
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ErrorResponseBase) class
 */
class ErrorResponseBase
  : public cfd::core::JsonClassBase<ErrorResponseBase> {
 public:
  ErrorResponseBase() {
    CollectFieldName();
  }
  virtual ~ErrorResponseBase() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of error.
   * @return error
   */
  InnerErrorResponse& GetError() {  // NOLINT
    return error_;
  }
  /**
   * @brief Set to error.
   * @param[in] error    setting value.
   */
  void SetError(  // line separate
      const InnerErrorResponse& error) {  // NOLINT
    this->error_ = error;
  }
  /**
   * @brief Get data type of error.
   * @return Data type of error.
   */
  static std::string GetErrorFieldType() {
    return "InnerErrorResponse";  // NOLINT
  }
  /**
   * @brief Get json string of error field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetErrorString(  // line separate
      const ErrorResponseBase& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.error_.Serialize();
  }
  /**
   * @brief Set json object to error field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetErrorString(  // line separate
      ErrorResponseBase& obj,  // NOLINT
      const UniValue& json_value) {
    obj.error_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }



 protected:
  /**
   * @brief definition type of Map table.
   */
  using ErrorResponseBaseMapTable =
    cfd::core::JsonTableMap<ErrorResponseBase>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ErrorResponseBaseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ErrorResponseBaseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(error) value
   */
  InnerErrorResponse error_;  // NOLINT
};

// ------------------------------------------------------------------------
// EstimateFeeRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (EstimateFeeRequest) class
 */
class EstimateFeeRequest
  : public cfd::core::JsonClassBase<EstimateFeeRequest> {
 public:
  EstimateFeeRequest() {
    CollectFieldName();
  }
  virtual ~EstimateFeeRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of selectUtxos.
   * @return selectUtxos
   */
  JsonObjectVector<SelectUtxoData, SelectUtxoDataStruct>& GetSelectUtxos() {  // NOLINT
    return select_utxos_;
  }
  /**
   * @brief Set to selectUtxos.
   * @param[in] select_utxos    setting value.
   */
  void SetSelectUtxos(  // line separate
      const JsonObjectVector<SelectUtxoData, SelectUtxoDataStruct>& select_utxos) {  // NOLINT
    this->select_utxos_ = select_utxos;
  }
  /**
   * @brief Get data type of selectUtxos.
   * @return Data type of selectUtxos.
   */
  static std::string GetSelectUtxosFieldType() {
    return "JsonObjectVector<SelectUtxoData, SelectUtxoDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of selectUtxos field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetSelectUtxosString(  // line separate
      const EstimateFeeRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.select_utxos_.Serialize();
  }
  /**
   * @brief Set json object to selectUtxos field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetSelectUtxosString(  // line separate
      EstimateFeeRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.select_utxos_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of feeRate
   * @return feeRate
   */
  double GetFeeRate() const {
    return fee_rate_;
  }
  /**
   * @brief Set to feeRate
   * @param[in] fee_rate    setting value.
   */
  void SetFeeRate(  // line separate
    const double& fee_rate) {  // NOLINT
    this->fee_rate_ = fee_rate;
  }
  /**
   * @brief Get data type of feeRate
   * @return Data type of feeRate
   */
  static std::string GetFeeRateFieldType() {
    return "double";
  }
  /**
   * @brief Get json string of feeRate field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFeeRateString(  // line separate
      const EstimateFeeRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fee_rate_);
  }
  /**
   * @brief Set json object to feeRate field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFeeRateString(  // line separate
      EstimateFeeRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fee_rate_, json_value);
  }

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const EstimateFeeRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      EstimateFeeRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const EstimateFeeRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      EstimateFeeRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of isBlind
   * @return isBlind
   */
  bool GetIsBlind() const {
    return is_blind_;
  }
  /**
   * @brief Set to isBlind
   * @param[in] is_blind    setting value.
   */
  void SetIsBlind(  // line separate
    const bool& is_blind) {  // NOLINT
    this->is_blind_ = is_blind;
  }
  /**
   * @brief Get data type of isBlind
   * @return Data type of isBlind
   */
  static std::string GetIsBlindFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isBlind field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsBlindString(  // line separate
      const EstimateFeeRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_blind_);
  }
  /**
   * @brief Set json object to isBlind field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsBlindString(  // line separate
      EstimateFeeRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_blind_, json_value);
  }

  /**
   * @brief Get of feeAsset
   * @return feeAsset
   */
  std::string GetFeeAsset() const {
    return fee_asset_;
  }
  /**
   * @brief Set to feeAsset
   * @param[in] fee_asset    setting value.
   */
  void SetFeeAsset(  // line separate
    const std::string& fee_asset) {  // NOLINT
    this->fee_asset_ = fee_asset;
  }
  /**
   * @brief Get data type of feeAsset
   * @return Data type of feeAsset
   */
  static std::string GetFeeAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of feeAsset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFeeAssetString(  // line separate
      const EstimateFeeRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fee_asset_);
  }
  /**
   * @brief Set json object to feeAsset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFeeAssetString(  // line separate
      EstimateFeeRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fee_asset_, json_value);
  }

  /**
   * @brief Get of exponent
   * @return exponent
   */
  int GetExponent() const {
    return exponent_;
  }
  /**
   * @brief Set to exponent
   * @param[in] exponent    setting value.
   */
  void SetExponent(  // line separate
    const int& exponent) {  // NOLINT
    this->exponent_ = exponent;
  }
  /**
   * @brief Get data type of exponent
   * @return Data type of exponent
   */
  static std::string GetExponentFieldType() {
    return "int";
  }
  /**
   * @brief Get json string of exponent field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExponentString(  // line separate
      const EstimateFeeRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.exponent_);
  }
  /**
   * @brief Set json object to exponent field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExponentString(  // line separate
      EstimateFeeRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.exponent_, json_value);
  }

  /**
   * @brief Get of minimumBits
   * @return minimumBits
   */
  int GetMinimumBits() const {
    return minimum_bits_;
  }
  /**
   * @brief Set to minimumBits
   * @param[in] minimum_bits    setting value.
   */
  void SetMinimumBits(  // line separate
    const int& minimum_bits) {  // NOLINT
    this->minimum_bits_ = minimum_bits;
  }
  /**
   * @brief Get data type of minimumBits
   * @return Data type of minimumBits
   */
  static std::string GetMinimumBitsFieldType() {
    return "int";
  }
  /**
   * @brief Get json string of minimumBits field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMinimumBitsString(  // line separate
      const EstimateFeeRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.minimum_bits_);
  }
  /**
   * @brief Set json object to minimumBits field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMinimumBitsString(  // line separate
      EstimateFeeRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.minimum_bits_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const EstimateFeeRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  EstimateFeeRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using EstimateFeeRequestMapTable =
    cfd::core::JsonTableMap<EstimateFeeRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const EstimateFeeRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static EstimateFeeRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(selectUtxos) value
   */
  JsonObjectVector<SelectUtxoData, SelectUtxoDataStruct> select_utxos_;  // NOLINT
  /**
   * @brief JsonAPI(feeRate) value
   */
  double fee_rate_ = 1;
  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(isBlind) value
   */
  bool is_blind_ = true;
  /**
   * @brief JsonAPI(feeAsset) value
   */
  std::string fee_asset_ = "";
  /**
   * @brief JsonAPI(exponent) value
   */
  int exponent_ = 0;
  /**
   * @brief JsonAPI(minimumBits) value
   */
  int minimum_bits_ = 52;
};

// ------------------------------------------------------------------------
// EstimateFeeResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (EstimateFeeResponse) class
 */
class EstimateFeeResponse
  : public cfd::core::JsonClassBase<EstimateFeeResponse> {
 public:
  EstimateFeeResponse() {
    CollectFieldName();
  }
  virtual ~EstimateFeeResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of feeAmount
   * @return feeAmount
   */
  int64_t GetFeeAmount() const {
    return fee_amount_;
  }
  /**
   * @brief Set to feeAmount
   * @param[in] fee_amount    setting value.
   */
  void SetFeeAmount(  // line separate
    const int64_t& fee_amount) {  // NOLINT
    this->fee_amount_ = fee_amount;
  }
  /**
   * @brief Get data type of feeAmount
   * @return Data type of feeAmount
   */
  static std::string GetFeeAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of feeAmount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFeeAmountString(  // line separate
      const EstimateFeeResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fee_amount_);
  }
  /**
   * @brief Set json object to feeAmount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFeeAmountString(  // line separate
      EstimateFeeResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fee_amount_, json_value);
  }

  /**
   * @brief Get of txFeeAmount
   * @return txFeeAmount
   */
  int64_t GetTxFeeAmount() const {
    return tx_fee_amount_;
  }
  /**
   * @brief Set to txFeeAmount
   * @param[in] tx_fee_amount    setting value.
   */
  void SetTxFeeAmount(  // line separate
    const int64_t& tx_fee_amount) {  // NOLINT
    this->tx_fee_amount_ = tx_fee_amount;
  }
  /**
   * @brief Get data type of txFeeAmount
   * @return Data type of txFeeAmount
   */
  static std::string GetTxFeeAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of txFeeAmount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxFeeAmountString(  // line separate
      const EstimateFeeResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_fee_amount_);
  }
  /**
   * @brief Set json object to txFeeAmount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxFeeAmountString(  // line separate
      EstimateFeeResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_fee_amount_, json_value);
  }

  /**
   * @brief Get of txoutFeeAmount
   * @return txoutFeeAmount
   */
  int64_t GetTxoutFeeAmount() const {
    return txout_fee_amount_;
  }
  /**
   * @brief Set to txoutFeeAmount
   * @param[in] txout_fee_amount    setting value.
   */
  void SetTxoutFeeAmount(  // line separate
    const int64_t& txout_fee_amount) {  // NOLINT
    this->txout_fee_amount_ = txout_fee_amount;
  }
  /**
   * @brief Get data type of txoutFeeAmount
   * @return Data type of txoutFeeAmount
   */
  static std::string GetTxoutFeeAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of txoutFeeAmount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxoutFeeAmountString(  // line separate
      const EstimateFeeResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txout_fee_amount_);
  }
  /**
   * @brief Set json object to txoutFeeAmount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxoutFeeAmountString(  // line separate
      EstimateFeeResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txout_fee_amount_, json_value);
  }

  /**
   * @brief Get of utxoFeeAmount
   * @return utxoFeeAmount
   */
  int64_t GetUtxoFeeAmount() const {
    return utxo_fee_amount_;
  }
  /**
   * @brief Set to utxoFeeAmount
   * @param[in] utxo_fee_amount    setting value.
   */
  void SetUtxoFeeAmount(  // line separate
    const int64_t& utxo_fee_amount) {  // NOLINT
    this->utxo_fee_amount_ = utxo_fee_amount;
  }
  /**
   * @brief Get data type of utxoFeeAmount
   * @return Data type of utxoFeeAmount
   */
  static std::string GetUtxoFeeAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of utxoFeeAmount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetUtxoFeeAmountString(  // line separate
      const EstimateFeeResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.utxo_fee_amount_);
  }
  /**
   * @brief Set json object to utxoFeeAmount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetUtxoFeeAmountString(  // line separate
      EstimateFeeResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.utxo_fee_amount_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const EstimateFeeResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  EstimateFeeResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using EstimateFeeResponseMapTable =
    cfd::core::JsonTableMap<EstimateFeeResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const EstimateFeeResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static EstimateFeeResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(feeAmount) value
   */
  int64_t fee_amount_ = 0;
  /**
   * @brief JsonAPI(txFeeAmount) value
   */
  int64_t tx_fee_amount_ = 0;
  /**
   * @brief JsonAPI(txoutFeeAmount) value
   */
  int64_t txout_fee_amount_ = 0;
  /**
   * @brief JsonAPI(utxoFeeAmount) value
   */
  int64_t utxo_fee_amount_ = 0;
};

// ------------------------------------------------------------------------
// ExtractSecretEcdsaAdaptorRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ExtractSecretEcdsaAdaptorRequest) class
 */
class ExtractSecretEcdsaAdaptorRequest
  : public cfd::core::JsonClassBase<ExtractSecretEcdsaAdaptorRequest> {
 public:
  ExtractSecretEcdsaAdaptorRequest() {
    CollectFieldName();
  }
  virtual ~ExtractSecretEcdsaAdaptorRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of adaptorSignature
   * @return adaptorSignature
   */
  std::string GetAdaptorSignature() const {
    return adaptor_signature_;
  }
  /**
   * @brief Set to adaptorSignature
   * @param[in] adaptor_signature    setting value.
   */
  void SetAdaptorSignature(  // line separate
    const std::string& adaptor_signature) {  // NOLINT
    this->adaptor_signature_ = adaptor_signature;
  }
  /**
   * @brief Get data type of adaptorSignature
   * @return Data type of adaptorSignature
   */
  static std::string GetAdaptorSignatureFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of adaptorSignature field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAdaptorSignatureString(  // line separate
      const ExtractSecretEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.adaptor_signature_);
  }
  /**
   * @brief Set json object to adaptorSignature field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAdaptorSignatureString(  // line separate
      ExtractSecretEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.adaptor_signature_, json_value);
  }

  /**
   * @brief Get of signature
   * @return signature
   */
  std::string GetSignature() const {
    return signature_;
  }
  /**
   * @brief Set to signature
   * @param[in] signature    setting value.
   */
  void SetSignature(  // line separate
    const std::string& signature) {  // NOLINT
    this->signature_ = signature;
  }
  /**
   * @brief Get data type of signature
   * @return Data type of signature
   */
  static std::string GetSignatureFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of signature field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSignatureString(  // line separate
      const ExtractSecretEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.signature_);
  }
  /**
   * @brief Set json object to signature field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSignatureString(  // line separate
      ExtractSecretEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.signature_, json_value);
  }

  /**
   * @brief Get of adaptor
   * @return adaptor
   */
  std::string GetAdaptor() const {
    return adaptor_;
  }
  /**
   * @brief Set to adaptor
   * @param[in] adaptor    setting value.
   */
  void SetAdaptor(  // line separate
    const std::string& adaptor) {  // NOLINT
    this->adaptor_ = adaptor;
  }
  /**
   * @brief Get data type of adaptor
   * @return Data type of adaptor
   */
  static std::string GetAdaptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of adaptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAdaptorString(  // line separate
      const ExtractSecretEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.adaptor_);
  }
  /**
   * @brief Set json object to adaptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAdaptorString(  // line separate
      ExtractSecretEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.adaptor_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ExtractSecretEcdsaAdaptorRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ExtractSecretEcdsaAdaptorRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ExtractSecretEcdsaAdaptorRequestMapTable =
    cfd::core::JsonTableMap<ExtractSecretEcdsaAdaptorRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ExtractSecretEcdsaAdaptorRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ExtractSecretEcdsaAdaptorRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(adaptorSignature) value
   */
  std::string adaptor_signature_ = "";
  /**
   * @brief JsonAPI(signature) value
   */
  std::string signature_ = "";
  /**
   * @brief JsonAPI(adaptor) value
   */
  std::string adaptor_ = "";
};

// ------------------------------------------------------------------------
// SecretData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SecretData) class
 */
class SecretData
  : public cfd::core::JsonClassBase<SecretData> {
 public:
  SecretData() {
    CollectFieldName();
  }
  virtual ~SecretData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of secret
   * @return secret
   */
  std::string GetSecret() const {
    return secret_;
  }
  /**
   * @brief Set to secret
   * @param[in] secret    setting value.
   */
  void SetSecret(  // line separate
    const std::string& secret) {  // NOLINT
    this->secret_ = secret;
  }
  /**
   * @brief Get data type of secret
   * @return Data type of secret
   */
  static std::string GetSecretFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of secret field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSecretString(  // line separate
      const SecretData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.secret_);
  }
  /**
   * @brief Set json object to secret field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSecretString(  // line separate
      SecretData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.secret_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SecretDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SecretDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SecretDataMapTable =
    cfd::core::JsonTableMap<SecretData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SecretDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SecretDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(secret) value
   */
  std::string secret_ = "";
};

// ------------------------------------------------------------------------
// FinalizePsbtInputRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (FinalizePsbtInputRequest) class
 */
class FinalizePsbtInputRequest
  : public cfd::core::JsonClassBase<FinalizePsbtInputRequest> {
 public:
  FinalizePsbtInputRequest() {
    CollectFieldName();
  }
  virtual ~FinalizePsbtInputRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of psbt
   * @return psbt
   */
  std::string GetPsbt() const {
    return psbt_;
  }
  /**
   * @brief Set to psbt
   * @param[in] psbt    setting value.
   */
  void SetPsbt(  // line separate
    const std::string& psbt) {  // NOLINT
    this->psbt_ = psbt;
  }
  /**
   * @brief Get data type of psbt
   * @return Data type of psbt
   */
  static std::string GetPsbtFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of psbt field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPsbtString(  // line separate
      const FinalizePsbtInputRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.psbt_);
  }
  /**
   * @brief Set json object to psbt field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPsbtString(  // line separate
      FinalizePsbtInputRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.psbt_, json_value);
  }

  /**
   * @brief Get of inputs.
   * @return inputs
   */
  JsonObjectVector<FinalizedPsbtInputData, FinalizedPsbtInputDataStruct>& GetInputs() {  // NOLINT
    return inputs_;
  }
  /**
   * @brief Set to inputs.
   * @param[in] inputs    setting value.
   */
  void SetInputs(  // line separate
      const JsonObjectVector<FinalizedPsbtInputData, FinalizedPsbtInputDataStruct>& inputs) {  // NOLINT
    this->inputs_ = inputs;
  }
  /**
   * @brief Get data type of inputs.
   * @return Data type of inputs.
   */
  static std::string GetInputsFieldType() {
    return "JsonObjectVector<FinalizedPsbtInputData, FinalizedPsbtInputDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of inputs field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetInputsString(  // line separate
      const FinalizePsbtInputRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.inputs_.Serialize();
  }
  /**
   * @brief Set json object to inputs field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetInputsString(  // line separate
      FinalizePsbtInputRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.inputs_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const FinalizePsbtInputRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  FinalizePsbtInputRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using FinalizePsbtInputRequestMapTable =
    cfd::core::JsonTableMap<FinalizePsbtInputRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const FinalizePsbtInputRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static FinalizePsbtInputRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(psbt) value
   */
  std::string psbt_ = "";
  /**
   * @brief JsonAPI(inputs) value
   */
  JsonObjectVector<FinalizedPsbtInputData, FinalizedPsbtInputDataStruct> inputs_;  // NOLINT
};

// ------------------------------------------------------------------------
// FinalizePsbtRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (FinalizePsbtRequest) class
 */
class FinalizePsbtRequest
  : public cfd::core::JsonClassBase<FinalizePsbtRequest> {
 public:
  FinalizePsbtRequest() {
    CollectFieldName();
  }
  virtual ~FinalizePsbtRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of psbt
   * @return psbt
   */
  std::string GetPsbt() const {
    return psbt_;
  }
  /**
   * @brief Set to psbt
   * @param[in] psbt    setting value.
   */
  void SetPsbt(  // line separate
    const std::string& psbt) {  // NOLINT
    this->psbt_ = psbt;
  }
  /**
   * @brief Get data type of psbt
   * @return Data type of psbt
   */
  static std::string GetPsbtFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of psbt field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPsbtString(  // line separate
      const FinalizePsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.psbt_);
  }
  /**
   * @brief Set json object to psbt field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPsbtString(  // line separate
      FinalizePsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.psbt_, json_value);
  }

  /**
   * @brief Get of extract
   * @return extract
   */
  bool GetExtract() const {
    return extract_;
  }
  /**
   * @brief Set to extract
   * @param[in] extract    setting value.
   */
  void SetExtract(  // line separate
    const bool& extract) {  // NOLINT
    this->extract_ = extract;
  }
  /**
   * @brief Get data type of extract
   * @return Data type of extract
   */
  static std::string GetExtractFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of extract field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExtractString(  // line separate
      const FinalizePsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.extract_);
  }
  /**
   * @brief Set json object to extract field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExtractString(  // line separate
      FinalizePsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.extract_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const FinalizePsbtRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  FinalizePsbtRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using FinalizePsbtRequestMapTable =
    cfd::core::JsonTableMap<FinalizePsbtRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const FinalizePsbtRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static FinalizePsbtRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(psbt) value
   */
  std::string psbt_ = "";
  /**
   * @brief JsonAPI(extract) value
   */
  bool extract_ = true;
};

// ------------------------------------------------------------------------
// FinalizePsbtResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (FinalizePsbtResponse) class
 */
class FinalizePsbtResponse
  : public cfd::core::JsonClassBase<FinalizePsbtResponse> {
 public:
  FinalizePsbtResponse() {
    CollectFieldName();
  }
  virtual ~FinalizePsbtResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of psbt
   * @return psbt
   */
  std::string GetPsbt() const {
    return psbt_;
  }
  /**
   * @brief Set to psbt
   * @param[in] psbt    setting value.
   */
  void SetPsbt(  // line separate
    const std::string& psbt) {  // NOLINT
    this->psbt_ = psbt;
  }
  /**
   * @brief Get data type of psbt
   * @return Data type of psbt
   */
  static std::string GetPsbtFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of psbt field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPsbtString(  // line separate
      const FinalizePsbtResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.psbt_);
  }
  /**
   * @brief Set json object to psbt field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPsbtString(  // line separate
      FinalizePsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.psbt_, json_value);
  }

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const FinalizePsbtResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      FinalizePsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const FinalizePsbtResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      FinalizePsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of complete
   * @return complete
   */
  bool GetComplete() const {
    return complete_;
  }
  /**
   * @brief Set to complete
   * @param[in] complete    setting value.
   */
  void SetComplete(  // line separate
    const bool& complete) {  // NOLINT
    this->complete_ = complete;
  }
  /**
   * @brief Get data type of complete
   * @return Data type of complete
   */
  static std::string GetCompleteFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of complete field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetCompleteString(  // line separate
      const FinalizePsbtResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.complete_);
  }
  /**
   * @brief Set json object to complete field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetCompleteString(  // line separate
      FinalizePsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.complete_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const FinalizePsbtResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  FinalizePsbtResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using FinalizePsbtResponseMapTable =
    cfd::core::JsonTableMap<FinalizePsbtResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const FinalizePsbtResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static FinalizePsbtResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(psbt) value
   */
  std::string psbt_ = "";
  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(complete) value
   */
  bool complete_ = true;
};

// ------------------------------------------------------------------------
// FundPsbtRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (FundPsbtRequest) class
 */
class FundPsbtRequest
  : public cfd::core::JsonClassBase<FundPsbtRequest> {
 public:
  FundPsbtRequest() {
    CollectFieldName();
  }
  virtual ~FundPsbtRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of psbt
   * @return psbt
   */
  std::string GetPsbt() const {
    return psbt_;
  }
  /**
   * @brief Set to psbt
   * @param[in] psbt    setting value.
   */
  void SetPsbt(  // line separate
    const std::string& psbt) {  // NOLINT
    this->psbt_ = psbt;
  }
  /**
   * @brief Get data type of psbt
   * @return Data type of psbt
   */
  static std::string GetPsbtFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of psbt field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPsbtString(  // line separate
      const FundPsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.psbt_);
  }
  /**
   * @brief Set json object to psbt field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPsbtString(  // line separate
      FundPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.psbt_, json_value);
  }

  /**
   * @brief Get of utxos.
   * @return utxos
   */
  JsonObjectVector<FundUtxoJsonData, FundUtxoJsonDataStruct>& GetUtxos() {  // NOLINT
    return utxos_;
  }
  /**
   * @brief Set to utxos.
   * @param[in] utxos    setting value.
   */
  void SetUtxos(  // line separate
      const JsonObjectVector<FundUtxoJsonData, FundUtxoJsonDataStruct>& utxos) {  // NOLINT
    this->utxos_ = utxos;
  }
  /**
   * @brief Get data type of utxos.
   * @return Data type of utxos.
   */
  static std::string GetUtxosFieldType() {
    return "JsonObjectVector<FundUtxoJsonData, FundUtxoJsonDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of utxos field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUtxosString(  // line separate
      const FundPsbtRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.utxos_.Serialize();
  }
  /**
   * @brief Set json object to utxos field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUtxosString(  // line separate
      FundPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.utxos_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const FundPsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      FundPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of reservedDescriptor
   * @return reservedDescriptor
   */
  std::string GetReservedDescriptor() const {
    return reserved_descriptor_;
  }
  /**
   * @brief Set to reservedDescriptor
   * @param[in] reserved_descriptor    setting value.
   */
  void SetReservedDescriptor(  // line separate
    const std::string& reserved_descriptor) {  // NOLINT
    this->reserved_descriptor_ = reserved_descriptor;
  }
  /**
   * @brief Get data type of reservedDescriptor
   * @return Data type of reservedDescriptor
   */
  static std::string GetReservedDescriptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of reservedDescriptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetReservedDescriptorString(  // line separate
      const FundPsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.reserved_descriptor_);
  }
  /**
   * @brief Set json object to reservedDescriptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetReservedDescriptorString(  // line separate
      FundPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.reserved_descriptor_, json_value);
  }

  /**
   * @brief Get of feeInfo.
   * @return feeInfo
   */
  FundFeeInformation& GetFeeInfo() {  // NOLINT
    return fee_info_;
  }
  /**
   * @brief Set to feeInfo.
   * @param[in] fee_info    setting value.
   */
  void SetFeeInfo(  // line separate
      const FundFeeInformation& fee_info) {  // NOLINT
    this->fee_info_ = fee_info;
  }
  /**
   * @brief Get data type of feeInfo.
   * @return Data type of feeInfo.
   */
  static std::string GetFeeInfoFieldType() {
    return "FundFeeInformation";  // NOLINT
  }
  /**
   * @brief Get json string of feeInfo field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetFeeInfoString(  // line separate
      const FundPsbtRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.fee_info_.Serialize();
  }
  /**
   * @brief Set json object to feeInfo field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetFeeInfoString(  // line separate
      FundPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.fee_info_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const FundPsbtRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  FundPsbtRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using FundPsbtRequestMapTable =
    cfd::core::JsonTableMap<FundPsbtRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const FundPsbtRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static FundPsbtRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(psbt) value
   */
  std::string psbt_ = "";
  /**
   * @brief JsonAPI(utxos) value
   */
  JsonObjectVector<FundUtxoJsonData, FundUtxoJsonDataStruct> utxos_;  // NOLINT
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(reservedDescriptor) value
   */
  std::string reserved_descriptor_ = "";
  /**
   * @brief JsonAPI(feeInfo) value
   */
  FundFeeInformation fee_info_;  // NOLINT
};

// ------------------------------------------------------------------------
// FundPsbtResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (FundPsbtResponse) class
 */
class FundPsbtResponse
  : public cfd::core::JsonClassBase<FundPsbtResponse> {
 public:
  FundPsbtResponse() {
    CollectFieldName();
  }
  virtual ~FundPsbtResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of psbt
   * @return psbt
   */
  std::string GetPsbt() const {
    return psbt_;
  }
  /**
   * @brief Set to psbt
   * @param[in] psbt    setting value.
   */
  void SetPsbt(  // line separate
    const std::string& psbt) {  // NOLINT
    this->psbt_ = psbt;
  }
  /**
   * @brief Get data type of psbt
   * @return Data type of psbt
   */
  static std::string GetPsbtFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of psbt field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPsbtString(  // line separate
      const FundPsbtResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.psbt_);
  }
  /**
   * @brief Set json object to psbt field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPsbtString(  // line separate
      FundPsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.psbt_, json_value);
  }

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const FundPsbtResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      FundPsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of usedAddresses.
   * @return usedAddresses
   */
  JsonValueVector<std::string>& GetUsedAddresses() {  // NOLINT
    return used_addresses_;
  }
  /**
   * @brief Set to usedAddresses.
   * @param[in] used_addresses    setting value.
   */
  void SetUsedAddresses(  // line separate
      const JsonValueVector<std::string>& used_addresses) {  // NOLINT
    this->used_addresses_ = used_addresses;
  }
  /**
   * @brief Get data type of usedAddresses.
   * @return Data type of usedAddresses.
   */
  static std::string GetUsedAddressesFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of usedAddresses field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUsedAddressesString(  // line separate
      const FundPsbtResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.used_addresses_.Serialize();
  }
  /**
   * @brief Set json object to usedAddresses field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUsedAddressesString(  // line separate
      FundPsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.used_addresses_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of feeAmount
   * @return feeAmount
   */
  int64_t GetFeeAmount() const {
    return fee_amount_;
  }
  /**
   * @brief Set to feeAmount
   * @param[in] fee_amount    setting value.
   */
  void SetFeeAmount(  // line separate
    const int64_t& fee_amount) {  // NOLINT
    this->fee_amount_ = fee_amount;
  }
  /**
   * @brief Get data type of feeAmount
   * @return Data type of feeAmount
   */
  static std::string GetFeeAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of feeAmount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFeeAmountString(  // line separate
      const FundPsbtResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fee_amount_);
  }
  /**
   * @brief Set json object to feeAmount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFeeAmountString(  // line separate
      FundPsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fee_amount_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const FundPsbtResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  FundPsbtResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using FundPsbtResponseMapTable =
    cfd::core::JsonTableMap<FundPsbtResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const FundPsbtResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static FundPsbtResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(psbt) value
   */
  std::string psbt_ = "";
  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(usedAddresses) value
   */
  JsonValueVector<std::string> used_addresses_;  // NOLINT
  /**
   * @brief JsonAPI(feeAmount) value
   */
  int64_t fee_amount_ = 0;
};

// ------------------------------------------------------------------------
// FundRawTransactionRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (FundRawTransactionRequest) class
 */
class FundRawTransactionRequest
  : public cfd::core::JsonClassBase<FundRawTransactionRequest> {
 public:
  FundRawTransactionRequest() {
    CollectFieldName();
  }
  virtual ~FundRawTransactionRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of utxos.
   * @return utxos
   */
  JsonObjectVector<FundUtxoJsonData, FundUtxoJsonDataStruct>& GetUtxos() {  // NOLINT
    return utxos_;
  }
  /**
   * @brief Set to utxos.
   * @param[in] utxos    setting value.
   */
  void SetUtxos(  // line separate
      const JsonObjectVector<FundUtxoJsonData, FundUtxoJsonDataStruct>& utxos) {  // NOLINT
    this->utxos_ = utxos;
  }
  /**
   * @brief Get data type of utxos.
   * @return Data type of utxos.
   */
  static std::string GetUtxosFieldType() {
    return "JsonObjectVector<FundUtxoJsonData, FundUtxoJsonDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of utxos field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUtxosString(  // line separate
      const FundRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.utxos_.Serialize();
  }
  /**
   * @brief Set json object to utxos field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUtxosString(  // line separate
      FundRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.utxos_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of selectUtxos.
   * @return selectUtxos
   */
  JsonObjectVector<FundSelectUtxoData, FundSelectUtxoDataStruct>& GetSelectUtxos() {  // NOLINT
    return select_utxos_;
  }
  /**
   * @brief Set to selectUtxos.
   * @param[in] select_utxos    setting value.
   */
  void SetSelectUtxos(  // line separate
      const JsonObjectVector<FundSelectUtxoData, FundSelectUtxoDataStruct>& select_utxos) {  // NOLINT
    this->select_utxos_ = select_utxos;
  }
  /**
   * @brief Get data type of selectUtxos.
   * @return Data type of selectUtxos.
   */
  static std::string GetSelectUtxosFieldType() {
    return "JsonObjectVector<FundSelectUtxoData, FundSelectUtxoDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of selectUtxos field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetSelectUtxosString(  // line separate
      const FundRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.select_utxos_.Serialize();
  }
  /**
   * @brief Set json object to selectUtxos field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetSelectUtxosString(  // line separate
      FundRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.select_utxos_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const FundRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      FundRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const FundRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      FundRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const FundRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      FundRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of targetAmount
   * @return targetAmount
   */
  int64_t GetTargetAmount() const {
    return target_amount_;
  }
  /**
   * @brief Set to targetAmount
   * @param[in] target_amount    setting value.
   */
  void SetTargetAmount(  // line separate
    const int64_t& target_amount) {  // NOLINT
    this->target_amount_ = target_amount;
  }
  /**
   * @brief Get data type of targetAmount
   * @return Data type of targetAmount
   */
  static std::string GetTargetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of targetAmount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTargetAmountString(  // line separate
      const FundRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.target_amount_);
  }
  /**
   * @brief Set json object to targetAmount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTargetAmountString(  // line separate
      FundRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.target_amount_, json_value);
  }

  /**
   * @brief Get of reserveAddress
   * @return reserveAddress
   */
  std::string GetReserveAddress() const {
    return reserve_address_;
  }
  /**
   * @brief Set to reserveAddress
   * @param[in] reserve_address    setting value.
   */
  void SetReserveAddress(  // line separate
    const std::string& reserve_address) {  // NOLINT
    this->reserve_address_ = reserve_address;
  }
  /**
   * @brief Get data type of reserveAddress
   * @return Data type of reserveAddress
   */
  static std::string GetReserveAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of reserveAddress field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetReserveAddressString(  // line separate
      const FundRawTransactionRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.reserve_address_);
  }
  /**
   * @brief Set json object to reserveAddress field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetReserveAddressString(  // line separate
      FundRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.reserve_address_, json_value);
  }

  /**
   * @brief Get of targets.
   * @return targets
   */
  JsonObjectVector<FundAmountMapData, FundAmountMapDataStruct>& GetTargets() {  // NOLINT
    return targets_;
  }
  /**
   * @brief Set to targets.
   * @param[in] targets    setting value.
   */
  void SetTargets(  // line separate
      const JsonObjectVector<FundAmountMapData, FundAmountMapDataStruct>& targets) {  // NOLINT
    this->targets_ = targets;
  }
  /**
   * @brief Get data type of targets.
   * @return Data type of targets.
   */
  static std::string GetTargetsFieldType() {
    return "JsonObjectVector<FundAmountMapData, FundAmountMapDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of targets field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTargetsString(  // line separate
      const FundRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.targets_.Serialize();
  }
  /**
   * @brief Set json object to targets field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTargetsString(  // line separate
      FundRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.targets_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of feeInfo.
   * @return feeInfo
   */
  FundFeeInformation& GetFeeInfo() {  // NOLINT
    return fee_info_;
  }
  /**
   * @brief Set to feeInfo.
   * @param[in] fee_info    setting value.
   */
  void SetFeeInfo(  // line separate
      const FundFeeInformation& fee_info) {  // NOLINT
    this->fee_info_ = fee_info;
  }
  /**
   * @brief Get data type of feeInfo.
   * @return Data type of feeInfo.
   */
  static std::string GetFeeInfoFieldType() {
    return "FundFeeInformation";  // NOLINT
  }
  /**
   * @brief Get json string of feeInfo field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetFeeInfoString(  // line separate
      const FundRawTransactionRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.fee_info_.Serialize();
  }
  /**
   * @brief Set json object to feeInfo field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetFeeInfoString(  // line separate
      FundRawTransactionRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.fee_info_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const FundRawTransactionRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  FundRawTransactionRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using FundRawTransactionRequestMapTable =
    cfd::core::JsonTableMap<FundRawTransactionRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const FundRawTransactionRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static FundRawTransactionRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(utxos) value
   */
  JsonObjectVector<FundUtxoJsonData, FundUtxoJsonDataStruct> utxos_;  // NOLINT
  /**
   * @brief JsonAPI(selectUtxos) value
   */
  JsonObjectVector<FundSelectUtxoData, FundSelectUtxoDataStruct> select_utxos_;  // NOLINT
  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(targetAmount) value
   */
  int64_t target_amount_ = 0;
  /**
   * @brief JsonAPI(reserveAddress) value
   */
  std::string reserve_address_ = "";
  /**
   * @brief JsonAPI(targets) value
   */
  JsonObjectVector<FundAmountMapData, FundAmountMapDataStruct> targets_;  // NOLINT
  /**
   * @brief JsonAPI(feeInfo) value
   */
  FundFeeInformation fee_info_;  // NOLINT
};

// ------------------------------------------------------------------------
// FundRawTransactionResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (FundRawTransactionResponse) class
 */
class FundRawTransactionResponse
  : public cfd::core::JsonClassBase<FundRawTransactionResponse> {
 public:
  FundRawTransactionResponse() {
    CollectFieldName();
  }
  virtual ~FundRawTransactionResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const FundRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      FundRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of usedAddresses.
   * @return usedAddresses
   */
  JsonValueVector<std::string>& GetUsedAddresses() {  // NOLINT
    return used_addresses_;
  }
  /**
   * @brief Set to usedAddresses.
   * @param[in] used_addresses    setting value.
   */
  void SetUsedAddresses(  // line separate
      const JsonValueVector<std::string>& used_addresses) {  // NOLINT
    this->used_addresses_ = used_addresses;
  }
  /**
   * @brief Get data type of usedAddresses.
   * @return Data type of usedAddresses.
   */
  static std::string GetUsedAddressesFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of usedAddresses field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUsedAddressesString(  // line separate
      const FundRawTransactionResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.used_addresses_.Serialize();
  }
  /**
   * @brief Set json object to usedAddresses field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUsedAddressesString(  // line separate
      FundRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.used_addresses_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of feeAmount
   * @return feeAmount
   */
  int64_t GetFeeAmount() const {
    return fee_amount_;
  }
  /**
   * @brief Set to feeAmount
   * @param[in] fee_amount    setting value.
   */
  void SetFeeAmount(  // line separate
    const int64_t& fee_amount) {  // NOLINT
    this->fee_amount_ = fee_amount;
  }
  /**
   * @brief Get data type of feeAmount
   * @return Data type of feeAmount
   */
  static std::string GetFeeAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of feeAmount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFeeAmountString(  // line separate
      const FundRawTransactionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fee_amount_);
  }
  /**
   * @brief Set json object to feeAmount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFeeAmountString(  // line separate
      FundRawTransactionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fee_amount_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const FundRawTransactionResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  FundRawTransactionResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using FundRawTransactionResponseMapTable =
    cfd::core::JsonTableMap<FundRawTransactionResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const FundRawTransactionResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static FundRawTransactionResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(usedAddresses) value
   */
  JsonValueVector<std::string> used_addresses_;  // NOLINT
  /**
   * @brief JsonAPI(feeAmount) value
   */
  int64_t fee_amount_ = 0;
};

// ------------------------------------------------------------------------
// GetAddressInfoRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetAddressInfoRequest) class
 */
class GetAddressInfoRequest
  : public cfd::core::JsonClassBase<GetAddressInfoRequest> {
 public:
  GetAddressInfoRequest() {
    CollectFieldName();
  }
  virtual ~GetAddressInfoRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const GetAddressInfoRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      GetAddressInfoRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const GetAddressInfoRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      GetAddressInfoRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetAddressInfoRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetAddressInfoRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetAddressInfoRequestMapTable =
    cfd::core::JsonTableMap<GetAddressInfoRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetAddressInfoRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetAddressInfoRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
};

// ------------------------------------------------------------------------
// GetAddressInfoResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetAddressInfoResponse) class
 */
class GetAddressInfoResponse
  : public cfd::core::JsonClassBase<GetAddressInfoResponse> {
 public:
  GetAddressInfoResponse() {
    CollectFieldName();
  }
  virtual ~GetAddressInfoResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of lockingScript
   * @return lockingScript
   */
  std::string GetLockingScript() const {
    return locking_script_;
  }
  /**
   * @brief Set to lockingScript
   * @param[in] locking_script    setting value.
   */
  void SetLockingScript(  // line separate
    const std::string& locking_script) {  // NOLINT
    this->locking_script_ = locking_script;
  }
  /**
   * @brief Get data type of lockingScript
   * @return Data type of lockingScript
   */
  static std::string GetLockingScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of lockingScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLockingScriptString(  // line separate
      const GetAddressInfoResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locking_script_);
  }
  /**
   * @brief Set json object to lockingScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLockingScriptString(  // line separate
      GetAddressInfoResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locking_script_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const GetAddressInfoResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      GetAddressInfoResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const GetAddressInfoResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      GetAddressInfoResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Get of witnessVersion
   * @return witnessVersion
   */
  int32_t GetWitnessVersion() const {
    return witness_version_;
  }
  /**
   * @brief Set to witnessVersion
   * @param[in] witness_version    setting value.
   */
  void SetWitnessVersion(  // line separate
    const int32_t& witness_version) {  // NOLINT
    this->witness_version_ = witness_version;
  }
  /**
   * @brief Get data type of witnessVersion
   * @return Data type of witnessVersion
   */
  static std::string GetWitnessVersionFieldType() {
    return "int32_t";
  }
  /**
   * @brief Get json string of witnessVersion field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetWitnessVersionString(  // line separate
      const GetAddressInfoResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.witness_version_);
  }
  /**
   * @brief Set json object to witnessVersion field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetWitnessVersionString(  // line separate
      GetAddressInfoResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.witness_version_, json_value);
  }

  /**
   * @brief Get of hash
   * @return hash
   */
  std::string GetHash() const {
    return hash_;
  }
  /**
   * @brief Set to hash
   * @param[in] hash    setting value.
   */
  void SetHash(  // line separate
    const std::string& hash) {  // NOLINT
    this->hash_ = hash;
  }
  /**
   * @brief Get data type of hash
   * @return Data type of hash
   */
  static std::string GetHashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashString(  // line separate
      const GetAddressInfoResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_);
  }
  /**
   * @brief Set json object to hash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashString(  // line separate
      GetAddressInfoResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetAddressInfoResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetAddressInfoResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetAddressInfoResponseMapTable =
    cfd::core::JsonTableMap<GetAddressInfoResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetAddressInfoResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetAddressInfoResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(lockingScript) value
   */
  std::string locking_script_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "p2pkh";
  /**
   * @brief JsonAPI(witnessVersion) value
   */
  int32_t witness_version_ = 0;
  /**
   * @brief JsonAPI(hash) value
   */
  std::string hash_ = "";
};

// ------------------------------------------------------------------------
// GetAddressesFromMultisigRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetAddressesFromMultisigRequest) class
 */
class GetAddressesFromMultisigRequest
  : public cfd::core::JsonClassBase<GetAddressesFromMultisigRequest> {
 public:
  GetAddressesFromMultisigRequest() {
    CollectFieldName();
  }
  virtual ~GetAddressesFromMultisigRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const GetAddressesFromMultisigRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      GetAddressesFromMultisigRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of redeemScript
   * @return redeemScript
   */
  std::string GetRedeemScript() const {
    return redeem_script_;
  }
  /**
   * @brief Set to redeemScript
   * @param[in] redeem_script    setting value.
   */
  void SetRedeemScript(  // line separate
    const std::string& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeemScript
   * @return Data type of redeemScript
   */
  static std::string GetRedeemScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of redeemScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRedeemScriptString(  // line separate
      const GetAddressesFromMultisigRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.redeem_script_);
  }
  /**
   * @brief Set json object to redeemScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRedeemScriptString(  // line separate
      GetAddressesFromMultisigRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.redeem_script_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const GetAddressesFromMultisigRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      GetAddressesFromMultisigRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const GetAddressesFromMultisigRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      GetAddressesFromMultisigRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetAddressesFromMultisigRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetAddressesFromMultisigRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetAddressesFromMultisigRequestMapTable =
    cfd::core::JsonTableMap<GetAddressesFromMultisigRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetAddressesFromMultisigRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetAddressesFromMultisigRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(redeemScript) value
   */
  std::string redeem_script_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "p2wpkh";
};

// ------------------------------------------------------------------------
// GetAddressesFromMultisigResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetAddressesFromMultisigResponse) class
 */
class GetAddressesFromMultisigResponse
  : public cfd::core::JsonClassBase<GetAddressesFromMultisigResponse> {
 public:
  GetAddressesFromMultisigResponse() {
    CollectFieldName();
  }
  virtual ~GetAddressesFromMultisigResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of addresses.
   * @return addresses
   */
  JsonValueVector<std::string>& GetAddresses() {  // NOLINT
    return addresses_;
  }
  /**
   * @brief Set to addresses.
   * @param[in] addresses    setting value.
   */
  void SetAddresses(  // line separate
      const JsonValueVector<std::string>& addresses) {  // NOLINT
    this->addresses_ = addresses;
  }
  /**
   * @brief Get data type of addresses.
   * @return Data type of addresses.
   */
  static std::string GetAddressesFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of addresses field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetAddressesString(  // line separate
      const GetAddressesFromMultisigResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.addresses_.Serialize();
  }
  /**
   * @brief Set json object to addresses field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetAddressesString(  // line separate
      GetAddressesFromMultisigResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.addresses_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of pubkeys.
   * @return pubkeys
   */
  JsonValueVector<std::string>& GetPubkeys() {  // NOLINT
    return pubkeys_;
  }
  /**
   * @brief Set to pubkeys.
   * @param[in] pubkeys    setting value.
   */
  void SetPubkeys(  // line separate
      const JsonValueVector<std::string>& pubkeys) {  // NOLINT
    this->pubkeys_ = pubkeys;
  }
  /**
   * @brief Get data type of pubkeys.
   * @return Data type of pubkeys.
   */
  static std::string GetPubkeysFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of pubkeys field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetPubkeysString(  // line separate
      const GetAddressesFromMultisigResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.pubkeys_.Serialize();
  }
  /**
   * @brief Set json object to pubkeys field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetPubkeysString(  // line separate
      GetAddressesFromMultisigResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.pubkeys_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of requireNum
   * @return requireNum
   */
  uint32_t GetRequireNum() const {
    return require_num_;
  }
  /**
   * @brief Set to requireNum
   * @param[in] require_num    setting value.
   */
  void SetRequireNum(  // line separate
    const uint32_t& require_num) {  // NOLINT
    this->require_num_ = require_num;
  }
  /**
   * @brief Get data type of requireNum
   * @return Data type of requireNum
   */
  static std::string GetRequireNumFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of requireNum field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRequireNumString(  // line separate
      const GetAddressesFromMultisigResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.require_num_);
  }
  /**
   * @brief Set json object to requireNum field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRequireNumString(  // line separate
      GetAddressesFromMultisigResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.require_num_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetAddressesFromMultisigResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetAddressesFromMultisigResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetAddressesFromMultisigResponseMapTable =
    cfd::core::JsonTableMap<GetAddressesFromMultisigResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetAddressesFromMultisigResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetAddressesFromMultisigResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(addresses) value
   */
  JsonValueVector<std::string> addresses_;  // NOLINT
  /**
   * @brief JsonAPI(pubkeys) value
   */
  JsonValueVector<std::string> pubkeys_;  // NOLINT
  /**
   * @brief JsonAPI(requireNum) value
   */
  uint32_t require_num_ = 0;
};

// ------------------------------------------------------------------------
// GetCommitmentRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetCommitmentRequest) class
 */
class GetCommitmentRequest
  : public cfd::core::JsonClassBase<GetCommitmentRequest> {
 public:
  GetCommitmentRequest() {
    CollectFieldName();
  }
  virtual ~GetCommitmentRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of amount
   * @return amount
   */
  int64_t GetAmount() const {
    return amount_;
  }
  /**
   * @brief Set to amount
   * @param[in] amount    setting value.
   */
  void SetAmount(  // line separate
    const int64_t& amount) {  // NOLINT
    this->amount_ = amount;
  }
  /**
   * @brief Get data type of amount
   * @return Data type of amount
   */
  static std::string GetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of amount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountString(  // line separate
      const GetCommitmentRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_);
  }
  /**
   * @brief Set json object to amount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountString(  // line separate
      GetCommitmentRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_, json_value);
  }

  /**
   * @brief Get of asset
   * @return asset
   */
  std::string GetAsset() const {
    return asset_;
  }
  /**
   * @brief Set to asset
   * @param[in] asset    setting value.
   */
  void SetAsset(  // line separate
    const std::string& asset) {  // NOLINT
    this->asset_ = asset;
  }
  /**
   * @brief Get data type of asset
   * @return Data type of asset
   */
  static std::string GetAssetFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of asset field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetString(  // line separate
      const GetCommitmentRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_);
  }
  /**
   * @brief Set json object to asset field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetString(  // line separate
      GetCommitmentRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_, json_value);
  }

  /**
   * @brief Get of assetBlindFactor
   * @return assetBlindFactor
   */
  std::string GetAssetBlindFactor() const {
    return asset_blind_factor_;
  }
  /**
   * @brief Set to assetBlindFactor
   * @param[in] asset_blind_factor    setting value.
   */
  void SetAssetBlindFactor(  // line separate
    const std::string& asset_blind_factor) {  // NOLINT
    this->asset_blind_factor_ = asset_blind_factor;
  }
  /**
   * @brief Get data type of assetBlindFactor
   * @return Data type of assetBlindFactor
   */
  static std::string GetAssetBlindFactorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetBlindFactor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetBlindFactorString(  // line separate
      const GetCommitmentRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_blind_factor_);
  }
  /**
   * @brief Set json object to assetBlindFactor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetBlindFactorString(  // line separate
      GetCommitmentRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_blind_factor_, json_value);
  }

  /**
   * @brief Get of blindFactor
   * @return blindFactor
   */
  std::string GetBlindFactor() const {
    return blind_factor_;
  }
  /**
   * @brief Set to blindFactor
   * @param[in] blind_factor    setting value.
   */
  void SetBlindFactor(  // line separate
    const std::string& blind_factor) {  // NOLINT
    this->blind_factor_ = blind_factor;
  }
  /**
   * @brief Get data type of blindFactor
   * @return Data type of blindFactor
   */
  static std::string GetBlindFactorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of blindFactor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBlindFactorString(  // line separate
      const GetCommitmentRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.blind_factor_);
  }
  /**
   * @brief Set json object to blindFactor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBlindFactorString(  // line separate
      GetCommitmentRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.blind_factor_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetCommitmentRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetCommitmentRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetCommitmentRequestMapTable =
    cfd::core::JsonTableMap<GetCommitmentRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetCommitmentRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetCommitmentRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(amount) value
   */
  int64_t amount_ = 0;
  /**
   * @brief JsonAPI(asset) value
   */
  std::string asset_ = "";
  /**
   * @brief JsonAPI(assetBlindFactor) value
   */
  std::string asset_blind_factor_ = "";
  /**
   * @brief JsonAPI(blindFactor) value
   */
  std::string blind_factor_ = "";
};

// ------------------------------------------------------------------------
// GetCommitmentResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetCommitmentResponse) class
 */
class GetCommitmentResponse
  : public cfd::core::JsonClassBase<GetCommitmentResponse> {
 public:
  GetCommitmentResponse() {
    CollectFieldName();
  }
  virtual ~GetCommitmentResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of assetCommitment
   * @return assetCommitment
   */
  std::string GetAssetCommitment() const {
    return asset_commitment_;
  }
  /**
   * @brief Set to assetCommitment
   * @param[in] asset_commitment    setting value.
   */
  void SetAssetCommitment(  // line separate
    const std::string& asset_commitment) {  // NOLINT
    this->asset_commitment_ = asset_commitment;
  }
  /**
   * @brief Get data type of assetCommitment
   * @return Data type of assetCommitment
   */
  static std::string GetAssetCommitmentFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of assetCommitment field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAssetCommitmentString(  // line separate
      const GetCommitmentResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.asset_commitment_);
  }
  /**
   * @brief Set json object to assetCommitment field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAssetCommitmentString(  // line separate
      GetCommitmentResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.asset_commitment_, json_value);
  }

  /**
   * @brief Get of amountCommitment
   * @return amountCommitment
   */
  std::string GetAmountCommitment() const {
    return amount_commitment_;
  }
  /**
   * @brief Set to amountCommitment
   * @param[in] amount_commitment    setting value.
   */
  void SetAmountCommitment(  // line separate
    const std::string& amount_commitment) {  // NOLINT
    this->amount_commitment_ = amount_commitment;
  }
  /**
   * @brief Get data type of amountCommitment
   * @return Data type of amountCommitment
   */
  static std::string GetAmountCommitmentFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of amountCommitment field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAmountCommitmentString(  // line separate
      const GetCommitmentResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.amount_commitment_);
  }
  /**
   * @brief Set json object to amountCommitment field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAmountCommitmentString(  // line separate
      GetCommitmentResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.amount_commitment_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetCommitmentResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetCommitmentResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetCommitmentResponseMapTable =
    cfd::core::JsonTableMap<GetCommitmentResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetCommitmentResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetCommitmentResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(assetCommitment) value
   */
  std::string asset_commitment_ = "";
  /**
   * @brief JsonAPI(amountCommitment) value
   */
  std::string amount_commitment_ = "";
};


// ------------------------------------------------------------------------
// GetDefaultBlindingKeyRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetDefaultBlindingKeyRequest) class
 */
class GetDefaultBlindingKeyRequest
  : public cfd::core::JsonClassBase<GetDefaultBlindingKeyRequest> {
 public:
  GetDefaultBlindingKeyRequest() {
    CollectFieldName();
  }
  virtual ~GetDefaultBlindingKeyRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of masterBlindingKey
   * @return masterBlindingKey
   */
  std::string GetMasterBlindingKey() const {
    return master_blinding_key_;
  }
  /**
   * @brief Set to masterBlindingKey
   * @param[in] master_blinding_key    setting value.
   */
  void SetMasterBlindingKey(  // line separate
    const std::string& master_blinding_key) {  // NOLINT
    this->master_blinding_key_ = master_blinding_key;
  }
  /**
   * @brief Get data type of masterBlindingKey
   * @return Data type of masterBlindingKey
   */
  static std::string GetMasterBlindingKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of masterBlindingKey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMasterBlindingKeyString(  // line separate
      const GetDefaultBlindingKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.master_blinding_key_);
  }
  /**
   * @brief Set json object to masterBlindingKey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMasterBlindingKeyString(  // line separate
      GetDefaultBlindingKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.master_blinding_key_, json_value);
  }

  /**
   * @brief Get of lockingScript
   * @return lockingScript
   */
  std::string GetLockingScript() const {
    return locking_script_;
  }
  /**
   * @brief Set to lockingScript
   * @param[in] locking_script    setting value.
   */
  void SetLockingScript(  // line separate
    const std::string& locking_script) {  // NOLINT
    this->locking_script_ = locking_script;
  }
  /**
   * @brief Get data type of lockingScript
   * @return Data type of lockingScript
   */
  static std::string GetLockingScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of lockingScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLockingScriptString(  // line separate
      const GetDefaultBlindingKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locking_script_);
  }
  /**
   * @brief Set json object to lockingScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLockingScriptString(  // line separate
      GetDefaultBlindingKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locking_script_, json_value);
  }

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const GetDefaultBlindingKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      GetDefaultBlindingKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetDefaultBlindingKeyRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetDefaultBlindingKeyRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetDefaultBlindingKeyRequestMapTable =
    cfd::core::JsonTableMap<GetDefaultBlindingKeyRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetDefaultBlindingKeyRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetDefaultBlindingKeyRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(masterBlindingKey) value
   */
  std::string master_blinding_key_ = "";
  /**
   * @brief JsonAPI(lockingScript) value
   */
  std::string locking_script_ = "";
  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
};

// ------------------------------------------------------------------------
// BlindingKeyResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (BlindingKeyResponse) class
 */
class BlindingKeyResponse
  : public cfd::core::JsonClassBase<BlindingKeyResponse> {
 public:
  BlindingKeyResponse() {
    CollectFieldName();
  }
  virtual ~BlindingKeyResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of blindingKey
   * @return blindingKey
   */
  std::string GetBlindingKey() const {
    return blinding_key_;
  }
  /**
   * @brief Set to blindingKey
   * @param[in] blinding_key    setting value.
   */
  void SetBlindingKey(  // line separate
    const std::string& blinding_key) {  // NOLINT
    this->blinding_key_ = blinding_key;
  }
  /**
   * @brief Get data type of blindingKey
   * @return Data type of blindingKey
   */
  static std::string GetBlindingKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of blindingKey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBlindingKeyString(  // line separate
      const BlindingKeyResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.blinding_key_);
  }
  /**
   * @brief Set json object to blindingKey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBlindingKeyString(  // line separate
      BlindingKeyResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.blinding_key_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const BlindingKeyResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  BlindingKeyResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using BlindingKeyResponseMapTable =
    cfd::core::JsonTableMap<BlindingKeyResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const BlindingKeyResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static BlindingKeyResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(blindingKey) value
   */
  std::string blinding_key_ = "";
};

// ------------------------------------------------------------------------
// GetExtkeyInfoRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetExtkeyInfoRequest) class
 */
class GetExtkeyInfoRequest
  : public cfd::core::JsonClassBase<GetExtkeyInfoRequest> {
 public:
  GetExtkeyInfoRequest() {
    CollectFieldName();
  }
  virtual ~GetExtkeyInfoRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of extkey
   * @return extkey
   */
  std::string GetExtkey() const {
    return extkey_;
  }
  /**
   * @brief Set to extkey
   * @param[in] extkey    setting value.
   */
  void SetExtkey(  // line separate
    const std::string& extkey) {  // NOLINT
    this->extkey_ = extkey;
  }
  /**
   * @brief Get data type of extkey
   * @return Data type of extkey
   */
  static std::string GetExtkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of extkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExtkeyString(  // line separate
      const GetExtkeyInfoRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.extkey_);
  }
  /**
   * @brief Set json object to extkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExtkeyString(  // line separate
      GetExtkeyInfoRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.extkey_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetExtkeyInfoRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetExtkeyInfoRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetExtkeyInfoRequestMapTable =
    cfd::core::JsonTableMap<GetExtkeyInfoRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetExtkeyInfoRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetExtkeyInfoRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(extkey) value
   */
  std::string extkey_ = "";
};

// ------------------------------------------------------------------------
// GetExtkeyInfoResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetExtkeyInfoResponse) class
 */
class GetExtkeyInfoResponse
  : public cfd::core::JsonClassBase<GetExtkeyInfoResponse> {
 public:
  GetExtkeyInfoResponse() {
    CollectFieldName();
  }
  virtual ~GetExtkeyInfoResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const GetExtkeyInfoResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      GetExtkeyInfoResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of version
   * @return version
   */
  std::string GetVersion() const {
    return version_;
  }
  /**
   * @brief Set to version
   * @param[in] version    setting value.
   */
  void SetVersion(  // line separate
    const std::string& version) {  // NOLINT
    this->version_ = version;
  }
  /**
   * @brief Get data type of version
   * @return Data type of version
   */
  static std::string GetVersionFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of version field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVersionString(  // line separate
      const GetExtkeyInfoResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.version_);
  }
  /**
   * @brief Set json object to version field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVersionString(  // line separate
      GetExtkeyInfoResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.version_, json_value);
  }

  /**
   * @brief Get of depth
   * @return depth
   */
  uint8_t GetDepth() const {
    return depth_;
  }
  /**
   * @brief Set to depth
   * @param[in] depth    setting value.
   */
  void SetDepth(  // line separate
    const uint8_t& depth) {  // NOLINT
    this->depth_ = depth;
  }
  /**
   * @brief Get data type of depth
   * @return Data type of depth
   */
  static std::string GetDepthFieldType() {
    return "uint8_t";
  }
  /**
   * @brief Get json string of depth field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDepthString(  // line separate
      const GetExtkeyInfoResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.depth_);
  }
  /**
   * @brief Set json object to depth field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDepthString(  // line separate
      GetExtkeyInfoResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.depth_, json_value);
  }

  /**
   * @brief Get of fingerprint
   * @return fingerprint
   */
  std::string GetFingerprint() const {
    return fingerprint_;
  }
  /**
   * @brief Set to fingerprint
   * @param[in] fingerprint    setting value.
   */
  void SetFingerprint(  // line separate
    const std::string& fingerprint) {  // NOLINT
    this->fingerprint_ = fingerprint;
  }
  /**
   * @brief Get data type of fingerprint
   * @return Data type of fingerprint
   */
  static std::string GetFingerprintFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of fingerprint field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFingerprintString(  // line separate
      const GetExtkeyInfoResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fingerprint_);
  }
  /**
   * @brief Set json object to fingerprint field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFingerprintString(  // line separate
      GetExtkeyInfoResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fingerprint_, json_value);
  }

  /**
   * @brief Get of childNumber
   * @return childNumber
   */
  uint32_t GetChildNumber() const {
    return child_number_;
  }
  /**
   * @brief Set to childNumber
   * @param[in] child_number    setting value.
   */
  void SetChildNumber(  // line separate
    const uint32_t& child_number) {  // NOLINT
    this->child_number_ = child_number;
  }
  /**
   * @brief Get data type of childNumber
   * @return Data type of childNumber
   */
  static std::string GetChildNumberFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of childNumber field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetChildNumberString(  // line separate
      const GetExtkeyInfoResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.child_number_);
  }
  /**
   * @brief Set json object to childNumber field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetChildNumberString(  // line separate
      GetExtkeyInfoResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.child_number_, json_value);
  }

  /**
   * @brief Get of chainCode
   * @return chainCode
   */
  std::string GetChainCode() const {
    return chain_code_;
  }
  /**
   * @brief Set to chainCode
   * @param[in] chain_code    setting value.
   */
  void SetChainCode(  // line separate
    const std::string& chain_code) {  // NOLINT
    this->chain_code_ = chain_code;
  }
  /**
   * @brief Get data type of chainCode
   * @return Data type of chainCode
   */
  static std::string GetChainCodeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of chainCode field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetChainCodeString(  // line separate
      const GetExtkeyInfoResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.chain_code_);
  }
  /**
   * @brief Set json object to chainCode field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetChainCodeString(  // line separate
      GetExtkeyInfoResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.chain_code_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetExtkeyInfoResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetExtkeyInfoResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetExtkeyInfoResponseMapTable =
    cfd::core::JsonTableMap<GetExtkeyInfoResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetExtkeyInfoResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetExtkeyInfoResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "";
  /**
   * @brief JsonAPI(version) value
   */
  std::string version_ = "";
  /**
   * @brief JsonAPI(depth) value
   */
  uint8_t depth_ = 0;
  /**
   * @brief JsonAPI(fingerprint) value
   */
  std::string fingerprint_ = "";
  /**
   * @brief JsonAPI(childNumber) value
   */
  uint32_t child_number_ = 0;
  /**
   * @brief JsonAPI(chainCode) value
   */
  std::string chain_code_ = "";
};

// ------------------------------------------------------------------------
// GetIssuanceBlindingKeyRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetIssuanceBlindingKeyRequest) class
 */
class GetIssuanceBlindingKeyRequest
  : public cfd::core::JsonClassBase<GetIssuanceBlindingKeyRequest> {
 public:
  GetIssuanceBlindingKeyRequest() {
    CollectFieldName();
  }
  virtual ~GetIssuanceBlindingKeyRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of masterBlindingKey
   * @return masterBlindingKey
   */
  std::string GetMasterBlindingKey() const {
    return master_blinding_key_;
  }
  /**
   * @brief Set to masterBlindingKey
   * @param[in] master_blinding_key    setting value.
   */
  void SetMasterBlindingKey(  // line separate
    const std::string& master_blinding_key) {  // NOLINT
    this->master_blinding_key_ = master_blinding_key;
  }
  /**
   * @brief Get data type of masterBlindingKey
   * @return Data type of masterBlindingKey
   */
  static std::string GetMasterBlindingKeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of masterBlindingKey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMasterBlindingKeyString(  // line separate
      const GetIssuanceBlindingKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.master_blinding_key_);
  }
  /**
   * @brief Set json object to masterBlindingKey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMasterBlindingKeyString(  // line separate
      GetIssuanceBlindingKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.master_blinding_key_, json_value);
  }

  /**
   * @brief Get of txid
   * @return txid
   */
  std::string GetTxid() const {
    return txid_;
  }
  /**
   * @brief Set to txid
   * @param[in] txid    setting value.
   */
  void SetTxid(  // line separate
    const std::string& txid) {  // NOLINT
    this->txid_ = txid;
  }
  /**
   * @brief Get data type of txid
   * @return Data type of txid
   */
  static std::string GetTxidFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of txid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxidString(  // line separate
      const GetIssuanceBlindingKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.txid_);
  }
  /**
   * @brief Set json object to txid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxidString(  // line separate
      GetIssuanceBlindingKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.txid_, json_value);
  }

  /**
   * @brief Get of vout
   * @return vout
   */
  uint32_t GetVout() const {
    return vout_;
  }
  /**
   * @brief Set to vout
   * @param[in] vout    setting value.
   */
  void SetVout(  // line separate
    const uint32_t& vout) {  // NOLINT
    this->vout_ = vout;
  }
  /**
   * @brief Get data type of vout
   * @return Data type of vout
   */
  static std::string GetVoutFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of vout field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetVoutString(  // line separate
      const GetIssuanceBlindingKeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.vout_);
  }
  /**
   * @brief Set json object to vout field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetVoutString(  // line separate
      GetIssuanceBlindingKeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.vout_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetIssuanceBlindingKeyRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetIssuanceBlindingKeyRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetIssuanceBlindingKeyRequestMapTable =
    cfd::core::JsonTableMap<GetIssuanceBlindingKeyRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetIssuanceBlindingKeyRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetIssuanceBlindingKeyRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(masterBlindingKey) value
   */
  std::string master_blinding_key_ = "";
  /**
   * @brief JsonAPI(txid) value
   */
  std::string txid_ = "";
  /**
   * @brief JsonAPI(vout) value
   */
  uint32_t vout_ = 0;
};

// ------------------------------------------------------------------------
// GetMnemonicWordlistRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetMnemonicWordlistRequest) class
 */
class GetMnemonicWordlistRequest
  : public cfd::core::JsonClassBase<GetMnemonicWordlistRequest> {
 public:
  GetMnemonicWordlistRequest() {
    CollectFieldName();
  }
  virtual ~GetMnemonicWordlistRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of language
   * @return language
   */
  std::string GetLanguage() const {
    return language_;
  }
  /**
   * @brief Set to language
   * @param[in] language    setting value.
   */
  void SetLanguage(  // line separate
    const std::string& language) {  // NOLINT
    this->language_ = language;
  }
  /**
   * @brief Get data type of language
   * @return Data type of language
   */
  static std::string GetLanguageFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of language field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLanguageString(  // line separate
      const GetMnemonicWordlistRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.language_);
  }
  /**
   * @brief Set json object to language field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLanguageString(  // line separate
      GetMnemonicWordlistRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.language_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetMnemonicWordlistRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetMnemonicWordlistRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetMnemonicWordlistRequestMapTable =
    cfd::core::JsonTableMap<GetMnemonicWordlistRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetMnemonicWordlistRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetMnemonicWordlistRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(language) value
   */
  std::string language_ = "en";
};

// ------------------------------------------------------------------------
// GetMnemonicWordlistResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetMnemonicWordlistResponse) class
 */
class GetMnemonicWordlistResponse
  : public cfd::core::JsonClassBase<GetMnemonicWordlistResponse> {
 public:
  GetMnemonicWordlistResponse() {
    CollectFieldName();
  }
  virtual ~GetMnemonicWordlistResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of wordlist.
   * @return wordlist
   */
  JsonValueVector<std::string>& GetWordlist() {  // NOLINT
    return wordlist_;
  }
  /**
   * @brief Set to wordlist.
   * @param[in] wordlist    setting value.
   */
  void SetWordlist(  // line separate
      const JsonValueVector<std::string>& wordlist) {  // NOLINT
    this->wordlist_ = wordlist;
  }
  /**
   * @brief Get data type of wordlist.
   * @return Data type of wordlist.
   */
  static std::string GetWordlistFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of wordlist field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetWordlistString(  // line separate
      const GetMnemonicWordlistResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.wordlist_.Serialize();
  }
  /**
   * @brief Set json object to wordlist field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetWordlistString(  // line separate
      GetMnemonicWordlistResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.wordlist_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetMnemonicWordlistResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetMnemonicWordlistResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetMnemonicWordlistResponseMapTable =
    cfd::core::JsonTableMap<GetMnemonicWordlistResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetMnemonicWordlistResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetMnemonicWordlistResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(wordlist) value
   */
  JsonValueVector<std::string> wordlist_;  // NOLINT
};

// ------------------------------------------------------------------------
// GetPrivkeyFromExtkeyRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetPrivkeyFromExtkeyRequest) class
 */
class GetPrivkeyFromExtkeyRequest
  : public cfd::core::JsonClassBase<GetPrivkeyFromExtkeyRequest> {
 public:
  GetPrivkeyFromExtkeyRequest() {
    CollectFieldName();
  }
  virtual ~GetPrivkeyFromExtkeyRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of extkey
   * @return extkey
   */
  std::string GetExtkey() const {
    return extkey_;
  }
  /**
   * @brief Set to extkey
   * @param[in] extkey    setting value.
   */
  void SetExtkey(  // line separate
    const std::string& extkey) {  // NOLINT
    this->extkey_ = extkey;
  }
  /**
   * @brief Get data type of extkey
   * @return Data type of extkey
   */
  static std::string GetExtkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of extkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExtkeyString(  // line separate
      const GetPrivkeyFromExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.extkey_);
  }
  /**
   * @brief Set json object to extkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExtkeyString(  // line separate
      GetPrivkeyFromExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.extkey_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const GetPrivkeyFromExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      GetPrivkeyFromExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of wif
   * @return wif
   */
  bool GetWif() const {
    return wif_;
  }
  /**
   * @brief Set to wif
   * @param[in] wif    setting value.
   */
  void SetWif(  // line separate
    const bool& wif) {  // NOLINT
    this->wif_ = wif;
  }
  /**
   * @brief Get data type of wif
   * @return Data type of wif
   */
  static std::string GetWifFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of wif field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetWifString(  // line separate
      const GetPrivkeyFromExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.wif_);
  }
  /**
   * @brief Set json object to wif field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetWifString(  // line separate
      GetPrivkeyFromExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.wif_, json_value);
  }

  /**
   * @brief Get of isCompressed
   * @return isCompressed
   */
  bool GetIsCompressed() const {
    return is_compressed_;
  }
  /**
   * @brief Set to isCompressed
   * @param[in] is_compressed    setting value.
   */
  void SetIsCompressed(  // line separate
    const bool& is_compressed) {  // NOLINT
    this->is_compressed_ = is_compressed;
  }
  /**
   * @brief Get data type of isCompressed
   * @return Data type of isCompressed
   */
  static std::string GetIsCompressedFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isCompressed field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsCompressedString(  // line separate
      const GetPrivkeyFromExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_compressed_);
  }
  /**
   * @brief Set json object to isCompressed field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsCompressedString(  // line separate
      GetPrivkeyFromExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_compressed_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetPrivkeyFromExtkeyRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetPrivkeyFromExtkeyRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetPrivkeyFromExtkeyRequestMapTable =
    cfd::core::JsonTableMap<GetPrivkeyFromExtkeyRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetPrivkeyFromExtkeyRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetPrivkeyFromExtkeyRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(extkey) value
   */
  std::string extkey_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(wif) value
   */
  bool wif_ = true;
  /**
   * @brief JsonAPI(isCompressed) value
   */
  bool is_compressed_ = true;
};

// ------------------------------------------------------------------------
// GetPrivkeyFromExtkeyResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetPrivkeyFromExtkeyResponse) class
 */
class GetPrivkeyFromExtkeyResponse
  : public cfd::core::JsonClassBase<GetPrivkeyFromExtkeyResponse> {
 public:
  GetPrivkeyFromExtkeyResponse() {
    CollectFieldName();
  }
  virtual ~GetPrivkeyFromExtkeyResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of privkey
   * @return privkey
   */
  std::string GetPrivkey() const {
    return privkey_;
  }
  /**
   * @brief Set to privkey
   * @param[in] privkey    setting value.
   */
  void SetPrivkey(  // line separate
    const std::string& privkey) {  // NOLINT
    this->privkey_ = privkey;
  }
  /**
   * @brief Get data type of privkey
   * @return Data type of privkey
   */
  static std::string GetPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of privkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPrivkeyString(  // line separate
      const GetPrivkeyFromExtkeyResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.privkey_);
  }
  /**
   * @brief Set json object to privkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPrivkeyString(  // line separate
      GetPrivkeyFromExtkeyResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.privkey_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetPrivkeyFromExtkeyResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetPrivkeyFromExtkeyResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetPrivkeyFromExtkeyResponseMapTable =
    cfd::core::JsonTableMap<GetPrivkeyFromExtkeyResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetPrivkeyFromExtkeyResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetPrivkeyFromExtkeyResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(privkey) value
   */
  std::string privkey_ = "";
};

// ------------------------------------------------------------------------
// PrivkeyWifData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PrivkeyWifData) class
 */
class PrivkeyWifData
  : public cfd::core::JsonClassBase<PrivkeyWifData> {
 public:
  PrivkeyWifData() {
    CollectFieldName();
  }
  virtual ~PrivkeyWifData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of wif
   * @return wif
   */
  std::string GetWif() const {
    return wif_;
  }
  /**
   * @brief Set to wif
   * @param[in] wif    setting value.
   */
  void SetWif(  // line separate
    const std::string& wif) {  // NOLINT
    this->wif_ = wif;
  }
  /**
   * @brief Get data type of wif
   * @return Data type of wif
   */
  static std::string GetWifFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of wif field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetWifString(  // line separate
      const PrivkeyWifData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.wif_);
  }
  /**
   * @brief Set json object to wif field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetWifString(  // line separate
      PrivkeyWifData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.wif_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PrivkeyWifDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PrivkeyWifDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PrivkeyWifDataMapTable =
    cfd::core::JsonTableMap<PrivkeyWifData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PrivkeyWifDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PrivkeyWifDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(wif) value
   */
  std::string wif_ = "";
};

// ------------------------------------------------------------------------
// PrivkeyHexData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (PrivkeyHexData) class
 */
class PrivkeyHexData
  : public cfd::core::JsonClassBase<PrivkeyHexData> {
 public:
  PrivkeyHexData() {
    CollectFieldName();
  }
  virtual ~PrivkeyHexData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const PrivkeyHexData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      PrivkeyHexData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const PrivkeyHexData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      PrivkeyHexData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of isCompressed
   * @return isCompressed
   */
  bool GetIsCompressed() const {
    return is_compressed_;
  }
  /**
   * @brief Set to isCompressed
   * @param[in] is_compressed    setting value.
   */
  void SetIsCompressed(  // line separate
    const bool& is_compressed) {  // NOLINT
    this->is_compressed_ = is_compressed;
  }
  /**
   * @brief Get data type of isCompressed
   * @return Data type of isCompressed
   */
  static std::string GetIsCompressedFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isCompressed field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsCompressedString(  // line separate
      const PrivkeyHexData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_compressed_);
  }
  /**
   * @brief Set json object to isCompressed field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsCompressedString(  // line separate
      PrivkeyHexData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_compressed_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const PrivkeyHexDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  PrivkeyHexDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using PrivkeyHexDataMapTable =
    cfd::core::JsonTableMap<PrivkeyHexData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const PrivkeyHexDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static PrivkeyHexDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "";
  /**
   * @brief JsonAPI(isCompressed) value
   */
  bool is_compressed_ = true;
};


// ------------------------------------------------------------------------
// UtxoListData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (UtxoListData) class
 */
class UtxoListData
  : public cfd::core::JsonClassBase<UtxoListData> {
 public:
  UtxoListData() {
    CollectFieldName();
  }
  virtual ~UtxoListData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of utxos.
   * @return utxos
   */
  JsonObjectVector<FundUtxoJsonData, FundUtxoJsonDataStruct>& GetUtxos() {  // NOLINT
    return utxos_;
  }
  /**
   * @brief Set to utxos.
   * @param[in] utxos    setting value.
   */
  void SetUtxos(  // line separate
      const JsonObjectVector<FundUtxoJsonData, FundUtxoJsonDataStruct>& utxos) {  // NOLINT
    this->utxos_ = utxos;
  }
  /**
   * @brief Get data type of utxos.
   * @return Data type of utxos.
   */
  static std::string GetUtxosFieldType() {
    return "JsonObjectVector<FundUtxoJsonData, FundUtxoJsonDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of utxos field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUtxosString(  // line separate
      const UtxoListData& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.utxos_.Serialize();
  }
  /**
   * @brief Set json object to utxos field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUtxosString(  // line separate
      UtxoListData& obj,  // NOLINT
      const UniValue& json_value) {
    obj.utxos_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const UtxoListDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  UtxoListDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using UtxoListDataMapTable =
    cfd::core::JsonTableMap<UtxoListData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const UtxoListDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static UtxoListDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(utxos) value
   */
  JsonObjectVector<FundUtxoJsonData, FundUtxoJsonDataStruct> utxos_;  // NOLINT
};

// ------------------------------------------------------------------------
// GetPubkeyFromExtkeyRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetPubkeyFromExtkeyRequest) class
 */
class GetPubkeyFromExtkeyRequest
  : public cfd::core::JsonClassBase<GetPubkeyFromExtkeyRequest> {
 public:
  GetPubkeyFromExtkeyRequest() {
    CollectFieldName();
  }
  virtual ~GetPubkeyFromExtkeyRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of extkey
   * @return extkey
   */
  std::string GetExtkey() const {
    return extkey_;
  }
  /**
   * @brief Set to extkey
   * @param[in] extkey    setting value.
   */
  void SetExtkey(  // line separate
    const std::string& extkey) {  // NOLINT
    this->extkey_ = extkey;
  }
  /**
   * @brief Get data type of extkey
   * @return Data type of extkey
   */
  static std::string GetExtkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of extkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetExtkeyString(  // line separate
      const GetPubkeyFromExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.extkey_);
  }
  /**
   * @brief Set json object to extkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetExtkeyString(  // line separate
      GetPubkeyFromExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.extkey_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const GetPubkeyFromExtkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      GetPubkeyFromExtkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetPubkeyFromExtkeyRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetPubkeyFromExtkeyRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetPubkeyFromExtkeyRequestMapTable =
    cfd::core::JsonTableMap<GetPubkeyFromExtkeyRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetPubkeyFromExtkeyRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetPubkeyFromExtkeyRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(extkey) value
   */
  std::string extkey_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
};

// ------------------------------------------------------------------------
// GetPubkeyFromPrivkeyRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetPubkeyFromPrivkeyRequest) class
 */
class GetPubkeyFromPrivkeyRequest
  : public cfd::core::JsonClassBase<GetPubkeyFromPrivkeyRequest> {
 public:
  GetPubkeyFromPrivkeyRequest() {
    CollectFieldName();
  }
  virtual ~GetPubkeyFromPrivkeyRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of privkey
   * @return privkey
   */
  std::string GetPrivkey() const {
    return privkey_;
  }
  /**
   * @brief Set to privkey
   * @param[in] privkey    setting value.
   */
  void SetPrivkey(  // line separate
    const std::string& privkey) {  // NOLINT
    this->privkey_ = privkey;
  }
  /**
   * @brief Get data type of privkey
   * @return Data type of privkey
   */
  static std::string GetPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of privkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPrivkeyString(  // line separate
      const GetPubkeyFromPrivkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.privkey_);
  }
  /**
   * @brief Set json object to privkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPrivkeyString(  // line separate
      GetPubkeyFromPrivkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.privkey_, json_value);
  }

  /**
   * @brief Get of isCompressed
   * @return isCompressed
   */
  bool GetIsCompressed() const {
    return is_compressed_;
  }
  /**
   * @brief Set to isCompressed
   * @param[in] is_compressed    setting value.
   */
  void SetIsCompressed(  // line separate
    const bool& is_compressed) {  // NOLINT
    this->is_compressed_ = is_compressed;
  }
  /**
   * @brief Get data type of isCompressed
   * @return Data type of isCompressed
   */
  static std::string GetIsCompressedFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isCompressed field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsCompressedString(  // line separate
      const GetPubkeyFromPrivkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_compressed_);
  }
  /**
   * @brief Set json object to isCompressed field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsCompressedString(  // line separate
      GetPubkeyFromPrivkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_compressed_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetPubkeyFromPrivkeyRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetPubkeyFromPrivkeyRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetPubkeyFromPrivkeyRequestMapTable =
    cfd::core::JsonTableMap<GetPubkeyFromPrivkeyRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetPubkeyFromPrivkeyRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetPubkeyFromPrivkeyRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(privkey) value
   */
  std::string privkey_ = "";
  /**
   * @brief JsonAPI(isCompressed) value
   */
  bool is_compressed_ = true;
};

// ------------------------------------------------------------------------
// GetSchnorrPubkeyFromPrivkeyRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetSchnorrPubkeyFromPrivkeyRequest) class
 */
class GetSchnorrPubkeyFromPrivkeyRequest
  : public cfd::core::JsonClassBase<GetSchnorrPubkeyFromPrivkeyRequest> {
 public:
  GetSchnorrPubkeyFromPrivkeyRequest() {
    CollectFieldName();
  }
  virtual ~GetSchnorrPubkeyFromPrivkeyRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of privkey
   * @return privkey
   */
  std::string GetPrivkey() const {
    return privkey_;
  }
  /**
   * @brief Set to privkey
   * @param[in] privkey    setting value.
   */
  void SetPrivkey(  // line separate
    const std::string& privkey) {  // NOLINT
    this->privkey_ = privkey;
  }
  /**
   * @brief Get data type of privkey
   * @return Data type of privkey
   */
  static std::string GetPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of privkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPrivkeyString(  // line separate
      const GetSchnorrPubkeyFromPrivkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.privkey_);
  }
  /**
   * @brief Set json object to privkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPrivkeyString(  // line separate
      GetSchnorrPubkeyFromPrivkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.privkey_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetSchnorrPubkeyFromPrivkeyRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetSchnorrPubkeyFromPrivkeyRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetSchnorrPubkeyFromPrivkeyRequestMapTable =
    cfd::core::JsonTableMap<GetSchnorrPubkeyFromPrivkeyRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetSchnorrPubkeyFromPrivkeyRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetSchnorrPubkeyFromPrivkeyRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(privkey) value
   */
  std::string privkey_ = "";
};

// ------------------------------------------------------------------------
// SchnorrPubkeyData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SchnorrPubkeyData) class
 */
class SchnorrPubkeyData
  : public cfd::core::JsonClassBase<SchnorrPubkeyData> {
 public:
  SchnorrPubkeyData() {
    CollectFieldName();
  }
  virtual ~SchnorrPubkeyData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const SchnorrPubkeyData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      SchnorrPubkeyData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Get of parity
   * @return parity
   */
  bool GetParity() const {
    return parity_;
  }
  /**
   * @brief Set to parity
   * @param[in] parity    setting value.
   */
  void SetParity(  // line separate
    const bool& parity) {  // NOLINT
    this->parity_ = parity;
  }
  /**
   * @brief Get data type of parity
   * @return Data type of parity
   */
  static std::string GetParityFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of parity field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetParityString(  // line separate
      const SchnorrPubkeyData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.parity_);
  }
  /**
   * @brief Set json object to parity field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetParityString(  // line separate
      SchnorrPubkeyData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.parity_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SchnorrPubkeyDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SchnorrPubkeyDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SchnorrPubkeyDataMapTable =
    cfd::core::JsonTableMap<SchnorrPubkeyData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SchnorrPubkeyDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SchnorrPubkeyDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
  /**
   * @brief JsonAPI(parity) value
   */
  bool parity_ = false;
};


// ------------------------------------------------------------------------
// GetSighashRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetSighashRequest) class
 */
class GetSighashRequest
  : public cfd::core::JsonClassBase<GetSighashRequest> {
 public:
  GetSighashRequest() {
    CollectFieldName();
  }
  virtual ~GetSighashRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const GetSighashRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      GetSighashRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const GetSighashRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      GetSighashRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of txin.
   * @return txin
   */
  GetSighashTxIn& GetTxin() {  // NOLINT
    return txin_;
  }
  /**
   * @brief Set to txin.
   * @param[in] txin    setting value.
   */
  void SetTxin(  // line separate
      const GetSighashTxIn& txin) {  // NOLINT
    this->txin_ = txin;
  }
  /**
   * @brief Get data type of txin.
   * @return Data type of txin.
   */
  static std::string GetTxinFieldType() {
    return "GetSighashTxIn";  // NOLINT
  }
  /**
   * @brief Get json string of txin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinString(  // line separate
      const GetSighashRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txin_.Serialize();
  }
  /**
   * @brief Set json object to txin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinString(  // line separate
      GetSighashRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of utxos.
   * @return utxos
   */
  JsonObjectVector<UtxoObject, UtxoObjectStruct>& GetUtxos() {  // NOLINT
    return utxos_;
  }
  /**
   * @brief Set to utxos.
   * @param[in] utxos    setting value.
   */
  void SetUtxos(  // line separate
      const JsonObjectVector<UtxoObject, UtxoObjectStruct>& utxos) {  // NOLINT
    this->utxos_ = utxos;
  }
  /**
   * @brief Get data type of utxos.
   * @return Data type of utxos.
   */
  static std::string GetUtxosFieldType() {
    return "JsonObjectVector<UtxoObject, UtxoObjectStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of utxos field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUtxosString(  // line separate
      const GetSighashRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.utxos_.Serialize();
  }
  /**
   * @brief Set json object to utxos field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUtxosString(  // line separate
      GetSighashRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.utxos_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetSighashRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetSighashRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetSighashRequestMapTable =
    cfd::core::JsonTableMap<GetSighashRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetSighashRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetSighashRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(txin) value
   */
  GetSighashTxIn txin_;  // NOLINT
  /**
   * @brief JsonAPI(utxos) value
   */
  JsonObjectVector<UtxoObject, UtxoObjectStruct> utxos_;  // NOLINT
};

// ------------------------------------------------------------------------
// CreateSignatureHashResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateSignatureHashResponse) class
 */
class CreateSignatureHashResponse
  : public cfd::core::JsonClassBase<CreateSignatureHashResponse> {
 public:
  CreateSignatureHashResponse() {
    CollectFieldName();
  }
  virtual ~CreateSignatureHashResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of sighash
   * @return sighash
   */
  std::string GetSighash() const {
    return sighash_;
  }
  /**
   * @brief Set to sighash
   * @param[in] sighash    setting value.
   */
  void SetSighash(  // line separate
    const std::string& sighash) {  // NOLINT
    this->sighash_ = sighash;
  }
  /**
   * @brief Get data type of sighash
   * @return Data type of sighash
   */
  static std::string GetSighashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sighash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSighashString(  // line separate
      const CreateSignatureHashResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sighash_);
  }
  /**
   * @brief Set json object to sighash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSighashString(  // line separate
      CreateSignatureHashResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sighash_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateSignatureHashResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateSignatureHashResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateSignatureHashResponseMapTable =
    cfd::core::JsonTableMap<CreateSignatureHashResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateSignatureHashResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateSignatureHashResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(sighash) value
   */
  std::string sighash_ = "";
};

// ------------------------------------------------------------------------
// GetTapBranchInfoRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetTapBranchInfoRequest) class
 */
class GetTapBranchInfoRequest
  : public cfd::core::JsonClassBase<GetTapBranchInfoRequest> {
 public:
  GetTapBranchInfoRequest() {
    CollectFieldName();
  }
  virtual ~GetTapBranchInfoRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of treeString
   * @return treeString
   */
  std::string GetTreeString() const {
    return tree_string_;
  }
  /**
   * @brief Set to treeString
   * @param[in] tree_string    setting value.
   */
  void SetTreeString(  // line separate
    const std::string& tree_string) {  // NOLINT
    this->tree_string_ = tree_string;
  }
  /**
   * @brief Get data type of treeString
   * @return Data type of treeString
   */
  static std::string GetTreeStringFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of treeString field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTreeStringString(  // line separate
      const GetTapBranchInfoRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tree_string_);
  }
  /**
   * @brief Set json object to treeString field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTreeStringString(  // line separate
      GetTapBranchInfoRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tree_string_, json_value);
  }

  /**
   * @brief Get of tapscript
   * @return tapscript
   */
  std::string GetTapscript() const {
    return tapscript_;
  }
  /**
   * @brief Set to tapscript
   * @param[in] tapscript    setting value.
   */
  void SetTapscript(  // line separate
    const std::string& tapscript) {  // NOLINT
    this->tapscript_ = tapscript;
  }
  /**
   * @brief Get data type of tapscript
   * @return Data type of tapscript
   */
  static std::string GetTapscriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tapscript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTapscriptString(  // line separate
      const GetTapBranchInfoRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tapscript_);
  }
  /**
   * @brief Set json object to tapscript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTapscriptString(  // line separate
      GetTapBranchInfoRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tapscript_, json_value);
  }

  /**
   * @brief Get of nodes.
   * @return nodes
   */
  JsonValueVector<std::string>& GetNodes() {  // NOLINT
    return nodes_;
  }
  /**
   * @brief Set to nodes.
   * @param[in] nodes    setting value.
   */
  void SetNodes(  // line separate
      const JsonValueVector<std::string>& nodes) {  // NOLINT
    this->nodes_ = nodes;
  }
  /**
   * @brief Get data type of nodes.
   * @return Data type of nodes.
   */
  static std::string GetNodesFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of nodes field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetNodesString(  // line separate
      const GetTapBranchInfoRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.nodes_.Serialize();
  }
  /**
   * @brief Set json object to nodes field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetNodesString(  // line separate
      GetTapBranchInfoRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.nodes_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of index
   * @return index
   */
  uint32_t GetIndex() const {
    return index_;
  }
  /**
   * @brief Set to index
   * @param[in] index    setting value.
   */
  void SetIndex(  // line separate
    const uint32_t& index) {  // NOLINT
    this->index_ = index;
  }
  /**
   * @brief Get data type of index
   * @return Data type of index
   */
  static std::string GetIndexFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of index field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIndexString(  // line separate
      const GetTapBranchInfoRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.index_);
  }
  /**
   * @brief Set json object to index field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIndexString(  // line separate
      GetTapBranchInfoRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.index_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetTapBranchInfoRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetTapBranchInfoRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetTapBranchInfoRequestMapTable =
    cfd::core::JsonTableMap<GetTapBranchInfoRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetTapBranchInfoRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetTapBranchInfoRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(treeString) value
   */
  std::string tree_string_ = "";
  /**
   * @brief JsonAPI(tapscript) value
   */
  std::string tapscript_ = "";
  /**
   * @brief JsonAPI(nodes) value
   */
  JsonValueVector<std::string> nodes_;  // NOLINT
  /**
   * @brief JsonAPI(index) value
   */
  uint32_t index_ = 0;
};

// ------------------------------------------------------------------------
// TapBranchInfo
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (TapBranchInfo) class
 */
class TapBranchInfo
  : public cfd::core::JsonClassBase<TapBranchInfo> {
 public:
  TapBranchInfo() {
    CollectFieldName();
  }
  virtual ~TapBranchInfo() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of topBranchHash
   * @return topBranchHash
   */
  std::string GetTopBranchHash() const {
    return top_branch_hash_;
  }
  /**
   * @brief Set to topBranchHash
   * @param[in] top_branch_hash    setting value.
   */
  void SetTopBranchHash(  // line separate
    const std::string& top_branch_hash) {  // NOLINT
    this->top_branch_hash_ = top_branch_hash;
  }
  /**
   * @brief Get data type of topBranchHash
   * @return Data type of topBranchHash
   */
  static std::string GetTopBranchHashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of topBranchHash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTopBranchHashString(  // line separate
      const TapBranchInfo& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.top_branch_hash_);
  }
  /**
   * @brief Set json object to topBranchHash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTopBranchHashString(  // line separate
      TapBranchInfo& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.top_branch_hash_, json_value);
  }

  /**
   * @brief Get of nodes.
   * @return nodes
   */
  JsonValueVector<std::string>& GetNodes() {  // NOLINT
    return nodes_;
  }
  /**
   * @brief Set to nodes.
   * @param[in] nodes    setting value.
   */
  void SetNodes(  // line separate
      const JsonValueVector<std::string>& nodes) {  // NOLINT
    this->nodes_ = nodes;
  }
  /**
   * @brief Get data type of nodes.
   * @return Data type of nodes.
   */
  static std::string GetNodesFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of nodes field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetNodesString(  // line separate
      const TapBranchInfo& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.nodes_.Serialize();
  }
  /**
   * @brief Set json object to nodes field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetNodesString(  // line separate
      TapBranchInfo& obj,  // NOLINT
      const UniValue& json_value) {
    obj.nodes_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of treeString
   * @return treeString
   */
  std::string GetTreeString() const {
    return tree_string_;
  }
  /**
   * @brief Set to treeString
   * @param[in] tree_string    setting value.
   */
  void SetTreeString(  // line separate
    const std::string& tree_string) {  // NOLINT
    this->tree_string_ = tree_string;
  }
  /**
   * @brief Get data type of treeString
   * @return Data type of treeString
   */
  static std::string GetTreeStringFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of treeString field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTreeStringString(  // line separate
      const TapBranchInfo& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tree_string_);
  }
  /**
   * @brief Set json object to treeString field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTreeStringString(  // line separate
      TapBranchInfo& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tree_string_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const TapBranchInfoStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  TapBranchInfoStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using TapBranchInfoMapTable =
    cfd::core::JsonTableMap<TapBranchInfo>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const TapBranchInfoMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static TapBranchInfoMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(topBranchHash) value
   */
  std::string top_branch_hash_ = "";
  /**
   * @brief JsonAPI(nodes) value
   */
  JsonValueVector<std::string> nodes_;  // NOLINT
  /**
   * @brief JsonAPI(treeString) value
   */
  std::string tree_string_ = "";
};

// ------------------------------------------------------------------------
// TapScriptFromStringRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (TapScriptFromStringRequest) class
 */
class TapScriptFromStringRequest
  : public cfd::core::JsonClassBase<TapScriptFromStringRequest> {
 public:
  TapScriptFromStringRequest() {
    CollectFieldName();
  }
  virtual ~TapScriptFromStringRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const TapScriptFromStringRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      TapScriptFromStringRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const TapScriptFromStringRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      TapScriptFromStringRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of treeString
   * @return treeString
   */
  std::string GetTreeString() const {
    return tree_string_;
  }
  /**
   * @brief Set to treeString
   * @param[in] tree_string    setting value.
   */
  void SetTreeString(  // line separate
    const std::string& tree_string) {  // NOLINT
    this->tree_string_ = tree_string;
  }
  /**
   * @brief Get data type of treeString
   * @return Data type of treeString
   */
  static std::string GetTreeStringFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of treeString field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTreeStringString(  // line separate
      const TapScriptFromStringRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tree_string_);
  }
  /**
   * @brief Set json object to treeString field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTreeStringString(  // line separate
      TapScriptFromStringRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tree_string_, json_value);
  }

  /**
   * @brief Get of tapscript
   * @return tapscript
   */
  std::string GetTapscript() const {
    return tapscript_;
  }
  /**
   * @brief Set to tapscript
   * @param[in] tapscript    setting value.
   */
  void SetTapscript(  // line separate
    const std::string& tapscript) {  // NOLINT
    this->tapscript_ = tapscript;
  }
  /**
   * @brief Get data type of tapscript
   * @return Data type of tapscript
   */
  static std::string GetTapscriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tapscript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTapscriptString(  // line separate
      const TapScriptFromStringRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tapscript_);
  }
  /**
   * @brief Set json object to tapscript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTapscriptString(  // line separate
      TapScriptFromStringRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tapscript_, json_value);
  }

  /**
   * @brief Get of internalPubkey
   * @return internalPubkey
   */
  std::string GetInternalPubkey() const {
    return internal_pubkey_;
  }
  /**
   * @brief Set to internalPubkey
   * @param[in] internal_pubkey    setting value.
   */
  void SetInternalPubkey(  // line separate
    const std::string& internal_pubkey) {  // NOLINT
    this->internal_pubkey_ = internal_pubkey;
  }
  /**
   * @brief Get data type of internalPubkey
   * @return Data type of internalPubkey
   */
  static std::string GetInternalPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of internalPubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetInternalPubkeyString(  // line separate
      const TapScriptFromStringRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.internal_pubkey_);
  }
  /**
   * @brief Set json object to internalPubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetInternalPubkeyString(  // line separate
      TapScriptFromStringRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.internal_pubkey_, json_value);
  }

  /**
   * @brief Get of internalPrivkey
   * @return internalPrivkey
   */
  std::string GetInternalPrivkey() const {
    return internal_privkey_;
  }
  /**
   * @brief Set to internalPrivkey
   * @param[in] internal_privkey    setting value.
   */
  void SetInternalPrivkey(  // line separate
    const std::string& internal_privkey) {  // NOLINT
    this->internal_privkey_ = internal_privkey;
  }
  /**
   * @brief Get data type of internalPrivkey
   * @return Data type of internalPrivkey
   */
  static std::string GetInternalPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of internalPrivkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetInternalPrivkeyString(  // line separate
      const TapScriptFromStringRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.internal_privkey_);
  }
  /**
   * @brief Set json object to internalPrivkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetInternalPrivkeyString(  // line separate
      TapScriptFromStringRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.internal_privkey_, json_value);
  }

  /**
   * @brief Get of nodes.
   * @return nodes
   */
  JsonValueVector<std::string>& GetNodes() {  // NOLINT
    return nodes_;
  }
  /**
   * @brief Set to nodes.
   * @param[in] nodes    setting value.
   */
  void SetNodes(  // line separate
      const JsonValueVector<std::string>& nodes) {  // NOLINT
    this->nodes_ = nodes;
  }
  /**
   * @brief Get data type of nodes.
   * @return Data type of nodes.
   */
  static std::string GetNodesFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of nodes field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetNodesString(  // line separate
      const TapScriptFromStringRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.nodes_.Serialize();
  }
  /**
   * @brief Set json object to nodes field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetNodesString(  // line separate
      TapScriptFromStringRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.nodes_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const TapScriptFromStringRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  TapScriptFromStringRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using TapScriptFromStringRequestMapTable =
    cfd::core::JsonTableMap<TapScriptFromStringRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const TapScriptFromStringRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static TapScriptFromStringRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(treeString) value
   */
  std::string tree_string_ = "";
  /**
   * @brief JsonAPI(tapscript) value
   */
  std::string tapscript_ = "";
  /**
   * @brief JsonAPI(internalPubkey) value
   */
  std::string internal_pubkey_ = "";
  /**
   * @brief JsonAPI(internalPrivkey) value
   */
  std::string internal_privkey_ = "";
  /**
   * @brief JsonAPI(nodes) value
   */
  JsonValueVector<std::string> nodes_;  // NOLINT
};

// ------------------------------------------------------------------------
// TapScriptInfo
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (TapScriptInfo) class
 */
class TapScriptInfo
  : public cfd::core::JsonClassBase<TapScriptInfo> {
 public:
  TapScriptInfo() {
    CollectFieldName();
  }
  virtual ~TapScriptInfo() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tapLeafHash
   * @return tapLeafHash
   */
  std::string GetTapLeafHash() const {
    return tap_leaf_hash_;
  }
  /**
   * @brief Set to tapLeafHash
   * @param[in] tap_leaf_hash    setting value.
   */
  void SetTapLeafHash(  // line separate
    const std::string& tap_leaf_hash) {  // NOLINT
    this->tap_leaf_hash_ = tap_leaf_hash;
  }
  /**
   * @brief Get data type of tapLeafHash
   * @return Data type of tapLeafHash
   */
  static std::string GetTapLeafHashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tapLeafHash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTapLeafHashString(  // line separate
      const TapScriptInfo& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tap_leaf_hash_);
  }
  /**
   * @brief Set json object to tapLeafHash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTapLeafHashString(  // line separate
      TapScriptInfo& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tap_leaf_hash_, json_value);
  }

  /**
   * @brief Get of topBranchHash
   * @return topBranchHash
   */
  std::string GetTopBranchHash() const {
    return top_branch_hash_;
  }
  /**
   * @brief Set to topBranchHash
   * @param[in] top_branch_hash    setting value.
   */
  void SetTopBranchHash(  // line separate
    const std::string& top_branch_hash) {  // NOLINT
    this->top_branch_hash_ = top_branch_hash;
  }
  /**
   * @brief Get data type of topBranchHash
   * @return Data type of topBranchHash
   */
  static std::string GetTopBranchHashFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of topBranchHash field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTopBranchHashString(  // line separate
      const TapScriptInfo& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.top_branch_hash_);
  }
  /**
   * @brief Set json object to topBranchHash field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTopBranchHashString(  // line separate
      TapScriptInfo& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.top_branch_hash_, json_value);
  }

  /**
   * @brief Get of tweakedPubkey
   * @return tweakedPubkey
   */
  std::string GetTweakedPubkey() const {
    return tweaked_pubkey_;
  }
  /**
   * @brief Set to tweakedPubkey
   * @param[in] tweaked_pubkey    setting value.
   */
  void SetTweakedPubkey(  // line separate
    const std::string& tweaked_pubkey) {  // NOLINT
    this->tweaked_pubkey_ = tweaked_pubkey;
  }
  /**
   * @brief Get data type of tweakedPubkey
   * @return Data type of tweakedPubkey
   */
  static std::string GetTweakedPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tweakedPubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTweakedPubkeyString(  // line separate
      const TapScriptInfo& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tweaked_pubkey_);
  }
  /**
   * @brief Set json object to tweakedPubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTweakedPubkeyString(  // line separate
      TapScriptInfo& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tweaked_pubkey_, json_value);
  }

  /**
   * @brief Get of tweakedPrivkey
   * @return tweakedPrivkey
   */
  std::string GetTweakedPrivkey() const {
    return tweaked_privkey_;
  }
  /**
   * @brief Set to tweakedPrivkey
   * @param[in] tweaked_privkey    setting value.
   */
  void SetTweakedPrivkey(  // line separate
    const std::string& tweaked_privkey) {  // NOLINT
    this->tweaked_privkey_ = tweaked_privkey;
  }
  /**
   * @brief Get data type of tweakedPrivkey
   * @return Data type of tweakedPrivkey
   */
  static std::string GetTweakedPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tweakedPrivkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTweakedPrivkeyString(  // line separate
      const TapScriptInfo& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tweaked_privkey_);
  }
  /**
   * @brief Set json object to tweakedPrivkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTweakedPrivkeyString(  // line separate
      TapScriptInfo& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tweaked_privkey_, json_value);
  }

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const TapScriptInfo& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      TapScriptInfo& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Get of lockingScript
   * @return lockingScript
   */
  std::string GetLockingScript() const {
    return locking_script_;
  }
  /**
   * @brief Set to lockingScript
   * @param[in] locking_script    setting value.
   */
  void SetLockingScript(  // line separate
    const std::string& locking_script) {  // NOLINT
    this->locking_script_ = locking_script;
  }
  /**
   * @brief Get data type of lockingScript
   * @return Data type of lockingScript
   */
  static std::string GetLockingScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of lockingScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLockingScriptString(  // line separate
      const TapScriptInfo& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locking_script_);
  }
  /**
   * @brief Set json object to lockingScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLockingScriptString(  // line separate
      TapScriptInfo& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locking_script_, json_value);
  }

  /**
   * @brief Get of controlBlock
   * @return controlBlock
   */
  std::string GetControlBlock() const {
    return control_block_;
  }
  /**
   * @brief Set to controlBlock
   * @param[in] control_block    setting value.
   */
  void SetControlBlock(  // line separate
    const std::string& control_block) {  // NOLINT
    this->control_block_ = control_block;
  }
  /**
   * @brief Get data type of controlBlock
   * @return Data type of controlBlock
   */
  static std::string GetControlBlockFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of controlBlock field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetControlBlockString(  // line separate
      const TapScriptInfo& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.control_block_);
  }
  /**
   * @brief Set json object to controlBlock field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetControlBlockString(  // line separate
      TapScriptInfo& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.control_block_, json_value);
  }

  /**
   * @brief Get of tapscript
   * @return tapscript
   */
  std::string GetTapscript() const {
    return tapscript_;
  }
  /**
   * @brief Set to tapscript
   * @param[in] tapscript    setting value.
   */
  void SetTapscript(  // line separate
    const std::string& tapscript) {  // NOLINT
    this->tapscript_ = tapscript;
  }
  /**
   * @brief Get data type of tapscript
   * @return Data type of tapscript
   */
  static std::string GetTapscriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tapscript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTapscriptString(  // line separate
      const TapScriptInfo& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tapscript_);
  }
  /**
   * @brief Set json object to tapscript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTapscriptString(  // line separate
      TapScriptInfo& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tapscript_, json_value);
  }

  /**
   * @brief Get of nodes.
   * @return nodes
   */
  JsonValueVector<std::string>& GetNodes() {  // NOLINT
    return nodes_;
  }
  /**
   * @brief Set to nodes.
   * @param[in] nodes    setting value.
   */
  void SetNodes(  // line separate
      const JsonValueVector<std::string>& nodes) {  // NOLINT
    this->nodes_ = nodes;
  }
  /**
   * @brief Get data type of nodes.
   * @return Data type of nodes.
   */
  static std::string GetNodesFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of nodes field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetNodesString(  // line separate
      const TapScriptInfo& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.nodes_.Serialize();
  }
  /**
   * @brief Set json object to nodes field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetNodesString(  // line separate
      TapScriptInfo& obj,  // NOLINT
      const UniValue& json_value) {
    obj.nodes_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of treeString
   * @return treeString
   */
  std::string GetTreeString() const {
    return tree_string_;
  }
  /**
   * @brief Set to treeString
   * @param[in] tree_string    setting value.
   */
  void SetTreeString(  // line separate
    const std::string& tree_string) {  // NOLINT
    this->tree_string_ = tree_string;
  }
  /**
   * @brief Get data type of treeString
   * @return Data type of treeString
   */
  static std::string GetTreeStringFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of treeString field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTreeStringString(  // line separate
      const TapScriptInfo& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tree_string_);
  }
  /**
   * @brief Set json object to treeString field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTreeStringString(  // line separate
      TapScriptInfo& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tree_string_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const TapScriptInfoStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  TapScriptInfoStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using TapScriptInfoMapTable =
    cfd::core::JsonTableMap<TapScriptInfo>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const TapScriptInfoMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static TapScriptInfoMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tapLeafHash) value
   */
  std::string tap_leaf_hash_ = "";
  /**
   * @brief JsonAPI(topBranchHash) value
   */
  std::string top_branch_hash_ = "";
  /**
   * @brief JsonAPI(tweakedPubkey) value
   */
  std::string tweaked_pubkey_ = "";
  /**
   * @brief JsonAPI(tweakedPrivkey) value
   */
  std::string tweaked_privkey_ = "";
  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
  /**
   * @brief JsonAPI(lockingScript) value
   */
  std::string locking_script_ = "";
  /**
   * @brief JsonAPI(controlBlock) value
   */
  std::string control_block_ = "";
  /**
   * @brief JsonAPI(tapscript) value
   */
  std::string tapscript_ = "";
  /**
   * @brief JsonAPI(nodes) value
   */
  JsonValueVector<std::string> nodes_;  // NOLINT
  /**
   * @brief JsonAPI(treeString) value
   */
  std::string tree_string_ = "";
};

// ------------------------------------------------------------------------
// TapScriptInfoByControlRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (TapScriptInfoByControlRequest) class
 */
class TapScriptInfoByControlRequest
  : public cfd::core::JsonClassBase<TapScriptInfoByControlRequest> {
 public:
  TapScriptInfoByControlRequest() {
    CollectFieldName();
  }
  virtual ~TapScriptInfoByControlRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const TapScriptInfoByControlRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      TapScriptInfoByControlRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const TapScriptInfoByControlRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      TapScriptInfoByControlRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of tapscript
   * @return tapscript
   */
  std::string GetTapscript() const {
    return tapscript_;
  }
  /**
   * @brief Set to tapscript
   * @param[in] tapscript    setting value.
   */
  void SetTapscript(  // line separate
    const std::string& tapscript) {  // NOLINT
    this->tapscript_ = tapscript;
  }
  /**
   * @brief Get data type of tapscript
   * @return Data type of tapscript
   */
  static std::string GetTapscriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tapscript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTapscriptString(  // line separate
      const TapScriptInfoByControlRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tapscript_);
  }
  /**
   * @brief Set json object to tapscript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTapscriptString(  // line separate
      TapScriptInfoByControlRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tapscript_, json_value);
  }

  /**
   * @brief Get of controlBlock
   * @return controlBlock
   */
  std::string GetControlBlock() const {
    return control_block_;
  }
  /**
   * @brief Set to controlBlock
   * @param[in] control_block    setting value.
   */
  void SetControlBlock(  // line separate
    const std::string& control_block) {  // NOLINT
    this->control_block_ = control_block;
  }
  /**
   * @brief Get data type of controlBlock
   * @return Data type of controlBlock
   */
  static std::string GetControlBlockFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of controlBlock field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetControlBlockString(  // line separate
      const TapScriptInfoByControlRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.control_block_);
  }
  /**
   * @brief Set json object to controlBlock field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetControlBlockString(  // line separate
      TapScriptInfoByControlRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.control_block_, json_value);
  }

  /**
   * @brief Get of internalPrivkey
   * @return internalPrivkey
   */
  std::string GetInternalPrivkey() const {
    return internal_privkey_;
  }
  /**
   * @brief Set to internalPrivkey
   * @param[in] internal_privkey    setting value.
   */
  void SetInternalPrivkey(  // line separate
    const std::string& internal_privkey) {  // NOLINT
    this->internal_privkey_ = internal_privkey;
  }
  /**
   * @brief Get data type of internalPrivkey
   * @return Data type of internalPrivkey
   */
  static std::string GetInternalPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of internalPrivkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetInternalPrivkeyString(  // line separate
      const TapScriptInfoByControlRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.internal_privkey_);
  }
  /**
   * @brief Set json object to internalPrivkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetInternalPrivkeyString(  // line separate
      TapScriptInfoByControlRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.internal_privkey_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const TapScriptInfoByControlRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  TapScriptInfoByControlRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using TapScriptInfoByControlRequestMapTable =
    cfd::core::JsonTableMap<TapScriptInfoByControlRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const TapScriptInfoByControlRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static TapScriptInfoByControlRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(tapscript) value
   */
  std::string tapscript_ = "";
  /**
   * @brief JsonAPI(controlBlock) value
   */
  std::string control_block_ = "";
  /**
   * @brief JsonAPI(internalPrivkey) value
   */
  std::string internal_privkey_ = "";
};

// ------------------------------------------------------------------------
// GetTapScriptTreeInfoRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetTapScriptTreeInfoRequest) class
 */
class GetTapScriptTreeInfoRequest
  : public cfd::core::JsonClassBase<GetTapScriptTreeInfoRequest> {
 public:
  GetTapScriptTreeInfoRequest() {
    CollectFieldName();
  }
  virtual ~GetTapScriptTreeInfoRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const GetTapScriptTreeInfoRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      GetTapScriptTreeInfoRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const GetTapScriptTreeInfoRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      GetTapScriptTreeInfoRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of internalPubkey
   * @return internalPubkey
   */
  std::string GetInternalPubkey() const {
    return internal_pubkey_;
  }
  /**
   * @brief Set to internalPubkey
   * @param[in] internal_pubkey    setting value.
   */
  void SetInternalPubkey(  // line separate
    const std::string& internal_pubkey) {  // NOLINT
    this->internal_pubkey_ = internal_pubkey;
  }
  /**
   * @brief Get data type of internalPubkey
   * @return Data type of internalPubkey
   */
  static std::string GetInternalPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of internalPubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetInternalPubkeyString(  // line separate
      const GetTapScriptTreeInfoRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.internal_pubkey_);
  }
  /**
   * @brief Set json object to internalPubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetInternalPubkeyString(  // line separate
      GetTapScriptTreeInfoRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.internal_pubkey_, json_value);
  }

  /**
   * @brief Get of internalPrivkey
   * @return internalPrivkey
   */
  std::string GetInternalPrivkey() const {
    return internal_privkey_;
  }
  /**
   * @brief Set to internalPrivkey
   * @param[in] internal_privkey    setting value.
   */
  void SetInternalPrivkey(  // line separate
    const std::string& internal_privkey) {  // NOLINT
    this->internal_privkey_ = internal_privkey;
  }
  /**
   * @brief Get data type of internalPrivkey
   * @return Data type of internalPrivkey
   */
  static std::string GetInternalPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of internalPrivkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetInternalPrivkeyString(  // line separate
      const GetTapScriptTreeInfoRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.internal_privkey_);
  }
  /**
   * @brief Set json object to internalPrivkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetInternalPrivkeyString(  // line separate
      GetTapScriptTreeInfoRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.internal_privkey_, json_value);
  }

  /**
   * @brief Get of tree.
   * @return tree
   */
  JsonObjectVector<TapBranchData, TapBranchDataStruct>& GetTree() {  // NOLINT
    return tree_;
  }
  /**
   * @brief Set to tree.
   * @param[in] tree    setting value.
   */
  void SetTree(  // line separate
      const JsonObjectVector<TapBranchData, TapBranchDataStruct>& tree) {  // NOLINT
    this->tree_ = tree;
  }
  /**
   * @brief Get data type of tree.
   * @return Data type of tree.
   */
  static std::string GetTreeFieldType() {
    return "JsonObjectVector<TapBranchData, TapBranchDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of tree field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTreeString(  // line separate
      const GetTapScriptTreeInfoRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.tree_.Serialize();
  }
  /**
   * @brief Set json object to tree field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTreeString(  // line separate
      GetTapScriptTreeInfoRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.tree_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetTapScriptTreeInfoRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetTapScriptTreeInfoRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetTapScriptTreeInfoRequestMapTable =
    cfd::core::JsonTableMap<GetTapScriptTreeInfoRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetTapScriptTreeInfoRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetTapScriptTreeInfoRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(internalPubkey) value
   */
  std::string internal_pubkey_ = "";
  /**
   * @brief JsonAPI(internalPrivkey) value
   */
  std::string internal_privkey_ = "";
  /**
   * @brief JsonAPI(tree) value
   */
  JsonObjectVector<TapBranchData, TapBranchDataStruct> tree_;  // NOLINT
};


// ------------------------------------------------------------------------
// GetWitnessStackNumRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetWitnessStackNumRequest) class
 */
class GetWitnessStackNumRequest
  : public cfd::core::JsonClassBase<GetWitnessStackNumRequest> {
 public:
  GetWitnessStackNumRequest() {
    CollectFieldName();
  }
  virtual ~GetWitnessStackNumRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const GetWitnessStackNumRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      GetWitnessStackNumRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const GetWitnessStackNumRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      GetWitnessStackNumRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of txin.
   * @return txin
   */
  TxInRequest& GetTxin() {  // NOLINT
    return txin_;
  }
  /**
   * @brief Set to txin.
   * @param[in] txin    setting value.
   */
  void SetTxin(  // line separate
      const TxInRequest& txin) {  // NOLINT
    this->txin_ = txin;
  }
  /**
   * @brief Get data type of txin.
   * @return Data type of txin.
   */
  static std::string GetTxinFieldType() {
    return "TxInRequest";  // NOLINT
  }
  /**
   * @brief Get json string of txin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinString(  // line separate
      const GetWitnessStackNumRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txin_.Serialize();
  }
  /**
   * @brief Set json object to txin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinString(  // line separate
      GetWitnessStackNumRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetWitnessStackNumRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetWitnessStackNumRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetWitnessStackNumRequestMapTable =
    cfd::core::JsonTableMap<GetWitnessStackNumRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetWitnessStackNumRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetWitnessStackNumRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(txin) value
   */
  TxInRequest txin_;  // NOLINT
};

// ------------------------------------------------------------------------
// GetWitnessStackNumResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetWitnessStackNumResponse) class
 */
class GetWitnessStackNumResponse
  : public cfd::core::JsonClassBase<GetWitnessStackNumResponse> {
 public:
  GetWitnessStackNumResponse() {
    CollectFieldName();
  }
  virtual ~GetWitnessStackNumResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of count
   * @return count
   */
  uint32_t GetCount() const {
    return count_;
  }
  /**
   * @brief Set to count
   * @param[in] count    setting value.
   */
  void SetCount(  // line separate
    const uint32_t& count) {  // NOLINT
    this->count_ = count;
  }
  /**
   * @brief Get data type of count
   * @return Data type of count
   */
  static std::string GetCountFieldType() {
    return "uint32_t";
  }
  /**
   * @brief Get json string of count field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetCountString(  // line separate
      const GetWitnessStackNumResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.count_);
  }
  /**
   * @brief Set json object to count field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetCountString(  // line separate
      GetWitnessStackNumResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.count_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetWitnessStackNumResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetWitnessStackNumResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetWitnessStackNumResponseMapTable =
    cfd::core::JsonTableMap<GetWitnessStackNumResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetWitnessStackNumResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetWitnessStackNumResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(count) value
   */
  uint32_t count_ = 0;
};

// ------------------------------------------------------------------------
// HashMessageRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (HashMessageRequest) class
 */
class HashMessageRequest
  : public cfd::core::JsonClassBase<HashMessageRequest> {
 public:
  HashMessageRequest() {
    CollectFieldName();
  }
  virtual ~HashMessageRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of algorithm
   * @return algorithm
   */
  std::string GetAlgorithm() const {
    return algorithm_;
  }
  /**
   * @brief Set to algorithm
   * @param[in] algorithm    setting value.
   */
  void SetAlgorithm(  // line separate
    const std::string& algorithm) {  // NOLINT
    this->algorithm_ = algorithm;
  }
  /**
   * @brief Get data type of algorithm
   * @return Data type of algorithm
   */
  static std::string GetAlgorithmFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of algorithm field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAlgorithmString(  // line separate
      const HashMessageRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.algorithm_);
  }
  /**
   * @brief Set json object to algorithm field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAlgorithmString(  // line separate
      HashMessageRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.algorithm_, json_value);
  }

  /**
   * @brief Get of message
   * @return message
   */
  std::string GetMessage() const {
    return message_;
  }
  /**
   * @brief Set to message
   * @param[in] message    setting value.
   */
  void SetMessage(  // line separate
    const std::string& message) {  // NOLINT
    this->message_ = message;
  }
  /**
   * @brief Get data type of message
   * @return Data type of message
   */
  static std::string GetMessageFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of message field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMessageString(  // line separate
      const HashMessageRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.message_);
  }
  /**
   * @brief Set json object to message field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMessageString(  // line separate
      HashMessageRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.message_, json_value);
  }

  /**
   * @brief Get of hasText
   * @return hasText
   */
  bool GetHasText() const {
    return has_text_;
  }
  /**
   * @brief Set to hasText
   * @param[in] has_text    setting value.
   */
  void SetHasText(  // line separate
    const bool& has_text) {  // NOLINT
    this->has_text_ = has_text;
  }
  /**
   * @brief Get data type of hasText
   * @return Data type of hasText
   */
  static std::string GetHasTextFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of hasText field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHasTextString(  // line separate
      const HashMessageRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.has_text_);
  }
  /**
   * @brief Set json object to hasText field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHasTextString(  // line separate
      HashMessageRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.has_text_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const HashMessageRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  HashMessageRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using HashMessageRequestMapTable =
    cfd::core::JsonTableMap<HashMessageRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const HashMessageRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static HashMessageRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(algorithm) value
   */
  std::string algorithm_ = "";
  /**
   * @brief JsonAPI(message) value
   */
  std::string message_ = "";
  /**
   * @brief JsonAPI(hasText) value
   */
  bool has_text_ = false;
};

// ------------------------------------------------------------------------
// IsFinalizedPsbtRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (IsFinalizedPsbtRequest) class
 */
class IsFinalizedPsbtRequest
  : public cfd::core::JsonClassBase<IsFinalizedPsbtRequest> {
 public:
  IsFinalizedPsbtRequest() {
    CollectFieldName();
  }
  virtual ~IsFinalizedPsbtRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of psbt
   * @return psbt
   */
  std::string GetPsbt() const {
    return psbt_;
  }
  /**
   * @brief Set to psbt
   * @param[in] psbt    setting value.
   */
  void SetPsbt(  // line separate
    const std::string& psbt) {  // NOLINT
    this->psbt_ = psbt;
  }
  /**
   * @brief Get data type of psbt
   * @return Data type of psbt
   */
  static std::string GetPsbtFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of psbt field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPsbtString(  // line separate
      const IsFinalizedPsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.psbt_);
  }
  /**
   * @brief Set json object to psbt field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPsbtString(  // line separate
      IsFinalizedPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.psbt_, json_value);
  }

  /**
   * @brief Get of outPointList.
   * @return outPointList
   */
  JsonObjectVector<OutPoint, OutPointStruct>& GetOutPointList() {  // NOLINT
    return out_point_list_;
  }
  /**
   * @brief Set to outPointList.
   * @param[in] out_point_list    setting value.
   */
  void SetOutPointList(  // line separate
      const JsonObjectVector<OutPoint, OutPointStruct>& out_point_list) {  // NOLINT
    this->out_point_list_ = out_point_list;
  }
  /**
   * @brief Get data type of outPointList.
   * @return Data type of outPointList.
   */
  static std::string GetOutPointListFieldType() {
    return "JsonObjectVector<OutPoint, OutPointStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of outPointList field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetOutPointListString(  // line separate
      const IsFinalizedPsbtRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.out_point_list_.Serialize();
  }
  /**
   * @brief Set json object to outPointList field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetOutPointListString(  // line separate
      IsFinalizedPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.out_point_list_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const IsFinalizedPsbtRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  IsFinalizedPsbtRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using IsFinalizedPsbtRequestMapTable =
    cfd::core::JsonTableMap<IsFinalizedPsbtRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const IsFinalizedPsbtRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static IsFinalizedPsbtRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(psbt) value
   */
  std::string psbt_ = "";
  /**
   * @brief JsonAPI(outPointList) value
   */
  JsonObjectVector<OutPoint, OutPointStruct> out_point_list_;  // NOLINT
};

// ------------------------------------------------------------------------
// IsFinalizedPsbtResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (IsFinalizedPsbtResponse) class
 */
class IsFinalizedPsbtResponse
  : public cfd::core::JsonClassBase<IsFinalizedPsbtResponse> {
 public:
  IsFinalizedPsbtResponse() {
    CollectFieldName();
  }
  virtual ~IsFinalizedPsbtResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of success
   * @return success
   */
  bool GetSuccess() const {
    return success_;
  }
  /**
   * @brief Set to success
   * @param[in] success    setting value.
   */
  void SetSuccess(  // line separate
    const bool& success) {  // NOLINT
    this->success_ = success;
  }
  /**
   * @brief Get data type of success
   * @return Data type of success
   */
  static std::string GetSuccessFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of success field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSuccessString(  // line separate
      const IsFinalizedPsbtResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.success_);
  }
  /**
   * @brief Set json object to success field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSuccessString(  // line separate
      IsFinalizedPsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.success_, json_value);
  }

  /**
   * @brief Get of finalizedAll
   * @return finalizedAll
   */
  bool GetFinalizedAll() const {
    return finalized_all_;
  }
  /**
   * @brief Set to finalizedAll
   * @param[in] finalized_all    setting value.
   */
  void SetFinalizedAll(  // line separate
    const bool& finalized_all) {  // NOLINT
    this->finalized_all_ = finalized_all;
  }
  /**
   * @brief Get data type of finalizedAll
   * @return Data type of finalizedAll
   */
  static std::string GetFinalizedAllFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of finalizedAll field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFinalizedAllString(  // line separate
      const IsFinalizedPsbtResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.finalized_all_);
  }
  /**
   * @brief Set json object to finalizedAll field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFinalizedAllString(  // line separate
      IsFinalizedPsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.finalized_all_, json_value);
  }

  /**
   * @brief Get of failInputs.
   * @return failInputs
   */
  JsonObjectVector<OutPoint, OutPointStruct>& GetFailInputs() {  // NOLINT
    return fail_inputs_;
  }
  /**
   * @brief Set to failInputs.
   * @param[in] fail_inputs    setting value.
   */
  void SetFailInputs(  // line separate
      const JsonObjectVector<OutPoint, OutPointStruct>& fail_inputs) {  // NOLINT
    this->fail_inputs_ = fail_inputs;
  }
  /**
   * @brief Get data type of failInputs.
   * @return Data type of failInputs.
   */
  static std::string GetFailInputsFieldType() {
    return "JsonObjectVector<OutPoint, OutPointStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of failInputs field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetFailInputsString(  // line separate
      const IsFinalizedPsbtResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.fail_inputs_.Serialize();
  }
  /**
   * @brief Set json object to failInputs field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetFailInputsString(  // line separate
      IsFinalizedPsbtResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.fail_inputs_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const IsFinalizedPsbtResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  IsFinalizedPsbtResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using IsFinalizedPsbtResponseMapTable =
    cfd::core::JsonTableMap<IsFinalizedPsbtResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const IsFinalizedPsbtResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static IsFinalizedPsbtResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(success) value
   */
  bool success_ = false;
  /**
   * @brief JsonAPI(finalizedAll) value
   */
  bool finalized_all_ = false;
  /**
   * @brief JsonAPI(failInputs) value
   */
  JsonObjectVector<OutPoint, OutPointStruct> fail_inputs_;  // NOLINT
};


// ------------------------------------------------------------------------
// CreateMultisigRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateMultisigRequest) class
 */
class CreateMultisigRequest
  : public cfd::core::JsonClassBase<CreateMultisigRequest> {
 public:
  CreateMultisigRequest() {
    CollectFieldName();
  }
  virtual ~CreateMultisigRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of nrequired
   * @return nrequired
   */
  uint8_t GetNrequired() const {
    return nrequired_;
  }
  /**
   * @brief Set to nrequired
   * @param[in] nrequired    setting value.
   */
  void SetNrequired(  // line separate
    const uint8_t& nrequired) {  // NOLINT
    this->nrequired_ = nrequired;
  }
  /**
   * @brief Get data type of nrequired
   * @return Data type of nrequired
   */
  static std::string GetNrequiredFieldType() {
    return "uint8_t";
  }
  /**
   * @brief Get json string of nrequired field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNrequiredString(  // line separate
      const CreateMultisigRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.nrequired_);
  }
  /**
   * @brief Set json object to nrequired field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNrequiredString(  // line separate
      CreateMultisigRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.nrequired_, json_value);
  }

  /**
   * @brief Get of keys.
   * @return keys
   */
  JsonValueVector<std::string>& GetKeys() {  // NOLINT
    return keys_;
  }
  /**
   * @brief Set to keys.
   * @param[in] keys    setting value.
   */
  void SetKeys(  // line separate
      const JsonValueVector<std::string>& keys) {  // NOLINT
    this->keys_ = keys;
  }
  /**
   * @brief Get data type of keys.
   * @return Data type of keys.
   */
  static std::string GetKeysFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of keys field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetKeysString(  // line separate
      const CreateMultisigRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.keys_.Serialize();
  }
  /**
   * @brief Set json object to keys field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetKeysString(  // line separate
      CreateMultisigRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.keys_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const CreateMultisigRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      CreateMultisigRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const CreateMultisigRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      CreateMultisigRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const CreateMultisigRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      CreateMultisigRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateMultisigRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateMultisigRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateMultisigRequestMapTable =
    cfd::core::JsonTableMap<CreateMultisigRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateMultisigRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateMultisigRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(nrequired) value
   */
  uint8_t nrequired_ = 1;
  /**
   * @brief JsonAPI(keys) value
   */
  JsonValueVector<std::string> keys_;  // NOLINT
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "p2wsh";
};

// ------------------------------------------------------------------------
// CreateMultisigResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateMultisigResponse) class
 */
class CreateMultisigResponse
  : public cfd::core::JsonClassBase<CreateMultisigResponse> {
 public:
  CreateMultisigResponse() {
    CollectFieldName();
  }
  virtual ~CreateMultisigResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const CreateMultisigResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      CreateMultisigResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Get of redeemScript
   * @return redeemScript
   */
  std::string GetRedeemScript() const {
    return redeem_script_;
  }
  /**
   * @brief Set to redeemScript
   * @param[in] redeem_script    setting value.
   */
  void SetRedeemScript(  // line separate
    const std::string& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeemScript
   * @return Data type of redeemScript
   */
  static std::string GetRedeemScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of redeemScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRedeemScriptString(  // line separate
      const CreateMultisigResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.redeem_script_);
  }
  /**
   * @brief Set json object to redeemScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRedeemScriptString(  // line separate
      CreateMultisigResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.redeem_script_, json_value);
  }

  /**
   * @brief Get of witnessScript
   * @return witnessScript
   */
  std::string GetWitnessScript() const {
    return witness_script_;
  }
  /**
   * @brief Set to witnessScript
   * @param[in] witness_script    setting value.
   */
  void SetWitnessScript(  // line separate
    const std::string& witness_script) {  // NOLINT
    this->witness_script_ = witness_script;
  }
  /**
   * @brief Get data type of witnessScript
   * @return Data type of witnessScript
   */
  static std::string GetWitnessScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of witnessScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetWitnessScriptString(  // line separate
      const CreateMultisigResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.witness_script_);
  }
  /**
   * @brief Set json object to witnessScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetWitnessScriptString(  // line separate
      CreateMultisigResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.witness_script_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateMultisigResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateMultisigResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateMultisigResponseMapTable =
    cfd::core::JsonTableMap<CreateMultisigResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateMultisigResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateMultisigResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
  /**
   * @brief JsonAPI(redeemScript) value
   */
  std::string redeem_script_ = "";
  /**
   * @brief JsonAPI(witnessScript) value
   */
  std::string witness_script_ = "";
};

// ------------------------------------------------------------------------
// OutputPrivkeyData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (OutputPrivkeyData) class
 */
class OutputPrivkeyData
  : public cfd::core::JsonClassBase<OutputPrivkeyData> {
 public:
  OutputPrivkeyData() {
    CollectFieldName();
  }
  virtual ~OutputPrivkeyData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of privkey
   * @return privkey
   */
  std::string GetPrivkey() const {
    return privkey_;
  }
  /**
   * @brief Set to privkey
   * @param[in] privkey    setting value.
   */
  void SetPrivkey(  // line separate
    const std::string& privkey) {  // NOLINT
    this->privkey_ = privkey;
  }
  /**
   * @brief Get data type of privkey
   * @return Data type of privkey
   */
  static std::string GetPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of privkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPrivkeyString(  // line separate
      const OutputPrivkeyData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.privkey_);
  }
  /**
   * @brief Set json object to privkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPrivkeyString(  // line separate
      OutputPrivkeyData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.privkey_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const OutputPrivkeyDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  OutputPrivkeyDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using OutputPrivkeyDataMapTable =
    cfd::core::JsonTableMap<OutputPrivkeyData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const OutputPrivkeyDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static OutputPrivkeyDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(privkey) value
   */
  std::string privkey_ = "";
};


// ------------------------------------------------------------------------
// ParseDescriptorRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ParseDescriptorRequest) class
 */
class ParseDescriptorRequest
  : public cfd::core::JsonClassBase<ParseDescriptorRequest> {
 public:
  ParseDescriptorRequest() {
    CollectFieldName();
  }
  virtual ~ParseDescriptorRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const ParseDescriptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      ParseDescriptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of descriptor
   * @return descriptor
   */
  std::string GetDescriptor() const {
    return descriptor_;
  }
  /**
   * @brief Set to descriptor
   * @param[in] descriptor    setting value.
   */
  void SetDescriptor(  // line separate
    const std::string& descriptor) {  // NOLINT
    this->descriptor_ = descriptor;
  }
  /**
   * @brief Get data type of descriptor
   * @return Data type of descriptor
   */
  static std::string GetDescriptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of descriptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetDescriptorString(  // line separate
      const ParseDescriptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.descriptor_);
  }
  /**
   * @brief Set json object to descriptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetDescriptorString(  // line separate
      ParseDescriptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.descriptor_, json_value);
  }

  /**
   * @brief Get of network
   * @return network
   */
  std::string GetNetwork() const {
    return network_;
  }
  /**
   * @brief Set to network
   * @param[in] network    setting value.
   */
  void SetNetwork(  // line separate
    const std::string& network) {  // NOLINT
    this->network_ = network;
  }
  /**
   * @brief Get data type of network
   * @return Data type of network
   */
  static std::string GetNetworkFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of network field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNetworkString(  // line separate
      const ParseDescriptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.network_);
  }
  /**
   * @brief Set json object to network field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNetworkString(  // line separate
      ParseDescriptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.network_, json_value);
  }

  /**
   * @brief Get of bip32DerivationPath
   * @return bip32DerivationPath
   */
  std::string GetBip32DerivationPath() const {
    return bip32_derivation_path_;
  }
  /**
   * @brief Set to bip32DerivationPath
   * @param[in] bip32_derivation_path    setting value.
   */
  void SetBip32DerivationPath(  // line separate
    const std::string& bip32_derivation_path) {  // NOLINT
    this->bip32_derivation_path_ = bip32_derivation_path;
  }
  /**
   * @brief Get data type of bip32DerivationPath
   * @return Data type of bip32DerivationPath
   */
  static std::string GetBip32DerivationPathFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of bip32DerivationPath field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBip32DerivationPathString(  // line separate
      const ParseDescriptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.bip32_derivation_path_);
  }
  /**
   * @brief Set json object to bip32DerivationPath field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBip32DerivationPathString(  // line separate
      ParseDescriptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.bip32_derivation_path_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ParseDescriptorRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ParseDescriptorRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ParseDescriptorRequestMapTable =
    cfd::core::JsonTableMap<ParseDescriptorRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ParseDescriptorRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ParseDescriptorRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(descriptor) value
   */
  std::string descriptor_ = "";
  /**
   * @brief JsonAPI(network) value
   */
  std::string network_ = "mainnet";
  /**
   * @brief JsonAPI(bip32DerivationPath) value
   */
  std::string bip32_derivation_path_ = "";
};

// ------------------------------------------------------------------------
// ParseDescriptorResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ParseDescriptorResponse) class
 */
class ParseDescriptorResponse
  : public cfd::core::JsonClassBase<ParseDescriptorResponse> {
 public:
  ParseDescriptorResponse() {
    CollectFieldName();
  }
  virtual ~ParseDescriptorResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of type
   * @return type
   */
  std::string GetType() const {
    return type_;
  }
  /**
   * @brief Set to type
   * @param[in] type    setting value.
   */
  void SetType(  // line separate
    const std::string& type) {  // NOLINT
    this->type_ = type;
  }
  /**
   * @brief Get data type of type
   * @return Data type of type
   */
  static std::string GetTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of type field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTypeString(  // line separate
      const ParseDescriptorResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.type_);
  }
  /**
   * @brief Set json object to type field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTypeString(  // line separate
      ParseDescriptorResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.type_, json_value);
  }

  /**
   * @brief Get of address
   * @return address
   */
  std::string GetAddress() const {
    return address_;
  }
  /**
   * @brief Set to address
   * @param[in] address    setting value.
   */
  void SetAddress(  // line separate
    const std::string& address) {  // NOLINT
    this->address_ = address;
  }
  /**
   * @brief Get data type of address
   * @return Data type of address
   */
  static std::string GetAddressFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of address field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAddressString(  // line separate
      const ParseDescriptorResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.address_);
  }
  /**
   * @brief Set json object to address field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAddressString(  // line separate
      ParseDescriptorResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.address_, json_value);
  }

  /**
   * @brief Get of lockingScript
   * @return lockingScript
   */
  std::string GetLockingScript() const {
    return locking_script_;
  }
  /**
   * @brief Set to lockingScript
   * @param[in] locking_script    setting value.
   */
  void SetLockingScript(  // line separate
    const std::string& locking_script) {  // NOLINT
    this->locking_script_ = locking_script;
  }
  /**
   * @brief Get data type of lockingScript
   * @return Data type of lockingScript
   */
  static std::string GetLockingScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of lockingScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetLockingScriptString(  // line separate
      const ParseDescriptorResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.locking_script_);
  }
  /**
   * @brief Set json object to lockingScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetLockingScriptString(  // line separate
      ParseDescriptorResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.locking_script_, json_value);
  }

  /**
   * @brief Get of hashType
   * @return hashType
   */
  std::string GetHashType() const {
    return hash_type_;
  }
  /**
   * @brief Set to hashType
   * @param[in] hash_type    setting value.
   */
  void SetHashType(  // line separate
    const std::string& hash_type) {  // NOLINT
    this->hash_type_ = hash_type;
  }
  /**
   * @brief Get data type of hashType
   * @return Data type of hashType
   */
  static std::string GetHashTypeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hashType field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHashTypeString(  // line separate
      const ParseDescriptorResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hash_type_);
  }
  /**
   * @brief Set json object to hashType field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHashTypeString(  // line separate
      ParseDescriptorResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hash_type_, json_value);
  }

  /**
   * @brief Get of redeemScript
   * @return redeemScript
   */
  std::string GetRedeemScript() const {
    return redeem_script_;
  }
  /**
   * @brief Set to redeemScript
   * @param[in] redeem_script    setting value.
   */
  void SetRedeemScript(  // line separate
    const std::string& redeem_script) {  // NOLINT
    this->redeem_script_ = redeem_script;
  }
  /**
   * @brief Get data type of redeemScript
   * @return Data type of redeemScript
   */
  static std::string GetRedeemScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of redeemScript field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetRedeemScriptString(  // line separate
      const ParseDescriptorResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.redeem_script_);
  }
  /**
   * @brief Set json object to redeemScript field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetRedeemScriptString(  // line separate
      ParseDescriptorResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.redeem_script_, json_value);
  }

  /**
   * @brief Get of includeMultisig
   * @return includeMultisig
   */
  bool GetIncludeMultisig() const {
    return include_multisig_;
  }
  /**
   * @brief Set to includeMultisig
   * @param[in] include_multisig    setting value.
   */
  void SetIncludeMultisig(  // line separate
    const bool& include_multisig) {  // NOLINT
    this->include_multisig_ = include_multisig;
  }
  /**
   * @brief Get data type of includeMultisig
   * @return Data type of includeMultisig
   */
  static std::string GetIncludeMultisigFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of includeMultisig field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIncludeMultisigString(  // line separate
      const ParseDescriptorResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.include_multisig_);
  }
  /**
   * @brief Set json object to includeMultisig field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIncludeMultisigString(  // line separate
      ParseDescriptorResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.include_multisig_, json_value);
  }

  /**
   * @brief Get of scripts.
   * @return scripts
   */
  JsonObjectVector<DescriptorScriptJson, DescriptorScriptJsonStruct>& GetScripts() {  // NOLINT
    return scripts_;
  }
  /**
   * @brief Set to scripts.
   * @param[in] scripts    setting value.
   */
  void SetScripts(  // line separate
      const JsonObjectVector<DescriptorScriptJson, DescriptorScriptJsonStruct>& scripts) {  // NOLINT
    this->scripts_ = scripts;
  }
  /**
   * @brief Get data type of scripts.
   * @return Data type of scripts.
   */
  static std::string GetScriptsFieldType() {
    return "JsonObjectVector<DescriptorScriptJson, DescriptorScriptJsonStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of scripts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetScriptsString(  // line separate
      const ParseDescriptorResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.scripts_.Serialize();
  }
  /**
   * @brief Set json object to scripts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetScriptsString(  // line separate
      ParseDescriptorResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.scripts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ParseDescriptorResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ParseDescriptorResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ParseDescriptorResponseMapTable =
    cfd::core::JsonTableMap<ParseDescriptorResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ParseDescriptorResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ParseDescriptorResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(type) value
   */
  std::string type_ = "";
  /**
   * @brief JsonAPI(address) value
   */
  std::string address_ = "";
  /**
   * @brief JsonAPI(lockingScript) value
   */
  std::string locking_script_ = "";
  /**
   * @brief JsonAPI(hashType) value
   */
  std::string hash_type_ = "";
  /**
   * @brief JsonAPI(redeemScript) value
   */
  std::string redeem_script_ = "";
  /**
   * @brief JsonAPI(includeMultisig) value
   */
  bool include_multisig_ = false;
  /**
   * @brief JsonAPI(scripts) value
   */
  JsonObjectVector<DescriptorScriptJson, DescriptorScriptJsonStruct> scripts_;  // NOLINT
};

// ------------------------------------------------------------------------
// ParseScriptRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ParseScriptRequest) class
 */
class ParseScriptRequest
  : public cfd::core::JsonClassBase<ParseScriptRequest> {
 public:
  ParseScriptRequest() {
    CollectFieldName();
  }
  virtual ~ParseScriptRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of script
   * @return script
   */
  std::string GetScript() const {
    return script_;
  }
  /**
   * @brief Set to script
   * @param[in] script    setting value.
   */
  void SetScript(  // line separate
    const std::string& script) {  // NOLINT
    this->script_ = script;
  }
  /**
   * @brief Get data type of script
   * @return Data type of script
   */
  static std::string GetScriptFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of script field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetScriptString(  // line separate
      const ParseScriptRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.script_);
  }
  /**
   * @brief Set json object to script field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetScriptString(  // line separate
      ParseScriptRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.script_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ParseScriptRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ParseScriptRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ParseScriptRequestMapTable =
    cfd::core::JsonTableMap<ParseScriptRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ParseScriptRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ParseScriptRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(script) value
   */
  std::string script_ = "";
};

// ------------------------------------------------------------------------
// ParseScriptResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (ParseScriptResponse) class
 */
class ParseScriptResponse
  : public cfd::core::JsonClassBase<ParseScriptResponse> {
 public:
  ParseScriptResponse() {
    CollectFieldName();
  }
  virtual ~ParseScriptResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of scriptItems.
   * @return scriptItems
   */
  JsonValueVector<std::string>& GetScriptItems() {  // NOLINT
    return script_items_;
  }
  /**
   * @brief Set to scriptItems.
   * @param[in] script_items    setting value.
   */
  void SetScriptItems(  // line separate
      const JsonValueVector<std::string>& script_items) {  // NOLINT
    this->script_items_ = script_items;
  }
  /**
   * @brief Get data type of scriptItems.
   * @return Data type of scriptItems.
   */
  static std::string GetScriptItemsFieldType() {
    return "JsonValueVector<std::string>";  // NOLINT
  }
  /**
   * @brief Get json string of scriptItems field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetScriptItemsString(  // line separate
      const ParseScriptResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.script_items_.Serialize();
  }
  /**
   * @brief Set json object to scriptItems field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetScriptItemsString(  // line separate
      ParseScriptResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.script_items_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const ParseScriptResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  ParseScriptResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using ParseScriptResponseMapTable =
    cfd::core::JsonTableMap<ParseScriptResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const ParseScriptResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static ParseScriptResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(scriptItems) value
   */
  JsonValueVector<std::string> script_items_;  // NOLINT
};

// ------------------------------------------------------------------------
// SchnorrSignRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SchnorrSignRequest) class
 */
class SchnorrSignRequest
  : public cfd::core::JsonClassBase<SchnorrSignRequest> {
 public:
  SchnorrSignRequest() {
    CollectFieldName();
  }
  virtual ~SchnorrSignRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of privkey
   * @return privkey
   */
  std::string GetPrivkey() const {
    return privkey_;
  }
  /**
   * @brief Set to privkey
   * @param[in] privkey    setting value.
   */
  void SetPrivkey(  // line separate
    const std::string& privkey) {  // NOLINT
    this->privkey_ = privkey;
  }
  /**
   * @brief Get data type of privkey
   * @return Data type of privkey
   */
  static std::string GetPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of privkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPrivkeyString(  // line separate
      const SchnorrSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.privkey_);
  }
  /**
   * @brief Set json object to privkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPrivkeyString(  // line separate
      SchnorrSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.privkey_, json_value);
  }

  /**
   * @brief Get of message
   * @return message
   */
  std::string GetMessage() const {
    return message_;
  }
  /**
   * @brief Set to message
   * @param[in] message    setting value.
   */
  void SetMessage(  // line separate
    const std::string& message) {  // NOLINT
    this->message_ = message;
  }
  /**
   * @brief Get data type of message
   * @return Data type of message
   */
  static std::string GetMessageFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of message field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMessageString(  // line separate
      const SchnorrSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.message_);
  }
  /**
   * @brief Set json object to message field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMessageString(  // line separate
      SchnorrSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.message_, json_value);
  }

  /**
   * @brief Get of isHashed
   * @return isHashed
   */
  bool GetIsHashed() const {
    return is_hashed_;
  }
  /**
   * @brief Set to isHashed
   * @param[in] is_hashed    setting value.
   */
  void SetIsHashed(  // line separate
    const bool& is_hashed) {  // NOLINT
    this->is_hashed_ = is_hashed;
  }
  /**
   * @brief Get data type of isHashed
   * @return Data type of isHashed
   */
  static std::string GetIsHashedFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isHashed field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsHashedString(  // line separate
      const SchnorrSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_hashed_);
  }
  /**
   * @brief Set json object to isHashed field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsHashedString(  // line separate
      SchnorrSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_hashed_, json_value);
  }

  /**
   * @brief Get of nonceOrAux
   * @return nonceOrAux
   */
  std::string GetNonceOrAux() const {
    return nonce_or_aux_;
  }
  /**
   * @brief Set to nonceOrAux
   * @param[in] nonce_or_aux    setting value.
   */
  void SetNonceOrAux(  // line separate
    const std::string& nonce_or_aux) {  // NOLINT
    this->nonce_or_aux_ = nonce_or_aux;
  }
  /**
   * @brief Get data type of nonceOrAux
   * @return Data type of nonceOrAux
   */
  static std::string GetNonceOrAuxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of nonceOrAux field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetNonceOrAuxString(  // line separate
      const SchnorrSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.nonce_or_aux_);
  }
  /**
   * @brief Set json object to nonceOrAux field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetNonceOrAuxString(  // line separate
      SchnorrSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.nonce_or_aux_, json_value);
  }

  /**
   * @brief Get of isNonce
   * @return isNonce
   */
  bool GetIsNonce() const {
    return is_nonce_;
  }
  /**
   * @brief Set to isNonce
   * @param[in] is_nonce    setting value.
   */
  void SetIsNonce(  // line separate
    const bool& is_nonce) {  // NOLINT
    this->is_nonce_ = is_nonce;
  }
  /**
   * @brief Get data type of isNonce
   * @return Data type of isNonce
   */
  static std::string GetIsNonceFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isNonce field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsNonceString(  // line separate
      const SchnorrSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_nonce_);
  }
  /**
   * @brief Set json object to isNonce field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsNonceString(  // line separate
      SchnorrSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_nonce_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SchnorrSignRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SchnorrSignRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SchnorrSignRequestMapTable =
    cfd::core::JsonTableMap<SchnorrSignRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SchnorrSignRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SchnorrSignRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(privkey) value
   */
  std::string privkey_ = "";
  /**
   * @brief JsonAPI(message) value
   */
  std::string message_ = "";
  /**
   * @brief JsonAPI(isHashed) value
   */
  bool is_hashed_ = false;
  /**
   * @brief JsonAPI(nonceOrAux) value
   */
  std::string nonce_or_aux_ = "";
  /**
   * @brief JsonAPI(isNonce) value
   */
  bool is_nonce_ = false;
};

// ------------------------------------------------------------------------
// SchnorrSignResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SchnorrSignResponse) class
 */
class SchnorrSignResponse
  : public cfd::core::JsonClassBase<SchnorrSignResponse> {
 public:
  SchnorrSignResponse() {
    CollectFieldName();
  }
  virtual ~SchnorrSignResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of hex
   * @return hex
   */
  std::string GetHex() const {
    return hex_;
  }
  /**
   * @brief Set to hex
   * @param[in] hex    setting value.
   */
  void SetHex(  // line separate
    const std::string& hex) {  // NOLINT
    this->hex_ = hex;
  }
  /**
   * @brief Get data type of hex
   * @return Data type of hex
   */
  static std::string GetHexFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of hex field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHexString(  // line separate
      const SchnorrSignResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.hex_);
  }
  /**
   * @brief Set json object to hex field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHexString(  // line separate
      SchnorrSignResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.hex_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SchnorrSignResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SchnorrSignResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SchnorrSignResponseMapTable =
    cfd::core::JsonTableMap<SchnorrSignResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SchnorrSignResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SchnorrSignResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(hex) value
   */
  std::string hex_ = "";
};

// ------------------------------------------------------------------------
// SchnorrVerifyRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SchnorrVerifyRequest) class
 */
class SchnorrVerifyRequest
  : public cfd::core::JsonClassBase<SchnorrVerifyRequest> {
 public:
  SchnorrVerifyRequest() {
    CollectFieldName();
  }
  virtual ~SchnorrVerifyRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const SchnorrVerifyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      SchnorrVerifyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Get of message
   * @return message
   */
  std::string GetMessage() const {
    return message_;
  }
  /**
   * @brief Set to message
   * @param[in] message    setting value.
   */
  void SetMessage(  // line separate
    const std::string& message) {  // NOLINT
    this->message_ = message;
  }
  /**
   * @brief Get data type of message
   * @return Data type of message
   */
  static std::string GetMessageFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of message field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMessageString(  // line separate
      const SchnorrVerifyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.message_);
  }
  /**
   * @brief Set json object to message field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMessageString(  // line separate
      SchnorrVerifyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.message_, json_value);
  }

  /**
   * @brief Get of isHashed
   * @return isHashed
   */
  bool GetIsHashed() const {
    return is_hashed_;
  }
  /**
   * @brief Set to isHashed
   * @param[in] is_hashed    setting value.
   */
  void SetIsHashed(  // line separate
    const bool& is_hashed) {  // NOLINT
    this->is_hashed_ = is_hashed;
  }
  /**
   * @brief Get data type of isHashed
   * @return Data type of isHashed
   */
  static std::string GetIsHashedFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isHashed field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsHashedString(  // line separate
      const SchnorrVerifyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_hashed_);
  }
  /**
   * @brief Set json object to isHashed field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsHashedString(  // line separate
      SchnorrVerifyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_hashed_, json_value);
  }

  /**
   * @brief Get of signature
   * @return signature
   */
  std::string GetSignature() const {
    return signature_;
  }
  /**
   * @brief Set to signature
   * @param[in] signature    setting value.
   */
  void SetSignature(  // line separate
    const std::string& signature) {  // NOLINT
    this->signature_ = signature;
  }
  /**
   * @brief Get data type of signature
   * @return Data type of signature
   */
  static std::string GetSignatureFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of signature field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSignatureString(  // line separate
      const SchnorrVerifyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.signature_);
  }
  /**
   * @brief Set json object to signature field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSignatureString(  // line separate
      SchnorrVerifyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.signature_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SchnorrVerifyRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SchnorrVerifyRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SchnorrVerifyRequestMapTable =
    cfd::core::JsonTableMap<SchnorrVerifyRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SchnorrVerifyRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SchnorrVerifyRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
  /**
   * @brief JsonAPI(message) value
   */
  std::string message_ = "";
  /**
   * @brief JsonAPI(isHashed) value
   */
  bool is_hashed_ = false;
  /**
   * @brief JsonAPI(signature) value
   */
  std::string signature_ = "";
};

// ------------------------------------------------------------------------
// SchnorrVerifyResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SchnorrVerifyResponse) class
 */
class SchnorrVerifyResponse
  : public cfd::core::JsonClassBase<SchnorrVerifyResponse> {
 public:
  SchnorrVerifyResponse() {
    CollectFieldName();
  }
  virtual ~SchnorrVerifyResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of valid
   * @return valid
   */
  bool GetValid() const {
    return valid_;
  }
  /**
   * @brief Set to valid
   * @param[in] valid    setting value.
   */
  void SetValid(  // line separate
    const bool& valid) {  // NOLINT
    this->valid_ = valid;
  }
  /**
   * @brief Get data type of valid
   * @return Data type of valid
   */
  static std::string GetValidFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of valid field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetValidString(  // line separate
      const SchnorrVerifyResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.valid_);
  }
  /**
   * @brief Set json object to valid field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetValidString(  // line separate
      SchnorrVerifyResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.valid_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SchnorrVerifyResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SchnorrVerifyResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SchnorrVerifyResponseMapTable =
    cfd::core::JsonTableMap<SchnorrVerifyResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SchnorrVerifyResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SchnorrVerifyResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(valid) value
   */
  bool valid_ = false;
};

// ------------------------------------------------------------------------
// SelectUtxosRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SelectUtxosRequest) class
 */
class SelectUtxosRequest
  : public cfd::core::JsonClassBase<SelectUtxosRequest> {
 public:
  SelectUtxosRequest() {
    CollectFieldName();
  }
  virtual ~SelectUtxosRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of utxos.
   * @return utxos
   */
  JsonObjectVector<UtxoJsonData, UtxoJsonDataStruct>& GetUtxos() {  // NOLINT
    return utxos_;
  }
  /**
   * @brief Set to utxos.
   * @param[in] utxos    setting value.
   */
  void SetUtxos(  // line separate
      const JsonObjectVector<UtxoJsonData, UtxoJsonDataStruct>& utxos) {  // NOLINT
    this->utxos_ = utxos;
  }
  /**
   * @brief Get data type of utxos.
   * @return Data type of utxos.
   */
  static std::string GetUtxosFieldType() {
    return "JsonObjectVector<UtxoJsonData, UtxoJsonDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of utxos field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUtxosString(  // line separate
      const SelectUtxosRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.utxos_.Serialize();
  }
  /**
   * @brief Set json object to utxos field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUtxosString(  // line separate
      SelectUtxosRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.utxos_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of targetAmount
   * @return targetAmount
   */
  int64_t GetTargetAmount() const {
    return target_amount_;
  }
  /**
   * @brief Set to targetAmount
   * @param[in] target_amount    setting value.
   */
  void SetTargetAmount(  // line separate
    const int64_t& target_amount) {  // NOLINT
    this->target_amount_ = target_amount;
  }
  /**
   * @brief Get data type of targetAmount
   * @return Data type of targetAmount
   */
  static std::string GetTargetAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of targetAmount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTargetAmountString(  // line separate
      const SelectUtxosRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.target_amount_);
  }
  /**
   * @brief Set json object to targetAmount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTargetAmountString(  // line separate
      SelectUtxosRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.target_amount_, json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const SelectUtxosRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      SelectUtxosRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of targets.
   * @return targets
   */
  JsonObjectVector<TargetAmountMapData, TargetAmountMapDataStruct>& GetTargets() {  // NOLINT
    return targets_;
  }
  /**
   * @brief Set to targets.
   * @param[in] targets    setting value.
   */
  void SetTargets(  // line separate
      const JsonObjectVector<TargetAmountMapData, TargetAmountMapDataStruct>& targets) {  // NOLINT
    this->targets_ = targets;
  }
  /**
   * @brief Get data type of targets.
   * @return Data type of targets.
   */
  static std::string GetTargetsFieldType() {
    return "JsonObjectVector<TargetAmountMapData, TargetAmountMapDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of targets field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTargetsString(  // line separate
      const SelectUtxosRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.targets_.Serialize();
  }
  /**
   * @brief Set json object to targets field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTargetsString(  // line separate
      SelectUtxosRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.targets_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of feeInfo.
   * @return feeInfo
   */
  CoinSelectionFeeInformationField& GetFeeInfo() {  // NOLINT
    return fee_info_;
  }
  /**
   * @brief Set to feeInfo.
   * @param[in] fee_info    setting value.
   */
  void SetFeeInfo(  // line separate
      const CoinSelectionFeeInformationField& fee_info) {  // NOLINT
    this->fee_info_ = fee_info;
  }
  /**
   * @brief Get data type of feeInfo.
   * @return Data type of feeInfo.
   */
  static std::string GetFeeInfoFieldType() {
    return "CoinSelectionFeeInformationField";  // NOLINT
  }
  /**
   * @brief Get json string of feeInfo field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetFeeInfoString(  // line separate
      const SelectUtxosRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.fee_info_.Serialize();
  }
  /**
   * @brief Set json object to feeInfo field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetFeeInfoString(  // line separate
      SelectUtxosRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.fee_info_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SelectUtxosRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SelectUtxosRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SelectUtxosRequestMapTable =
    cfd::core::JsonTableMap<SelectUtxosRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SelectUtxosRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SelectUtxosRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(utxos) value
   */
  JsonObjectVector<UtxoJsonData, UtxoJsonDataStruct> utxos_;  // NOLINT
  /**
   * @brief JsonAPI(targetAmount) value
   */
  int64_t target_amount_ = 0;
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(targets) value
   */
  JsonObjectVector<TargetAmountMapData, TargetAmountMapDataStruct> targets_;  // NOLINT
  /**
   * @brief JsonAPI(feeInfo) value
   */
  CoinSelectionFeeInformationField fee_info_;  // NOLINT
};

// ------------------------------------------------------------------------
// SelectUtxosResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SelectUtxosResponse) class
 */
class SelectUtxosResponse
  : public cfd::core::JsonClassBase<SelectUtxosResponse> {
 public:
  SelectUtxosResponse() {
    CollectFieldName();
  }
  virtual ~SelectUtxosResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of utxos.
   * @return utxos
   */
  JsonObjectVector<UtxoJsonData, UtxoJsonDataStruct>& GetUtxos() {  // NOLINT
    return utxos_;
  }
  /**
   * @brief Set to utxos.
   * @param[in] utxos    setting value.
   */
  void SetUtxos(  // line separate
      const JsonObjectVector<UtxoJsonData, UtxoJsonDataStruct>& utxos) {  // NOLINT
    this->utxos_ = utxos;
  }
  /**
   * @brief Get data type of utxos.
   * @return Data type of utxos.
   */
  static std::string GetUtxosFieldType() {
    return "JsonObjectVector<UtxoJsonData, UtxoJsonDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of utxos field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUtxosString(  // line separate
      const SelectUtxosResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.utxos_.Serialize();
  }
  /**
   * @brief Set json object to utxos field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUtxosString(  // line separate
      SelectUtxosResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.utxos_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of selectedAmount
   * @return selectedAmount
   */
  int64_t GetSelectedAmount() const {
    return selected_amount_;
  }
  /**
   * @brief Set to selectedAmount
   * @param[in] selected_amount    setting value.
   */
  void SetSelectedAmount(  // line separate
    const int64_t& selected_amount) {  // NOLINT
    this->selected_amount_ = selected_amount;
  }
  /**
   * @brief Get data type of selectedAmount
   * @return Data type of selectedAmount
   */
  static std::string GetSelectedAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of selectedAmount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSelectedAmountString(  // line separate
      const SelectUtxosResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.selected_amount_);
  }
  /**
   * @brief Set json object to selectedAmount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSelectedAmountString(  // line separate
      SelectUtxosResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.selected_amount_, json_value);
  }

  /**
   * @brief Get of selectedAmounts.
   * @return selectedAmounts
   */
  JsonObjectVector<TargetAmountMapData, TargetAmountMapDataStruct>& GetSelectedAmounts() {  // NOLINT
    return selected_amounts_;
  }
  /**
   * @brief Set to selectedAmounts.
   * @param[in] selected_amounts    setting value.
   */
  void SetSelectedAmounts(  // line separate
      const JsonObjectVector<TargetAmountMapData, TargetAmountMapDataStruct>& selected_amounts) {  // NOLINT
    this->selected_amounts_ = selected_amounts;
  }
  /**
   * @brief Get data type of selectedAmounts.
   * @return Data type of selectedAmounts.
   */
  static std::string GetSelectedAmountsFieldType() {
    return "JsonObjectVector<TargetAmountMapData, TargetAmountMapDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of selectedAmounts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetSelectedAmountsString(  // line separate
      const SelectUtxosResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.selected_amounts_.Serialize();
  }
  /**
   * @brief Set json object to selectedAmounts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetSelectedAmountsString(  // line separate
      SelectUtxosResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.selected_amounts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of feeAmount
   * @return feeAmount
   */
  int64_t GetFeeAmount() const {
    return fee_amount_;
  }
  /**
   * @brief Set to feeAmount
   * @param[in] fee_amount    setting value.
   */
  void SetFeeAmount(  // line separate
    const int64_t& fee_amount) {  // NOLINT
    this->fee_amount_ = fee_amount;
  }
  /**
   * @brief Get data type of feeAmount
   * @return Data type of feeAmount
   */
  static std::string GetFeeAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of feeAmount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetFeeAmountString(  // line separate
      const SelectUtxosResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.fee_amount_);
  }
  /**
   * @brief Set json object to feeAmount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetFeeAmountString(  // line separate
      SelectUtxosResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.fee_amount_, json_value);
  }

  /**
   * @brief Get of utxoFeeAmount
   * @return utxoFeeAmount
   */
  int64_t GetUtxoFeeAmount() const {
    return utxo_fee_amount_;
  }
  /**
   * @brief Set to utxoFeeAmount
   * @param[in] utxo_fee_amount    setting value.
   */
  void SetUtxoFeeAmount(  // line separate
    const int64_t& utxo_fee_amount) {  // NOLINT
    this->utxo_fee_amount_ = utxo_fee_amount;
  }
  /**
   * @brief Get data type of utxoFeeAmount
   * @return Data type of utxoFeeAmount
   */
  static std::string GetUtxoFeeAmountFieldType() {
    return "int64_t";
  }
  /**
   * @brief Get json string of utxoFeeAmount field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetUtxoFeeAmountString(  // line separate
      const SelectUtxosResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.utxo_fee_amount_);
  }
  /**
   * @brief Set json object to utxoFeeAmount field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetUtxoFeeAmountString(  // line separate
      SelectUtxosResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.utxo_fee_amount_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SelectUtxosResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SelectUtxosResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SelectUtxosResponseMapTable =
    cfd::core::JsonTableMap<SelectUtxosResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SelectUtxosResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SelectUtxosResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(utxos) value
   */
  JsonObjectVector<UtxoJsonData, UtxoJsonDataStruct> utxos_;  // NOLINT
  /**
   * @brief JsonAPI(selectedAmount) value
   */
  int64_t selected_amount_ = 0;
  /**
   * @brief JsonAPI(selectedAmounts) value
   */
  JsonObjectVector<TargetAmountMapData, TargetAmountMapDataStruct> selected_amounts_;  // NOLINT
  /**
   * @brief JsonAPI(feeAmount) value
   */
  int64_t fee_amount_ = 0;
  /**
   * @brief JsonAPI(utxoFeeAmount) value
   */
  int64_t utxo_fee_amount_ = 0;
};

// ------------------------------------------------------------------------
// SerializeLedgerFormatRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SerializeLedgerFormatRequest) class
 */
class SerializeLedgerFormatRequest
  : public cfd::core::JsonClassBase<SerializeLedgerFormatRequest> {
 public:
  SerializeLedgerFormatRequest() {
    CollectFieldName();
  }
  virtual ~SerializeLedgerFormatRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const SerializeLedgerFormatRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      SerializeLedgerFormatRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of txouts.
   * @return txouts
   */
  JsonObjectVector<SerializeLedgerFormatTxOut, SerializeLedgerFormatTxOutStruct>& GetTxouts() {  // NOLINT
    return txouts_;
  }
  /**
   * @brief Set to txouts.
   * @param[in] txouts    setting value.
   */
  void SetTxouts(  // line separate
      const JsonObjectVector<SerializeLedgerFormatTxOut, SerializeLedgerFormatTxOutStruct>& txouts) {  // NOLINT
    this->txouts_ = txouts;
  }
  /**
   * @brief Get data type of txouts.
   * @return Data type of txouts.
   */
  static std::string GetTxoutsFieldType() {
    return "JsonObjectVector<SerializeLedgerFormatTxOut, SerializeLedgerFormatTxOutStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txouts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxoutsString(  // line separate
      const SerializeLedgerFormatRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txouts_.Serialize();
  }
  /**
   * @brief Set json object to txouts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxoutsString(  // line separate
      SerializeLedgerFormatRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txouts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of skipWitness
   * @return skipWitness
   */
  bool GetSkipWitness() const {
    return skip_witness_;
  }
  /**
   * @brief Set to skipWitness
   * @param[in] skip_witness    setting value.
   */
  void SetSkipWitness(  // line separate
    const bool& skip_witness) {  // NOLINT
    this->skip_witness_ = skip_witness;
  }
  /**
   * @brief Get data type of skipWitness
   * @return Data type of skipWitness
   */
  static std::string GetSkipWitnessFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of skipWitness field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSkipWitnessString(  // line separate
      const SerializeLedgerFormatRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.skip_witness_);
  }
  /**
   * @brief Set json object to skipWitness field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSkipWitnessString(  // line separate
      SerializeLedgerFormatRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.skip_witness_, json_value);
  }

  /**
   * @brief Get of isAuthorization
   * @return isAuthorization
   */
  bool GetIsAuthorization() const {
    return is_authorization_;
  }
  /**
   * @brief Set to isAuthorization
   * @param[in] is_authorization    setting value.
   */
  void SetIsAuthorization(  // line separate
    const bool& is_authorization) {  // NOLINT
    this->is_authorization_ = is_authorization;
  }
  /**
   * @brief Get data type of isAuthorization
   * @return Data type of isAuthorization
   */
  static std::string GetIsAuthorizationFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isAuthorization field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsAuthorizationString(  // line separate
      const SerializeLedgerFormatRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_authorization_);
  }
  /**
   * @brief Set json object to isAuthorization field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsAuthorizationString(  // line separate
      SerializeLedgerFormatRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_authorization_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SerializeLedgerFormatRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SerializeLedgerFormatRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SerializeLedgerFormatRequestMapTable =
    cfd::core::JsonTableMap<SerializeLedgerFormatRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SerializeLedgerFormatRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SerializeLedgerFormatRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(txouts) value
   */
  JsonObjectVector<SerializeLedgerFormatTxOut, SerializeLedgerFormatTxOutStruct> txouts_;  // NOLINT
  /**
   * @brief JsonAPI(skipWitness) value
   */
  bool skip_witness_ = false;
  /**
   * @brief JsonAPI(isAuthorization) value
   */
  bool is_authorization_ = true;
};

// ------------------------------------------------------------------------
// SerializeLedgerFormatResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SerializeLedgerFormatResponse) class
 */
class SerializeLedgerFormatResponse
  : public cfd::core::JsonClassBase<SerializeLedgerFormatResponse> {
 public:
  SerializeLedgerFormatResponse() {
    CollectFieldName();
  }
  virtual ~SerializeLedgerFormatResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of serialize
   * @return serialize
   */
  std::string GetSerialize() const {
    return serialize_;
  }
  /**
   * @brief Set to serialize
   * @param[in] serialize    setting value.
   */
  void SetSerialize(  // line separate
    const std::string& serialize) {  // NOLINT
    this->serialize_ = serialize;
  }
  /**
   * @brief Get data type of serialize
   * @return Data type of serialize
   */
  static std::string GetSerializeFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of serialize field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSerializeString(  // line separate
      const SerializeLedgerFormatResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.serialize_);
  }
  /**
   * @brief Set json object to serialize field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSerializeString(  // line separate
      SerializeLedgerFormatResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.serialize_, json_value);
  }

  /**
   * @brief Get of sha256
   * @return sha256
   */
  std::string GetSha256() const {
    return sha256_;
  }
  /**
   * @brief Set to sha256
   * @param[in] sha256    setting value.
   */
  void SetSha256(  // line separate
    const std::string& sha256) {  // NOLINT
    this->sha256_ = sha256;
  }
  /**
   * @brief Get data type of sha256
   * @return Data type of sha256
   */
  static std::string GetSha256FieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of sha256 field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSha256String(  // line separate
      const SerializeLedgerFormatResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.sha256_);
  }
  /**
   * @brief Set json object to sha256 field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSha256String(  // line separate
      SerializeLedgerFormatResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.sha256_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SerializeLedgerFormatResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SerializeLedgerFormatResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SerializeLedgerFormatResponseMapTable =
    cfd::core::JsonTableMap<SerializeLedgerFormatResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SerializeLedgerFormatResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SerializeLedgerFormatResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(serialize) value
   */
  std::string serialize_ = "";
  /**
   * @brief JsonAPI(sha256) value
   */
  std::string sha256_ = "";
};

// ------------------------------------------------------------------------
// SetPsbtRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SetPsbtRequest) class
 */
class SetPsbtRequest
  : public cfd::core::JsonClassBase<SetPsbtRequest> {
 public:
  SetPsbtRequest() {
    CollectFieldName();
  }
  virtual ~SetPsbtRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of psbt
   * @return psbt
   */
  std::string GetPsbt() const {
    return psbt_;
  }
  /**
   * @brief Set to psbt
   * @param[in] psbt    setting value.
   */
  void SetPsbt(  // line separate
    const std::string& psbt) {  // NOLINT
    this->psbt_ = psbt;
  }
  /**
   * @brief Get data type of psbt
   * @return Data type of psbt
   */
  static std::string GetPsbtFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of psbt field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPsbtString(  // line separate
      const SetPsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.psbt_);
  }
  /**
   * @brief Set json object to psbt field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPsbtString(  // line separate
      SetPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.psbt_, json_value);
  }

  /**
   * @brief Get of inputs.
   * @return inputs
   */
  JsonObjectVector<PsbtInputRequest, PsbtInputRequestStruct>& GetInputs() {  // NOLINT
    return inputs_;
  }
  /**
   * @brief Set to inputs.
   * @param[in] inputs    setting value.
   */
  void SetInputs(  // line separate
      const JsonObjectVector<PsbtInputRequest, PsbtInputRequestStruct>& inputs) {  // NOLINT
    this->inputs_ = inputs;
  }
  /**
   * @brief Get data type of inputs.
   * @return Data type of inputs.
   */
  static std::string GetInputsFieldType() {
    return "JsonObjectVector<PsbtInputRequest, PsbtInputRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of inputs field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetInputsString(  // line separate
      const SetPsbtRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.inputs_.Serialize();
  }
  /**
   * @brief Set json object to inputs field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetInputsString(  // line separate
      SetPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.inputs_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of outputs.
   * @return outputs
   */
  JsonObjectVector<PsbtOutputRequest, PsbtOutputRequestStruct>& GetOutputs() {  // NOLINT
    return outputs_;
  }
  /**
   * @brief Set to outputs.
   * @param[in] outputs    setting value.
   */
  void SetOutputs(  // line separate
      const JsonObjectVector<PsbtOutputRequest, PsbtOutputRequestStruct>& outputs) {  // NOLINT
    this->outputs_ = outputs;
  }
  /**
   * @brief Get data type of outputs.
   * @return Data type of outputs.
   */
  static std::string GetOutputsFieldType() {
    return "JsonObjectVector<PsbtOutputRequest, PsbtOutputRequestStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of outputs field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetOutputsString(  // line separate
      const SetPsbtRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.outputs_.Serialize();
  }
  /**
   * @brief Set json object to outputs field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetOutputsString(  // line separate
      SetPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.outputs_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of global.
   * @return global
   */
  PsbtGlobalRequestData& GetGlobal() {  // NOLINT
    return global_;
  }
  /**
   * @brief Set to global.
   * @param[in] global    setting value.
   */
  void SetGlobal(  // line separate
      const PsbtGlobalRequestData& global) {  // NOLINT
    this->global_ = global;
  }
  /**
   * @brief Get data type of global.
   * @return Data type of global.
   */
  static std::string GetGlobalFieldType() {
    return "PsbtGlobalRequestData";  // NOLINT
  }
  /**
   * @brief Get json string of global field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetGlobalString(  // line separate
      const SetPsbtRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.global_.Serialize();
  }
  /**
   * @brief Set json object to global field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetGlobalString(  // line separate
      SetPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.global_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SetPsbtRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SetPsbtRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SetPsbtRequestMapTable =
    cfd::core::JsonTableMap<SetPsbtRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SetPsbtRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SetPsbtRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(psbt) value
   */
  std::string psbt_ = "";
  /**
   * @brief JsonAPI(inputs) value
   */
  JsonObjectVector<PsbtInputRequest, PsbtInputRequestStruct> inputs_;  // NOLINT
  /**
   * @brief JsonAPI(outputs) value
   */
  JsonObjectVector<PsbtOutputRequest, PsbtOutputRequestStruct> outputs_;  // NOLINT
  /**
   * @brief JsonAPI(global) value
   */
  PsbtGlobalRequestData global_;  // NOLINT
};

// ------------------------------------------------------------------------
// SetPsbtRecordRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SetPsbtRecordRequest) class
 */
class SetPsbtRecordRequest
  : public cfd::core::JsonClassBase<SetPsbtRecordRequest> {
 public:
  SetPsbtRecordRequest() {
    CollectFieldName();
  }
  virtual ~SetPsbtRecordRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of psbt
   * @return psbt
   */
  std::string GetPsbt() const {
    return psbt_;
  }
  /**
   * @brief Set to psbt
   * @param[in] psbt    setting value.
   */
  void SetPsbt(  // line separate
    const std::string& psbt) {  // NOLINT
    this->psbt_ = psbt;
  }
  /**
   * @brief Get data type of psbt
   * @return Data type of psbt
   */
  static std::string GetPsbtFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of psbt field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPsbtString(  // line separate
      const SetPsbtRecordRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.psbt_);
  }
  /**
   * @brief Set json object to psbt field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPsbtString(  // line separate
      SetPsbtRecordRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.psbt_, json_value);
  }

  /**
   * @brief Get of records.
   * @return records
   */
  JsonObjectVector<PsbtRecordData, PsbtRecordDataStruct>& GetRecords() {  // NOLINT
    return records_;
  }
  /**
   * @brief Set to records.
   * @param[in] records    setting value.
   */
  void SetRecords(  // line separate
      const JsonObjectVector<PsbtRecordData, PsbtRecordDataStruct>& records) {  // NOLINT
    this->records_ = records;
  }
  /**
   * @brief Get data type of records.
   * @return Data type of records.
   */
  static std::string GetRecordsFieldType() {
    return "JsonObjectVector<PsbtRecordData, PsbtRecordDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of records field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetRecordsString(  // line separate
      const SetPsbtRecordRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.records_.Serialize();
  }
  /**
   * @brief Set json object to records field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetRecordsString(  // line separate
      SetPsbtRecordRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.records_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SetPsbtRecordRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SetPsbtRecordRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SetPsbtRecordRequestMapTable =
    cfd::core::JsonTableMap<SetPsbtRecordRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SetPsbtRecordRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SetPsbtRecordRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(psbt) value
   */
  std::string psbt_ = "";
  /**
   * @brief JsonAPI(records) value
   */
  JsonObjectVector<PsbtRecordData, PsbtRecordDataStruct> records_;  // NOLINT
};

// ------------------------------------------------------------------------
// CreateSignatureHashRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateSignatureHashRequest) class
 */
class CreateSignatureHashRequest
  : public cfd::core::JsonClassBase<CreateSignatureHashRequest> {
 public:
  CreateSignatureHashRequest() {
    CollectFieldName();
  }
  virtual ~CreateSignatureHashRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const CreateSignatureHashRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      CreateSignatureHashRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of txin.
   * @return txin
   */
  CreateSignatureHashTxInRequest& GetTxin() {  // NOLINT
    return txin_;
  }
  /**
   * @brief Set to txin.
   * @param[in] txin    setting value.
   */
  void SetTxin(  // line separate
      const CreateSignatureHashTxInRequest& txin) {  // NOLINT
    this->txin_ = txin;
  }
  /**
   * @brief Get data type of txin.
   * @return Data type of txin.
   */
  static std::string GetTxinFieldType() {
    return "CreateSignatureHashTxInRequest";  // NOLINT
  }
  /**
   * @brief Get json string of txin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinString(  // line separate
      const CreateSignatureHashRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txin_.Serialize();
  }
  /**
   * @brief Set json object to txin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinString(  // line separate
      CreateSignatureHashRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateSignatureHashRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateSignatureHashRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateSignatureHashRequestMapTable =
    cfd::core::JsonTableMap<CreateSignatureHashRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateSignatureHashRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateSignatureHashRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(txin) value
   */
  CreateSignatureHashTxInRequest txin_;  // NOLINT
};

// ------------------------------------------------------------------------
// CreateElementsSignatureHashRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (CreateElementsSignatureHashRequest) class
 */
class CreateElementsSignatureHashRequest
  : public cfd::core::JsonClassBase<CreateElementsSignatureHashRequest> {
 public:
  CreateElementsSignatureHashRequest() {
    CollectFieldName();
  }
  virtual ~CreateElementsSignatureHashRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const CreateElementsSignatureHashRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      CreateElementsSignatureHashRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of txin.
   * @return txin
   */
  CreateElementsSignatureHashTxIn& GetTxin() {  // NOLINT
    return txin_;
  }
  /**
   * @brief Set to txin.
   * @param[in] txin    setting value.
   */
  void SetTxin(  // line separate
      const CreateElementsSignatureHashTxIn& txin) {  // NOLINT
    this->txin_ = txin;
  }
  /**
   * @brief Get data type of txin.
   * @return Data type of txin.
   */
  static std::string GetTxinFieldType() {
    return "CreateElementsSignatureHashTxIn";  // NOLINT
  }
  /**
   * @brief Get json string of txin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinString(  // line separate
      const CreateElementsSignatureHashRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txin_.Serialize();
  }
  /**
   * @brief Set json object to txin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinString(  // line separate
      CreateElementsSignatureHashRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const CreateElementsSignatureHashRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  CreateElementsSignatureHashRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using CreateElementsSignatureHashRequestMapTable =
    cfd::core::JsonTableMap<CreateElementsSignatureHashRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const CreateElementsSignatureHashRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static CreateElementsSignatureHashRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(txin) value
   */
  CreateElementsSignatureHashTxIn txin_;  // NOLINT
};

// ------------------------------------------------------------------------
// SignEcdsaAdaptorRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SignEcdsaAdaptorRequest) class
 */
class SignEcdsaAdaptorRequest
  : public cfd::core::JsonClassBase<SignEcdsaAdaptorRequest> {
 public:
  SignEcdsaAdaptorRequest() {
    CollectFieldName();
  }
  virtual ~SignEcdsaAdaptorRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of message
   * @return message
   */
  std::string GetMessage() const {
    return message_;
  }
  /**
   * @brief Set to message
   * @param[in] message    setting value.
   */
  void SetMessage(  // line separate
    const std::string& message) {  // NOLINT
    this->message_ = message;
  }
  /**
   * @brief Get data type of message
   * @return Data type of message
   */
  static std::string GetMessageFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of message field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMessageString(  // line separate
      const SignEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.message_);
  }
  /**
   * @brief Set json object to message field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMessageString(  // line separate
      SignEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.message_, json_value);
  }

  /**
   * @brief Get of isHashed
   * @return isHashed
   */
  bool GetIsHashed() const {
    return is_hashed_;
  }
  /**
   * @brief Set to isHashed
   * @param[in] is_hashed    setting value.
   */
  void SetIsHashed(  // line separate
    const bool& is_hashed) {  // NOLINT
    this->is_hashed_ = is_hashed;
  }
  /**
   * @brief Get data type of isHashed
   * @return Data type of isHashed
   */
  static std::string GetIsHashedFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isHashed field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsHashedString(  // line separate
      const SignEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_hashed_);
  }
  /**
   * @brief Set json object to isHashed field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsHashedString(  // line separate
      SignEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_hashed_, json_value);
  }

  /**
   * @brief Get of privkey
   * @return privkey
   */
  std::string GetPrivkey() const {
    return privkey_;
  }
  /**
   * @brief Set to privkey
   * @param[in] privkey    setting value.
   */
  void SetPrivkey(  // line separate
    const std::string& privkey) {  // NOLINT
    this->privkey_ = privkey;
  }
  /**
   * @brief Get data type of privkey
   * @return Data type of privkey
   */
  static std::string GetPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of privkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPrivkeyString(  // line separate
      const SignEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.privkey_);
  }
  /**
   * @brief Set json object to privkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPrivkeyString(  // line separate
      SignEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.privkey_, json_value);
  }

  /**
   * @brief Get of adaptor
   * @return adaptor
   */
  std::string GetAdaptor() const {
    return adaptor_;
  }
  /**
   * @brief Set to adaptor
   * @param[in] adaptor    setting value.
   */
  void SetAdaptor(  // line separate
    const std::string& adaptor) {  // NOLINT
    this->adaptor_ = adaptor;
  }
  /**
   * @brief Get data type of adaptor
   * @return Data type of adaptor
   */
  static std::string GetAdaptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of adaptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAdaptorString(  // line separate
      const SignEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.adaptor_);
  }
  /**
   * @brief Set json object to adaptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAdaptorString(  // line separate
      SignEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.adaptor_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SignEcdsaAdaptorRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SignEcdsaAdaptorRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SignEcdsaAdaptorRequestMapTable =
    cfd::core::JsonTableMap<SignEcdsaAdaptorRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SignEcdsaAdaptorRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SignEcdsaAdaptorRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(message) value
   */
  std::string message_ = "";
  /**
   * @brief JsonAPI(isHashed) value
   */
  bool is_hashed_ = true;
  /**
   * @brief JsonAPI(privkey) value
   */
  std::string privkey_ = "";
  /**
   * @brief JsonAPI(adaptor) value
   */
  std::string adaptor_ = "";
};

// ------------------------------------------------------------------------
// SignEcdsaAdaptorResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SignEcdsaAdaptorResponse) class
 */
class SignEcdsaAdaptorResponse
  : public cfd::core::JsonClassBase<SignEcdsaAdaptorResponse> {
 public:
  SignEcdsaAdaptorResponse() {
    CollectFieldName();
  }
  virtual ~SignEcdsaAdaptorResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of adaptorSignature
   * @return adaptorSignature
   */
  std::string GetAdaptorSignature() const {
    return adaptor_signature_;
  }
  /**
   * @brief Set to adaptorSignature
   * @param[in] adaptor_signature    setting value.
   */
  void SetAdaptorSignature(  // line separate
    const std::string& adaptor_signature) {  // NOLINT
    this->adaptor_signature_ = adaptor_signature;
  }
  /**
   * @brief Get data type of adaptorSignature
   * @return Data type of adaptorSignature
   */
  static std::string GetAdaptorSignatureFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of adaptorSignature field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAdaptorSignatureString(  // line separate
      const SignEcdsaAdaptorResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.adaptor_signature_);
  }
  /**
   * @brief Set json object to adaptorSignature field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAdaptorSignatureString(  // line separate
      SignEcdsaAdaptorResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.adaptor_signature_, json_value);
  }

  /**
   * @brief Get of proof
   * @return proof
   */
  std::string GetProof() const {
    return proof_;
  }
  /**
   * @brief Set to proof
   * @param[in] proof    setting value.
   */
  void SetProof(  // line separate
    const std::string& proof) {  // NOLINT
    this->proof_ = proof;
  }
  /**
   * @brief Get data type of proof
   * @return Data type of proof
   */
  static std::string GetProofFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of proof field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetProofString(  // line separate
      const SignEcdsaAdaptorResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.proof_);
  }
  /**
   * @brief Set json object to proof field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetProofString(  // line separate
      SignEcdsaAdaptorResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.proof_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SignEcdsaAdaptorResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SignEcdsaAdaptorResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SignEcdsaAdaptorResponseMapTable =
    cfd::core::JsonTableMap<SignEcdsaAdaptorResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SignEcdsaAdaptorResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SignEcdsaAdaptorResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(adaptorSignature) value
   */
  std::string adaptor_signature_ = "";
  /**
   * @brief JsonAPI(proof) value
   */
  std::string proof_ = "";
};

// ------------------------------------------------------------------------
// SignPsbtRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SignPsbtRequest) class
 */
class SignPsbtRequest
  : public cfd::core::JsonClassBase<SignPsbtRequest> {
 public:
  SignPsbtRequest() {
    CollectFieldName();
  }
  virtual ~SignPsbtRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of psbt
   * @return psbt
   */
  std::string GetPsbt() const {
    return psbt_;
  }
  /**
   * @brief Set to psbt
   * @param[in] psbt    setting value.
   */
  void SetPsbt(  // line separate
    const std::string& psbt) {  // NOLINT
    this->psbt_ = psbt;
  }
  /**
   * @brief Get data type of psbt
   * @return Data type of psbt
   */
  static std::string GetPsbtFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of psbt field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPsbtString(  // line separate
      const SignPsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.psbt_);
  }
  /**
   * @brief Set json object to psbt field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPsbtString(  // line separate
      SignPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.psbt_, json_value);
  }

  /**
   * @brief Get of privkey
   * @return privkey
   */
  std::string GetPrivkey() const {
    return privkey_;
  }
  /**
   * @brief Set to privkey
   * @param[in] privkey    setting value.
   */
  void SetPrivkey(  // line separate
    const std::string& privkey) {  // NOLINT
    this->privkey_ = privkey;
  }
  /**
   * @brief Get data type of privkey
   * @return Data type of privkey
   */
  static std::string GetPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of privkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPrivkeyString(  // line separate
      const SignPsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.privkey_);
  }
  /**
   * @brief Set json object to privkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPrivkeyString(  // line separate
      SignPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.privkey_, json_value);
  }

  /**
   * @brief Get of hasGrindR
   * @return hasGrindR
   */
  bool GetHasGrindR() const {
    return has_grind_r_;
  }
  /**
   * @brief Set to hasGrindR
   * @param[in] has_grind_r    setting value.
   */
  void SetHasGrindR(  // line separate
    const bool& has_grind_r) {  // NOLINT
    this->has_grind_r_ = has_grind_r;
  }
  /**
   * @brief Get data type of hasGrindR
   * @return Data type of hasGrindR
   */
  static std::string GetHasGrindRFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of hasGrindR field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetHasGrindRString(  // line separate
      const SignPsbtRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.has_grind_r_);
  }
  /**
   * @brief Set json object to hasGrindR field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetHasGrindRString(  // line separate
      SignPsbtRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.has_grind_r_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SignPsbtRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SignPsbtRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SignPsbtRequestMapTable =
    cfd::core::JsonTableMap<SignPsbtRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SignPsbtRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SignPsbtRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(psbt) value
   */
  std::string psbt_ = "";
  /**
   * @brief JsonAPI(privkey) value
   */
  std::string privkey_ = "";
  /**
   * @brief JsonAPI(hasGrindR) value
   */
  bool has_grind_r_ = true;
};

// ------------------------------------------------------------------------
// SignWithPrivkeyRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SignWithPrivkeyRequest) class
 */
class SignWithPrivkeyRequest
  : public cfd::core::JsonClassBase<SignWithPrivkeyRequest> {
 public:
  SignWithPrivkeyRequest() {
    CollectFieldName();
  }
  virtual ~SignWithPrivkeyRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const SignWithPrivkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      SignWithPrivkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const SignWithPrivkeyRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      SignWithPrivkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of txin.
   * @return txin
   */
  SignWithPrivkeyTxInRequest& GetTxin() {  // NOLINT
    return txin_;
  }
  /**
   * @brief Set to txin.
   * @param[in] txin    setting value.
   */
  void SetTxin(  // line separate
      const SignWithPrivkeyTxInRequest& txin) {  // NOLINT
    this->txin_ = txin;
  }
  /**
   * @brief Get data type of txin.
   * @return Data type of txin.
   */
  static std::string GetTxinFieldType() {
    return "SignWithPrivkeyTxInRequest";  // NOLINT
  }
  /**
   * @brief Get json string of txin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinString(  // line separate
      const SignWithPrivkeyRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txin_.Serialize();
  }
  /**
   * @brief Set json object to txin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinString(  // line separate
      SignWithPrivkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of utxos.
   * @return utxos
   */
  JsonObjectVector<UtxoObject, UtxoObjectStruct>& GetUtxos() {  // NOLINT
    return utxos_;
  }
  /**
   * @brief Set to utxos.
   * @param[in] utxos    setting value.
   */
  void SetUtxos(  // line separate
      const JsonObjectVector<UtxoObject, UtxoObjectStruct>& utxos) {  // NOLINT
    this->utxos_ = utxos;
  }
  /**
   * @brief Get data type of utxos.
   * @return Data type of utxos.
   */
  static std::string GetUtxosFieldType() {
    return "JsonObjectVector<UtxoObject, UtxoObjectStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of utxos field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUtxosString(  // line separate
      const SignWithPrivkeyRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.utxos_.Serialize();
  }
  /**
   * @brief Set json object to utxos field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUtxosString(  // line separate
      SignWithPrivkeyRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.utxos_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SignWithPrivkeyRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SignWithPrivkeyRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SignWithPrivkeyRequestMapTable =
    cfd::core::JsonTableMap<SignWithPrivkeyRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SignWithPrivkeyRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SignWithPrivkeyRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(txin) value
   */
  SignWithPrivkeyTxInRequest txin_;  // NOLINT
  /**
   * @brief JsonAPI(utxos) value
   */
  JsonObjectVector<UtxoObject, UtxoObjectStruct> utxos_;  // NOLINT
};

// ------------------------------------------------------------------------
// GetSupportedFunctionResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (GetSupportedFunctionResponse) class
 */
class GetSupportedFunctionResponse
  : public cfd::core::JsonClassBase<GetSupportedFunctionResponse> {
 public:
  GetSupportedFunctionResponse() {
    CollectFieldName();
  }
  virtual ~GetSupportedFunctionResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of bitcoin
   * @return bitcoin
   */
  bool GetBitcoin() const {
    return bitcoin_;
  }
  /**
   * @brief Set to bitcoin
   * @param[in] bitcoin    setting value.
   */
  void SetBitcoin(  // line separate
    const bool& bitcoin) {  // NOLINT
    this->bitcoin_ = bitcoin;
  }
  /**
   * @brief Get data type of bitcoin
   * @return Data type of bitcoin
   */
  static std::string GetBitcoinFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of bitcoin field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetBitcoinString(  // line separate
      const GetSupportedFunctionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.bitcoin_);
  }
  /**
   * @brief Set json object to bitcoin field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetBitcoinString(  // line separate
      GetSupportedFunctionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.bitcoin_, json_value);
  }

  /**
   * @brief Get of elements
   * @return elements
   */
  bool GetElements() const {
    return elements_;
  }
  /**
   * @brief Set to elements
   * @param[in] elements    setting value.
   */
  void SetElements(  // line separate
    const bool& elements) {  // NOLINT
    this->elements_ = elements;
  }
  /**
   * @brief Get data type of elements
   * @return Data type of elements
   */
  static std::string GetElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of elements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetElementsString(  // line separate
      const GetSupportedFunctionResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.elements_);
  }
  /**
   * @brief Set json object to elements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetElementsString(  // line separate
      GetSupportedFunctionResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.elements_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const GetSupportedFunctionResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  GetSupportedFunctionResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using GetSupportedFunctionResponseMapTable =
    cfd::core::JsonTableMap<GetSupportedFunctionResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const GetSupportedFunctionResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static GetSupportedFunctionResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(bitcoin) value
   */
  bool bitcoin_ = false;
  /**
   * @brief JsonAPI(elements) value
   */
  bool elements_ = false;
};


// ------------------------------------------------------------------------
// TweakPrivkeyData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (TweakPrivkeyData) class
 */
class TweakPrivkeyData
  : public cfd::core::JsonClassBase<TweakPrivkeyData> {
 public:
  TweakPrivkeyData() {
    CollectFieldName();
  }
  virtual ~TweakPrivkeyData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of privkey
   * @return privkey
   */
  std::string GetPrivkey() const {
    return privkey_;
  }
  /**
   * @brief Set to privkey
   * @param[in] privkey    setting value.
   */
  void SetPrivkey(  // line separate
    const std::string& privkey) {  // NOLINT
    this->privkey_ = privkey;
  }
  /**
   * @brief Get data type of privkey
   * @return Data type of privkey
   */
  static std::string GetPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of privkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPrivkeyString(  // line separate
      const TweakPrivkeyData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.privkey_);
  }
  /**
   * @brief Set json object to privkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPrivkeyString(  // line separate
      TweakPrivkeyData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.privkey_, json_value);
  }

  /**
   * @brief Get of tweak
   * @return tweak
   */
  std::string GetTweak() const {
    return tweak_;
  }
  /**
   * @brief Set to tweak
   * @param[in] tweak    setting value.
   */
  void SetTweak(  // line separate
    const std::string& tweak) {  // NOLINT
    this->tweak_ = tweak;
  }
  /**
   * @brief Get data type of tweak
   * @return Data type of tweak
   */
  static std::string GetTweakFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tweak field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTweakString(  // line separate
      const TweakPrivkeyData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tweak_);
  }
  /**
   * @brief Set json object to tweak field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTweakString(  // line separate
      TweakPrivkeyData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tweak_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const TweakPrivkeyDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  TweakPrivkeyDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using TweakPrivkeyDataMapTable =
    cfd::core::JsonTableMap<TweakPrivkeyData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const TweakPrivkeyDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static TweakPrivkeyDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(privkey) value
   */
  std::string privkey_ = "";
  /**
   * @brief JsonAPI(tweak) value
   */
  std::string tweak_ = "";
};

// ------------------------------------------------------------------------
// TweakPubkeyData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (TweakPubkeyData) class
 */
class TweakPubkeyData
  : public cfd::core::JsonClassBase<TweakPubkeyData> {
 public:
  TweakPubkeyData() {
    CollectFieldName();
  }
  virtual ~TweakPubkeyData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const TweakPubkeyData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      TweakPubkeyData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Get of tweak
   * @return tweak
   */
  std::string GetTweak() const {
    return tweak_;
  }
  /**
   * @brief Set to tweak
   * @param[in] tweak    setting value.
   */
  void SetTweak(  // line separate
    const std::string& tweak) {  // NOLINT
    this->tweak_ = tweak;
  }
  /**
   * @brief Get data type of tweak
   * @return Data type of tweak
   */
  static std::string GetTweakFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tweak field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTweakString(  // line separate
      const TweakPubkeyData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tweak_);
  }
  /**
   * @brief Set json object to tweak field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTweakString(  // line separate
      TweakPubkeyData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tweak_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const TweakPubkeyDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  TweakPubkeyDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using TweakPubkeyDataMapTable =
    cfd::core::JsonTableMap<TweakPubkeyData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const TweakPubkeyDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static TweakPubkeyDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
  /**
   * @brief JsonAPI(tweak) value
   */
  std::string tweak_ = "";
};

// ------------------------------------------------------------------------
// SchnorrKeyPairData
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (SchnorrKeyPairData) class
 */
class SchnorrKeyPairData
  : public cfd::core::JsonClassBase<SchnorrKeyPairData> {
 public:
  SchnorrKeyPairData() {
    CollectFieldName();
  }
  virtual ~SchnorrKeyPairData() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const SchnorrKeyPairData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      SchnorrKeyPairData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Get of parity
   * @return parity
   */
  bool GetParity() const {
    return parity_;
  }
  /**
   * @brief Set to parity
   * @param[in] parity    setting value.
   */
  void SetParity(  // line separate
    const bool& parity) {  // NOLINT
    this->parity_ = parity;
  }
  /**
   * @brief Get data type of parity
   * @return Data type of parity
   */
  static std::string GetParityFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of parity field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetParityString(  // line separate
      const SchnorrKeyPairData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.parity_);
  }
  /**
   * @brief Set json object to parity field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetParityString(  // line separate
      SchnorrKeyPairData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.parity_, json_value);
  }

  /**
   * @brief Get of privkey
   * @return privkey
   */
  std::string GetPrivkey() const {
    return privkey_;
  }
  /**
   * @brief Set to privkey
   * @param[in] privkey    setting value.
   */
  void SetPrivkey(  // line separate
    const std::string& privkey) {  // NOLINT
    this->privkey_ = privkey;
  }
  /**
   * @brief Get data type of privkey
   * @return Data type of privkey
   */
  static std::string GetPrivkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of privkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPrivkeyString(  // line separate
      const SchnorrKeyPairData& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.privkey_);
  }
  /**
   * @brief Set json object to privkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPrivkeyString(  // line separate
      SchnorrKeyPairData& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.privkey_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const SchnorrKeyPairDataStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  SchnorrKeyPairDataStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using SchnorrKeyPairDataMapTable =
    cfd::core::JsonTableMap<SchnorrKeyPairData>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const SchnorrKeyPairDataMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static SchnorrKeyPairDataMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
  /**
   * @brief JsonAPI(parity) value
   */
  bool parity_ = false;
  /**
   * @brief JsonAPI(privkey) value
   */
  std::string privkey_ = "";
};




// ------------------------------------------------------------------------
// UpdateTxOutAmountRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (UpdateTxOutAmountRequest) class
 */
class UpdateTxOutAmountRequest
  : public cfd::core::JsonClassBase<UpdateTxOutAmountRequest> {
 public:
  UpdateTxOutAmountRequest() {
    CollectFieldName();
  }
  virtual ~UpdateTxOutAmountRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const UpdateTxOutAmountRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      UpdateTxOutAmountRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const UpdateTxOutAmountRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      UpdateTxOutAmountRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of txouts.
   * @return txouts
   */
  JsonObjectVector<UpdateTxOutAmountData, UpdateTxOutAmountDataStruct>& GetTxouts() {  // NOLINT
    return txouts_;
  }
  /**
   * @brief Set to txouts.
   * @param[in] txouts    setting value.
   */
  void SetTxouts(  // line separate
      const JsonObjectVector<UpdateTxOutAmountData, UpdateTxOutAmountDataStruct>& txouts) {  // NOLINT
    this->txouts_ = txouts;
  }
  /**
   * @brief Get data type of txouts.
   * @return Data type of txouts.
   */
  static std::string GetTxoutsFieldType() {
    return "JsonObjectVector<UpdateTxOutAmountData, UpdateTxOutAmountDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txouts field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxoutsString(  // line separate
      const UpdateTxOutAmountRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txouts_.Serialize();
  }
  /**
   * @brief Set json object to txouts field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxoutsString(  // line separate
      UpdateTxOutAmountRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txouts_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const UpdateTxOutAmountRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  UpdateTxOutAmountRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using UpdateTxOutAmountRequestMapTable =
    cfd::core::JsonTableMap<UpdateTxOutAmountRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const UpdateTxOutAmountRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static UpdateTxOutAmountRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(txouts) value
   */
  JsonObjectVector<UpdateTxOutAmountData, UpdateTxOutAmountDataStruct> txouts_;  // NOLINT
};

// ------------------------------------------------------------------------
// UpdateWitnessStackRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (UpdateWitnessStackRequest) class
 */
class UpdateWitnessStackRequest
  : public cfd::core::JsonClassBase<UpdateWitnessStackRequest> {
 public:
  UpdateWitnessStackRequest() {
    CollectFieldName();
  }
  virtual ~UpdateWitnessStackRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const UpdateWitnessStackRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      UpdateWitnessStackRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const UpdateWitnessStackRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      UpdateWitnessStackRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of txin.
   * @return txin
   */
  UpdateWitnessStackTxInRequest& GetTxin() {  // NOLINT
    return txin_;
  }
  /**
   * @brief Set to txin.
   * @param[in] txin    setting value.
   */
  void SetTxin(  // line separate
      const UpdateWitnessStackTxInRequest& txin) {  // NOLINT
    this->txin_ = txin;
  }
  /**
   * @brief Get data type of txin.
   * @return Data type of txin.
   */
  static std::string GetTxinFieldType() {
    return "UpdateWitnessStackTxInRequest";  // NOLINT
  }
  /**
   * @brief Get json string of txin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinString(  // line separate
      const UpdateWitnessStackRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txin_.Serialize();
  }
  /**
   * @brief Set json object to txin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinString(  // line separate
      UpdateWitnessStackRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const UpdateWitnessStackRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  UpdateWitnessStackRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using UpdateWitnessStackRequestMapTable =
    cfd::core::JsonTableMap<UpdateWitnessStackRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const UpdateWitnessStackRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static UpdateWitnessStackRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(txin) value
   */
  UpdateWitnessStackTxInRequest txin_;  // NOLINT
};

// ------------------------------------------------------------------------
// VerifyEcdsaAdaptorRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (VerifyEcdsaAdaptorRequest) class
 */
class VerifyEcdsaAdaptorRequest
  : public cfd::core::JsonClassBase<VerifyEcdsaAdaptorRequest> {
 public:
  VerifyEcdsaAdaptorRequest() {
    CollectFieldName();
  }
  virtual ~VerifyEcdsaAdaptorRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of adaptorSignature
   * @return adaptorSignature
   */
  std::string GetAdaptorSignature() const {
    return adaptor_signature_;
  }
  /**
   * @brief Set to adaptorSignature
   * @param[in] adaptor_signature    setting value.
   */
  void SetAdaptorSignature(  // line separate
    const std::string& adaptor_signature) {  // NOLINT
    this->adaptor_signature_ = adaptor_signature;
  }
  /**
   * @brief Get data type of adaptorSignature
   * @return Data type of adaptorSignature
   */
  static std::string GetAdaptorSignatureFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of adaptorSignature field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAdaptorSignatureString(  // line separate
      const VerifyEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.adaptor_signature_);
  }
  /**
   * @brief Set json object to adaptorSignature field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAdaptorSignatureString(  // line separate
      VerifyEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.adaptor_signature_, json_value);
  }

  /**
   * @brief Get of proof
   * @return proof
   */
  std::string GetProof() const {
    return proof_;
  }
  /**
   * @brief Set to proof
   * @param[in] proof    setting value.
   */
  void SetProof(  // line separate
    const std::string& proof) {  // NOLINT
    this->proof_ = proof;
  }
  /**
   * @brief Get data type of proof
   * @return Data type of proof
   */
  static std::string GetProofFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of proof field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetProofString(  // line separate
      const VerifyEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.proof_);
  }
  /**
   * @brief Set json object to proof field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetProofString(  // line separate
      VerifyEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.proof_, json_value);
  }

  /**
   * @brief Get of adaptor
   * @return adaptor
   */
  std::string GetAdaptor() const {
    return adaptor_;
  }
  /**
   * @brief Set to adaptor
   * @param[in] adaptor    setting value.
   */
  void SetAdaptor(  // line separate
    const std::string& adaptor) {  // NOLINT
    this->adaptor_ = adaptor;
  }
  /**
   * @brief Get data type of adaptor
   * @return Data type of adaptor
   */
  static std::string GetAdaptorFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of adaptor field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetAdaptorString(  // line separate
      const VerifyEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.adaptor_);
  }
  /**
   * @brief Set json object to adaptor field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetAdaptorString(  // line separate
      VerifyEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.adaptor_, json_value);
  }

  /**
   * @brief Get of message
   * @return message
   */
  std::string GetMessage() const {
    return message_;
  }
  /**
   * @brief Set to message
   * @param[in] message    setting value.
   */
  void SetMessage(  // line separate
    const std::string& message) {  // NOLINT
    this->message_ = message;
  }
  /**
   * @brief Get data type of message
   * @return Data type of message
   */
  static std::string GetMessageFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of message field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetMessageString(  // line separate
      const VerifyEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.message_);
  }
  /**
   * @brief Set json object to message field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetMessageString(  // line separate
      VerifyEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.message_, json_value);
  }

  /**
   * @brief Get of isHashed
   * @return isHashed
   */
  bool GetIsHashed() const {
    return is_hashed_;
  }
  /**
   * @brief Set to isHashed
   * @param[in] is_hashed    setting value.
   */
  void SetIsHashed(  // line separate
    const bool& is_hashed) {  // NOLINT
    this->is_hashed_ = is_hashed;
  }
  /**
   * @brief Get data type of isHashed
   * @return Data type of isHashed
   */
  static std::string GetIsHashedFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isHashed field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsHashedString(  // line separate
      const VerifyEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_hashed_);
  }
  /**
   * @brief Set json object to isHashed field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsHashedString(  // line separate
      VerifyEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_hashed_, json_value);
  }

  /**
   * @brief Get of pubkey
   * @return pubkey
   */
  std::string GetPubkey() const {
    return pubkey_;
  }
  /**
   * @brief Set to pubkey
   * @param[in] pubkey    setting value.
   */
  void SetPubkey(  // line separate
    const std::string& pubkey) {  // NOLINT
    this->pubkey_ = pubkey;
  }
  /**
   * @brief Get data type of pubkey
   * @return Data type of pubkey
   */
  static std::string GetPubkeyFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of pubkey field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPubkeyString(  // line separate
      const VerifyEcdsaAdaptorRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.pubkey_);
  }
  /**
   * @brief Set json object to pubkey field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPubkeyString(  // line separate
      VerifyEcdsaAdaptorRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.pubkey_, json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const VerifyEcdsaAdaptorRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  VerifyEcdsaAdaptorRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using VerifyEcdsaAdaptorRequestMapTable =
    cfd::core::JsonTableMap<VerifyEcdsaAdaptorRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const VerifyEcdsaAdaptorRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static VerifyEcdsaAdaptorRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(adaptorSignature) value
   */
  std::string adaptor_signature_ = "";
  /**
   * @brief JsonAPI(proof) value
   */
  std::string proof_ = "";
  /**
   * @brief JsonAPI(adaptor) value
   */
  std::string adaptor_ = "";
  /**
   * @brief JsonAPI(message) value
   */
  std::string message_ = "";
  /**
   * @brief JsonAPI(isHashed) value
   */
  bool is_hashed_ = true;
  /**
   * @brief JsonAPI(pubkey) value
   */
  std::string pubkey_ = "";
};

// ------------------------------------------------------------------------
// VerifyPsbtSignRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (VerifyPsbtSignRequest) class
 */
class VerifyPsbtSignRequest
  : public cfd::core::JsonClassBase<VerifyPsbtSignRequest> {
 public:
  VerifyPsbtSignRequest() {
    CollectFieldName();
  }
  virtual ~VerifyPsbtSignRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of psbt
   * @return psbt
   */
  std::string GetPsbt() const {
    return psbt_;
  }
  /**
   * @brief Set to psbt
   * @param[in] psbt    setting value.
   */
  void SetPsbt(  // line separate
    const std::string& psbt) {  // NOLINT
    this->psbt_ = psbt;
  }
  /**
   * @brief Get data type of psbt
   * @return Data type of psbt
   */
  static std::string GetPsbtFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of psbt field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetPsbtString(  // line separate
      const VerifyPsbtSignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.psbt_);
  }
  /**
   * @brief Set json object to psbt field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetPsbtString(  // line separate
      VerifyPsbtSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.psbt_, json_value);
  }

  /**
   * @brief Get of outPointList.
   * @return outPointList
   */
  JsonObjectVector<OutPoint, OutPointStruct>& GetOutPointList() {  // NOLINT
    return out_point_list_;
  }
  /**
   * @brief Set to outPointList.
   * @param[in] out_point_list    setting value.
   */
  void SetOutPointList(  // line separate
      const JsonObjectVector<OutPoint, OutPointStruct>& out_point_list) {  // NOLINT
    this->out_point_list_ = out_point_list;
  }
  /**
   * @brief Get data type of outPointList.
   * @return Data type of outPointList.
   */
  static std::string GetOutPointListFieldType() {
    return "JsonObjectVector<OutPoint, OutPointStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of outPointList field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetOutPointListString(  // line separate
      const VerifyPsbtSignRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.out_point_list_.Serialize();
  }
  /**
   * @brief Set json object to outPointList field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetOutPointListString(  // line separate
      VerifyPsbtSignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.out_point_list_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const VerifyPsbtSignRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  VerifyPsbtSignRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using VerifyPsbtSignRequestMapTable =
    cfd::core::JsonTableMap<VerifyPsbtSignRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const VerifyPsbtSignRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static VerifyPsbtSignRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(psbt) value
   */
  std::string psbt_ = "";
  /**
   * @brief JsonAPI(outPointList) value
   */
  JsonObjectVector<OutPoint, OutPointStruct> out_point_list_;  // NOLINT
};

// ------------------------------------------------------------------------
// VerifySignResponse
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (VerifySignResponse) class
 */
class VerifySignResponse
  : public cfd::core::JsonClassBase<VerifySignResponse> {
 public:
  VerifySignResponse() {
    CollectFieldName();
  }
  virtual ~VerifySignResponse() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of success
   * @return success
   */
  bool GetSuccess() const {
    return success_;
  }
  /**
   * @brief Set to success
   * @param[in] success    setting value.
   */
  void SetSuccess(  // line separate
    const bool& success) {  // NOLINT
    this->success_ = success;
  }
  /**
   * @brief Get data type of success
   * @return Data type of success
   */
  static std::string GetSuccessFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of success field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetSuccessString(  // line separate
      const VerifySignResponse& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.success_);
  }
  /**
   * @brief Set json object to success field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetSuccessString(  // line separate
      VerifySignResponse& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.success_, json_value);
  }

  /**
   * @brief Get of failTxins.
   * @return failTxins
   */
  JsonObjectVector<FailSignTxIn, FailSignTxInStruct>& GetFailTxins() {  // NOLINT
    return fail_txins_;
  }
  /**
   * @brief Set to failTxins.
   * @param[in] fail_txins    setting value.
   */
  void SetFailTxins(  // line separate
      const JsonObjectVector<FailSignTxIn, FailSignTxInStruct>& fail_txins) {  // NOLINT
    this->fail_txins_ = fail_txins;
  }
  /**
   * @brief Get data type of failTxins.
   * @return Data type of failTxins.
   */
  static std::string GetFailTxinsFieldType() {
    return "JsonObjectVector<FailSignTxIn, FailSignTxInStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of failTxins field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetFailTxinsString(  // line separate
      const VerifySignResponse& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.fail_txins_.Serialize();
  }
  /**
   * @brief Set json object to failTxins field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetFailTxinsString(  // line separate
      VerifySignResponse& obj,  // NOLINT
      const UniValue& json_value) {
    obj.fail_txins_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const VerifySignResponseStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  VerifySignResponseStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using VerifySignResponseMapTable =
    cfd::core::JsonTableMap<VerifySignResponse>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const VerifySignResponseMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static VerifySignResponseMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(success) value
   */
  bool success_ = true;
  /**
   * @brief JsonAPI(failTxins) value
   */
  JsonObjectVector<FailSignTxIn, FailSignTxInStruct> fail_txins_;  // NOLINT
};

// ------------------------------------------------------------------------
// VerifySignRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (VerifySignRequest) class
 */
class VerifySignRequest
  : public cfd::core::JsonClassBase<VerifySignRequest> {
 public:
  VerifySignRequest() {
    CollectFieldName();
  }
  virtual ~VerifySignRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const VerifySignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      VerifySignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const VerifySignRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      VerifySignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of txins.
   * @return txins
   */
  JsonObjectVector<VerifySignTxInUtxoData, VerifySignTxInUtxoDataStruct>& GetTxins() {  // NOLINT
    return txins_;
  }
  /**
   * @brief Set to txins.
   * @param[in] txins    setting value.
   */
  void SetTxins(  // line separate
      const JsonObjectVector<VerifySignTxInUtxoData, VerifySignTxInUtxoDataStruct>& txins) {  // NOLINT
    this->txins_ = txins;
  }
  /**
   * @brief Get data type of txins.
   * @return Data type of txins.
   */
  static std::string GetTxinsFieldType() {
    return "JsonObjectVector<VerifySignTxInUtxoData, VerifySignTxInUtxoDataStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of txins field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinsString(  // line separate
      const VerifySignRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txins_.Serialize();
  }
  /**
   * @brief Set json object to txins field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinsString(  // line separate
      VerifySignRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txins_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const VerifySignRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  VerifySignRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using VerifySignRequestMapTable =
    cfd::core::JsonTableMap<VerifySignRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const VerifySignRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static VerifySignRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(txins) value
   */
  JsonObjectVector<VerifySignTxInUtxoData, VerifySignTxInUtxoDataStruct> txins_;  // NOLINT
};

// ------------------------------------------------------------------------
// VerifySignatureRequest
// ------------------------------------------------------------------------
/**
 * @brief JSON-API (VerifySignatureRequest) class
 */
class VerifySignatureRequest
  : public cfd::core::JsonClassBase<VerifySignatureRequest> {
 public:
  VerifySignatureRequest() {
    CollectFieldName();
  }
  virtual ~VerifySignatureRequest() {
    // do nothing
  }
  /**
   * @brief collect field name.
   */
  static void CollectFieldName();

  /**
   * @brief Get of tx
   * @return tx
   */
  std::string GetTx() const {
    return tx_;
  }
  /**
   * @brief Set to tx
   * @param[in] tx    setting value.
   */
  void SetTx(  // line separate
    const std::string& tx) {  // NOLINT
    this->tx_ = tx;
  }
  /**
   * @brief Get data type of tx
   * @return Data type of tx
   */
  static std::string GetTxFieldType() {
    return "std::string";
  }
  /**
   * @brief Get json string of tx field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetTxString(  // line separate
      const VerifySignatureRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.tx_);
  }
  /**
   * @brief Set json object to tx field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetTxString(  // line separate
      VerifySignatureRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.tx_, json_value);
  }

  /**
   * @brief Get of isElements
   * @return isElements
   */
  bool GetIsElements() const {
    return is_elements_;
  }
  /**
   * @brief Set to isElements
   * @param[in] is_elements    setting value.
   */
  void SetIsElements(  // line separate
    const bool& is_elements) {  // NOLINT
    this->is_elements_ = is_elements;
  }
  /**
   * @brief Get data type of isElements
   * @return Data type of isElements
   */
  static std::string GetIsElementsFieldType() {
    return "bool";
  }
  /**
   * @brief Get json string of isElements field.
   * @param[in,out] obj     class object.
   * @return JSON string
   */
  static std::string GetIsElementsString(  // line separate
      const VerifySignatureRequest& obj) {  // NOLINT
    return cfd::core::ConvertToString(obj.is_elements_);
  }
  /**
   * @brief Set json object to isElements field.
   * @param[in,out] obj     class object.
   * @param[in] json_value  JSON object.
   */
  static void SetIsElementsString(  // line separate
      VerifySignatureRequest& obj,  // NOLINT
      const UniValue& json_value) {
    cfd::core::ConvertFromUniValue(  // line separate
      obj.is_elements_, json_value);
  }

  /**
   * @brief Get of txin.
   * @return txin
   */
  VerifySignatureTxInRequest& GetTxin() {  // NOLINT
    return txin_;
  }
  /**
   * @brief Set to txin.
   * @param[in] txin    setting value.
   */
  void SetTxin(  // line separate
      const VerifySignatureTxInRequest& txin) {  // NOLINT
    this->txin_ = txin;
  }
  /**
   * @brief Get data type of txin.
   * @return Data type of txin.
   */
  static std::string GetTxinFieldType() {
    return "VerifySignatureTxInRequest";  // NOLINT
  }
  /**
   * @brief Get json string of txin field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetTxinString(  // line separate
      const VerifySignatureRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.txin_.Serialize();
  }
  /**
   * @brief Set json object to txin field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetTxinString(  // line separate
      VerifySignatureRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.txin_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Get of utxos.
   * @return utxos
   */
  JsonObjectVector<UtxoObject, UtxoObjectStruct>& GetUtxos() {  // NOLINT
    return utxos_;
  }
  /**
   * @brief Set to utxos.
   * @param[in] utxos    setting value.
   */
  void SetUtxos(  // line separate
      const JsonObjectVector<UtxoObject, UtxoObjectStruct>& utxos) {  // NOLINT
    this->utxos_ = utxos;
  }
  /**
   * @brief Get data type of utxos.
   * @return Data type of utxos.
   */
  static std::string GetUtxosFieldType() {
    return "JsonObjectVector<UtxoObject, UtxoObjectStruct>";  // NOLINT
  }
  /**
   * @brief Get json string of utxos field.
   * @param[in,out] obj     class object
   * @return JSON string.
   */
  static std::string GetUtxosString(  // line separate
      const VerifySignatureRequest& obj) {  // NOLINT
    // Do not set to const, because substitution of member variables
    // may occur in pre / post processing inside Serialize
    return obj.utxos_.Serialize();
  }
  /**
   * @brief Set json object to utxos field.
   * @param[in,out] obj     class object
   * @param[in] json_value  JSON object
   */
  static void SetUtxosString(  // line separate
      VerifySignatureRequest& obj,  // NOLINT
      const UniValue& json_value) {
    obj.utxos_.DeserializeUniValue(json_value);
  }

  /**
   * @brief Set ignore item.
   * @param[in] key   ignore target key name.
   */
  void SetIgnoreItem(const std::string& key) {
    ignore_items.insert(key);
  }

  /**
   * @brief Convert struct to class.
   * @param[in] data   struct data.
   */
  void ConvertFromStruct(
      const VerifySignatureRequestStruct& data);

  /**
   * @brief Convert class to struct.
   * @return  struct data.
   */
  VerifySignatureRequestStruct ConvertToStruct()  const;

 protected:
  /**
   * @brief definition type of Map table.
   */
  using VerifySignatureRequestMapTable =
    cfd::core::JsonTableMap<VerifySignatureRequest>;

  /**
   * @brief Get JSON mapping object.
   * @return JSON mapping object.
   * @see cfd::core::JsonClassBase::GetJsonMapper()
   */
  virtual const VerifySignatureRequestMapTable& GetJsonMapper() const {  // NOLINT
    return json_mapper;
  }
  /**
   * @brief Get item lists of JSON mapping.
   * Fetch a list of target variable names in the order of definition.
   * @return Item lists of JSON mapping.
   * @see cfd::core::JsonClassBase::GetJsonItemList()
   */
  virtual const std::vector<std::string>& GetJsonItemList() const {
    return item_list;
  }
  /**
   * @brief Get ignore item lists of JSON mapping.
   * Ignore the target variable at Serialize.
   * @return Item list of JSON mapping.
   * @see cfd::core::JsonClassBase::GetIgnoreItem()
   */
  virtual const std::set<std::string>& GetIgnoreItem() const {
    return ignore_items;
  }

 private:
 /**
  * @brief JsonFunctionMap table
  */
  static VerifySignatureRequestMapTable json_mapper;
  /**
   * @brief field name list.
   */
  static std::vector<std::string> item_list;
  /**
   * @brief ignore item list.
   */
  std::set<std::string> ignore_items;

  /**
   * @brief JsonAPI(tx) value
   */
  std::string tx_ = "";
  /**
   * @brief JsonAPI(isElements) value
   */
  bool is_elements_ = false;
  /**
   * @brief JsonAPI(txin) value
   */
  VerifySignatureTxInRequest txin_;  // NOLINT
  /**
   * @brief JsonAPI(utxos) value
   */
  JsonObjectVector<UtxoObject, UtxoObjectStruct> utxos_;  // NOLINT
};

// @formatter:on
// clang-format on

}  // namespace json
}  // namespace api
}  // namespace js
}  // namespace cfd

#endif  // CFD_JS_SRC_AUTOGEN_CFD_JS_API_JSON_AUTOGEN_H_

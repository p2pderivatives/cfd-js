name: develop pre-merge check

on: 
  push:
    branches:
    - develop
    - test_ci
  pull_request:
    branches:
    - develop
    - test_ci

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 4

jobs:
  cmake-js-build:
    name: cmake-js build
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        node: [8, 12, 14]
        exclude:
          - os: macos-latest
            node: 8

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2.1.1
      continue-on-error: true
      timeout-minutes: 1
      with:
        node-version: ${{ matrix.node }}
    - name: dump node version
      id: node_ver
      run: |
        export node_ver="$(node --version)"
        echo "::set-output name=node_version::$node_ver"
        echo "node_version=$node_ver"
      shell: bash
    - name: node_modules-useCache
      uses: actions/cache@v1
      id: node_cache
      with:
        path: node_modules
        key: node-${{ runner.os }}-${{ matrix.node }}-${{ steps.node_ver.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: node-${{ runner.os }}-${{ matrix.node }}-${{ steps.node_ver.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}
    - name: npm info
      if: steps.node_cache.outputs.cache-hit != 'true'
      id: npm_info
      run: |
        npm --version
        echo "::set-output name=temp_npm_cachedir::$(npm config get cache)"
    - name: use npm cache
      if: matrix.os != 'windows-latest' && steps.node_cache.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      id: npm_cache
      with:
        path: ${{ steps.npm_info.outputs.temp_npm_cachedir }}
        key: npm-${{ runner.os }}-${{ matrix.node }}-${{ steps.node_ver.outputs.node_version }}-0
        restore-keys: |
          npm-${{ runner.os }}-${{ matrix.node }}-${{ steps.node_ver.outputs.node_version }}-
    - name: npm_install
      if: steps.node_cache.outputs.cache-hit != 'true'
      env:
        CFDJS_UNUSE_ASSET: true
      run: |
        npm set progress=false
        npm ci
    - name: build
      if: steps.node_cache.outputs.cache-hit == 'true'
      run: npm run cmake_release_parallel
    - name: test_all
      run: npm run test
    - name: example
      run: npm run example
    - name: elements_example
      run: npm run elements_example
    - name: lint_check
      if: matrix.os != 'macos-latest'
      run: npm run lint_all
    - name: after_job
      run: rm -rf node_modules/cfd-js
      shell: bash
      continue-on-error: true

  doxygen-ubuntu:
    name: doxygen-ubuntu
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: install_doxygen
      run: sudo apt install doxygen graphviz
    - name: doxygen_check
      run: |
        cd doc
        doxygen Doxyfile_quiet_all

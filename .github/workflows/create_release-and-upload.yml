name: create-release-upload

on: 
  push:
    tags:
    - 'v*'

env:
  CMAKE_VERSION: 3.15.5

jobs:
  create-releases:
    name: create-releases
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash
    - name: check package.json version
      env:
        version: ${{ steps.get_version.outputs.VERSION }}
      run: node ./tools/checker.js version ${version}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: true
#      continue-on-error: true
    - name: write upload url
      env:
        url: ${{ steps.create_release.outputs.upload_url }}
      run: |
        echo $url > upload_url.txt
    - name: upload artifact
      uses: actions/upload-artifact@v1
      with:
        name: artifact-upload_url
        path: upload_url.txt

  upload-object-windows-vs2019:
    name: upload-object-win-vs2019
    needs: create-releases
    runs-on: windows-latest

    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: download artifact
      uses: actions/download-artifact@v1
      with:
        name: artifact-upload_url
    - name: dump upload url
      id: get_url
      run: |
        export up_url="$(cat artifact-upload_url/upload_url.txt)"
        echo "::set-output name=upload_url::$up_url"
        echo "url=$up_url"
      shell: bash
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash
#      run: |
#        echo "##[set-output name=VERSION;]$(echo ${GITHUB_REF#refs/tags/})"
#        echo "CMAKE_VERSION=${env:CMAKE_VERSION}" > cmake_ver.txt
#        cat cmake_ver.txt
    - name: dump version
      env:
        version: ${{ steps.get_version.outputs.VERSION }}
      run: echo "version=${version}"
      shell: bash
    - name: create folder
      run: mkdir dist
    - name: cmake-build
      id: cmake_build
      run: |
        cmake -S . -B build
        cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_SHARED=on -DENABLE_CAPI=off -DENABLE_TESTS=off --build build
        cmake --build build --parallel 4 --config Release
      timeout-minutes: 20
    - name: cmake-install
      run: |
        cmake -DCMAKE_INSTALL_PREFIX="./dist" --install build
        cmake --install build
        cd dist
        del /F /Q cmake\wallycore-*
        del /F /Q lib\wallycore.*
        del /F /Q lib\libwallycore.*
        del /F /Q lib\pkgconfig\wallycore.pc
      shell: cmd
    - name: create archive file
      run: |
        cd dist
        Compress-Archive -Path ./* -DestinationPath ../cfd.zip
        cd ..
        echo "---- dump zip file ----"
        dir .
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_url.outputs.upload_url }}
        asset_path: ./cfd.zip
        asset_name: cfdjs-api-${{ steps.get_version.outputs.VERSION }}-win-vs2019-x86_64.zip
        asset_content_type: application/zip
    - name: npm install
      run: npm install
      timeout-minutes: 20
    - name: prebuild
      run: npm run prebuild_all
    - name: prebuild upload
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npm run prebuild_upload_all -- ${GITHUB_TOKEN}
      shell: bash

  upload-object-ubuntu:
    name: upload-object-ubuntu
    needs: create-releases
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: list
      run: ls -a $GITHUB_WORKSPACE
    - name: create folder
      run: |
        echo "---- dump output data ----"
        mkdir dist
    - name: cmake-build
      id: cmake_build
      run: |
        cmake -S . -B build
        cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_SHARED=on -DENABLE_CAPI=off -DENABLE_TESTS=off -DTARGET_RPATH="@executable_path;/usr/local/lib;/usr/local/lib64;./node_modules/cfd-js/build/Release;../node_modules/cfd-js/build/Release;../../node_modules/cfd-js/build/Release;../../../node_modules/cfd-js/build/Release;../../../../node_modules/cfd-js/build/Release;../../../../../node_modules/cfd-js/build/Release;../../../../../../node_modules/cfd-js/build/Release;./build/Release;./build/Release;./wrap_js/dl_lib/lib" --build build
        cmake --build build --parallel 4 --config Release
        cd ../..
      timeout-minutes: 20
    - name: cmake-install
      run: |
        cd build
        sudo make install DESTDIR=../dist
        cd ..
        sudo rm -rf dist/usr/local/cmake/wallycore-* dist/usr/local/lib/pkgconfig/wallycore.pc
        sudo rm -rf dist/usr/local/lib/wallycore.*   dist/usr/local/lib/libwallycore.*
    - name: create archive file
      run: |
        cd dist
        zip -r cfd.zip usr
        echo "---- dump zip file ----"
        ls -l
    - name: download artifact
      uses: actions/download-artifact@v1
      with:
        name: artifact-upload_url
    - name: dump upload url
      id: get_url
      run: |
        export up_url="$(cat artifact-upload_url/upload_url.txt)"
        echo "::set-output name=upload_url::$up_url"
        echo "url=$up_url"
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_url.outputs.upload_url }}
        asset_path: ./dist/cfd.zip
        asset_name: cfdjs-api-${{ steps.get_version.outputs.VERSION }}-ubuntu1804-gcc-x86_64.zip
        asset_content_type: application/zip
    - name: npm install
      run: npm install
      timeout-minutes: 20
    - name: prebuild
      run: npm run prebuild_all
    - name: prebuild upload
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npm run prebuild_upload_all -- ${GITHUB_TOKEN}


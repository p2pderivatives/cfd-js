name: create-release-upload

on: 
  push:
    tags:
    - 'v*'

env:
  XCODE_VERSION: 11.7
  NODE_VERSION: 18

jobs:
  create_releases:
    name: create-releases
    runs-on: ubuntu-20.04

    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Get the version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
      shell: bash
    - name: check package.json version
      env:
        version: ${{ steps.get_version.outputs.VERSION }}
      run: node ./tools/checker.js version ${version}
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        prerelease: true
      continue-on-error: true

  upload-object-windows-vs2019:
    name: upload-object-win-vs2019
    needs: create_releases
    runs-on: windows-2019

    steps:
    - name: checkout
      uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      timeout-minutes: 1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: cmake version
      id: cmake_version
      shell: bash
      run: cmake --version
    - name: update to npm v7
      run: npm i -g npm@7
    - name: Get the version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
      shell: bash
    - name: Get the asset name
      id: asset_name
      run: echo "ASSET_NAME=cfdjs-api-${{ steps.get_version.outputs.VERSION }}-win-vs2019-x86_64.zip" >> $GITHUB_OUTPUT
      shell: bash
    - name: create folder
      run: mkdir dist
    - name: cmake-build
      id: cmake_build
      run: |
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DENABLE_SHARED=on -DENABLE_CAPI=off -DENABLE_TESTS=off -DCMAKE_INSTALL_PREFIX="./dist"
        cmake --build build --parallel 4 --config Release
      timeout-minutes: 20
    - name: cmake-install
      run: |
        cmake --install build
        cd dist
        del /F /Q cmake\wallycore-*
        del /F /Q lib\wallycore.*
        del /F /Q lib\libwallycore.*
        del /F /Q lib\pkgconfig\wallycore.pc
      shell: cmd
    - name: create archive file
      run: |
        cd dist
        Compress-Archive -Path ./* -DestinationPath ../${{ steps.asset_name.outputs.ASSET_NAME }}
        cd ..
        echo "---- dump zip file ----"
        dir .
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.asset_name.outputs.ASSET_NAME }}
    - name: cleanup
      run: rm -rf build
      shell: bash
    - name: npm install
      run: npm install
      timeout-minutes: 20
    - name: prebuild
      run: npm run prebuild_napi
    - name: prebuild upload
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npm run prebuild_upload_all -- ${GITHUB_TOKEN}
      shell: bash

  upload-object-ubuntu:
    name: upload-object-ubuntu
    needs: create_releases
    runs-on: ubuntu-20.04

    steps:
    - name: checkout
      uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      timeout-minutes: 1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: cmake version
      id: cmake_version
      run: cmake --version
    - name: Get the version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
    - name: Get the asset name
      id: asset_name
      run: echo "ASSET_NAME=cfdjs-api-${{ steps.get_version.outputs.VERSION }}-ubuntu2004-gcc-x86_64.zip" >> $GITHUB_OUTPUT
    - name: list
      run: ls -a $GITHUB_WORKSPACE
    - name: create folder
      run: |
        echo "---- dump output data ----"
        mkdir dist
    - name: cmake-build
      id: cmake_build
      run: |
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DENABLE_SHARED=on -DENABLE_CAPI=off -DENABLE_TESTS=off -DTARGET_RPATH="@executable_path;/usr/local/lib;/usr/local/lib64;./node_modules/cfd-js/build/Release;../node_modules/cfd-js/build/Release;../../node_modules/cfd-js/build/Release;../../../node_modules/cfd-js/build/Release;../../../../node_modules/cfd-js/build/Release;../../../../../node_modules/cfd-js/build/Release;../../../../../../node_modules/cfd-js/build/Release;./build/Release;./build/Release;./wrap_js/dl_lib/lib"
        cmake --build build --parallel 4 --config Release
        cd ../..
      timeout-minutes: 20
    - name: cmake-install
      run: |
        cd build
        sudo make install DESTDIR=../dist
        cd ..
        sudo rm -rf dist/usr/local/cmake/wallycore-* dist/usr/local/lib/pkgconfig/wallycore.pc
        sudo rm -rf dist/usr/local/lib/wallycore.*   dist/usr/local/lib/libwallycore.*
    - name: create archive file
      run: |
        cd dist
        zip -r ../${{ steps.asset_name.outputs.ASSET_NAME }} usr
        echo "---- dump zip file ----"
        ls -l ../*.zip
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.asset_name.outputs.ASSET_NAME }}
    - name: npm install
      run: npm install
      timeout-minutes: 20
    - name: prebuild
      run: npm run prebuild_napi
    - name: prebuild upload
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npm run prebuild_upload_all -- ${GITHUB_TOKEN}

  upload-object-macos:
    name: upload-object-macos
    needs: create_releases
    runs-on: macos-11

    steps:
    - name: checkout
      uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      timeout-minutes: 1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: cmake version
      id: cmake_version
      shell: bash
      run: cmake --version
    - name: Get the version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
    - name: Get the asset name
      id: asset_name
      run: echo "ASSET_NAME=cfdjs-api-${{ steps.get_version.outputs.VERSION }}-osx-xcode${{ env.XCODE_VERSION }}-x86_64.zip" >> $GITHUB_OUTPUT
    - name: Select Xcode version
      run: sudo xcode-select -s '/Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer'
    - name: Show Xcode version
      run: xcodebuild -version
    - name: list
      run: ls -a $GITHUB_WORKSPACE
    - name: create folder
      run: |
        echo "---- dump output data ----"
        mkdir dist
    - name: cmake-build
      id: cmake_build
      run: |
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DENABLE_SHARED=off -DENABLE_CAPI=off -DENABLE_TESTS=off -DTARGET_RPATH="@executable_path;/usr/local/lib;/usr/local/lib64;./node_modules/cfd-js/build/Release;../node_modules/cfd-js/build/Release;../../node_modules/cfd-js/build/Release;../../../node_modules/cfd-js/build/Release;../../../../node_modules/cfd-js/build/Release;../../../../../node_modules/cfd-js/build/Release;../../../../../../node_modules/cfd-js/build/Release;./build/Release;./build/Release;./wrap_js/dl_lib/lib"
        cmake --build build --parallel 4 --config Release
        cd ../..
      timeout-minutes: 30
    - name: cmake-install
      run: |
        cd build
        sudo make install DESTDIR=../dist
        cd ..
        sudo rm -rf dist/usr/local/cmake/wallycore-* dist/usr/local/lib/pkgconfig/wallycore.pc
        sudo rm -rf dist/usr/local/lib/wallycore.*   dist/usr/local/lib/libwallycore.*
    - name: create archive file
      run: |
        cd dist
        zip -r ../${{ steps.asset_name.outputs.ASSET_NAME }} usr
        echo "---- dump zip file ----"
        ls -l ../*.zip
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.asset_name.outputs.ASSET_NAME }}
    - name: npm install
      run: npm install
      timeout-minutes: 20
    - name: prebuild
      run: npm run prebuild_napi
    - name: prebuild upload
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npm run prebuild_upload_all -- ${GITHUB_TOKEN}

  upload-object-alpine:
    name: upload-object-alpine3.16
    needs: create_releases
    runs-on: ubuntu-20.04

    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Get the version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
    - name: Get the asset name
      id: asset_name
      run: echo "ASSET_NAME=cfdjs-api-${{ steps.get_version.outputs.VERSION }}-alpine314-musl-x86_64.zip" >> $GITHUB_OUTPUT
    - name: list
      run: ls -a $GITHUB_WORKSPACE
    - name: create folder
      run: |
        echo "---- dump output data ----"
        mkdir dist
    - name: docker run
      uses: docker://alpine:3.16
      with:
        entrypoint: /github/workspace/.github/workflows/docker/alpine_build_entrypoint.sh
    - name: rename asset
      run: mv ./dist/cfd.zip ${{ steps.asset_name.outputs.ASSET_NAME }}
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.asset_name.outputs.ASSET_NAME }}
    - name: docker run
      uses: docker://node:18.16-alpine3.16
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        entrypoint: /github/workspace/.github/workflows/docker/alpine_release_entrypoint.sh
